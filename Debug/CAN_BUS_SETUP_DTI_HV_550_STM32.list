
CAN_BUS_SETUP_DTI_HV_550_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080084b0  080084b0  000094b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800895c  0800895c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800895c  0800895c  0000995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008964  08008964  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800896c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001d4  08008b40  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08008b40  0000a440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7df  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf5  00000000  00000000  000149e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  000165d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d5  00000000  00000000  00016ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222b1  00000000  00000000  000175ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae2e  00000000  00000000  0003985e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cccf7  00000000  00000000  0004468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c4  00000000  00000000  001113c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00114d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008494 	.word	0x08008494

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008494 	.word	0x08008494

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001068:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800106c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001078:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800107c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001080:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00b      	beq.n	80010a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001088:	e000      	b.n	800108c <ITM_SendChar+0x2c>
    {
      __NOP();
 800108a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800108c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f9      	beq.n	800108a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001096:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_write>:
static void MX_USART2_UART_Init(void);
void Decode_CAN_Message(CAN_RxHeaderTypeDef *header, uint8_t *data);

/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	int i=0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	bf00      	nop
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	da08      	bge.n	80010de <_write+0x30>
	{
		ITM_SendChar((*ptr++));
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffc3 	bl	8001060 <ITM_SendChar>
		return len;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e7ff      	b.n	80010de <_write+0x30>
	}
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <Decode_CAN_Message>:

void Decode_CAN_Message(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	@ 0x2c
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    if (header->StdId == 0x00)  // HV550 CAN packet for ERPM, Duty, Voltage
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d151      	bne.n	800119e <Decode_CAN_Message+0xb6>
    {
        uint16_t input_voltage = (data[0] << 8) | data[1];
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	82fb      	strh	r3, [r7, #22]
        int16_t duty_raw = (int16_t)((data[2] << 8) | data[3]);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3302      	adds	r3, #2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b21b      	sxth	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3303      	adds	r3, #3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	82bb      	strh	r3, [r7, #20]
        int32_t erpm = (int32_t)((data[4] << 24) | (data[5] << 16) | (data[6] << 8) | data[7]);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3304      	adds	r3, #4
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	061a      	lsls	r2, r3, #24
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3305      	adds	r3, #5
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	041b      	lsls	r3, r3, #16
 800113a:	431a      	orrs	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3306      	adds	r3, #6
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4313      	orrs	r3, r2
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	3207      	adds	r2, #7
 800114a:	7812      	ldrb	r2, [r2, #0]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        float duty_cycle = duty_raw / 1000.0f;
 8001150:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115c:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80011cc <Decode_CAN_Message+0xe4>
 8001160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]

        sprintf(uart_buffer, "CAN ID: 0x00\nVoltage: %u V\nDuty: %.2f %%\nERPM: %ld\n\n", input_voltage, duty_cycle, erpm);
 8001168:	8afc      	ldrh	r4, [r7, #22]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f7ff fa0c 	bl	8000588 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	6939      	ldr	r1, [r7, #16]
 8001176:	9102      	str	r1, [sp, #8]
 8001178:	e9cd 2300 	strd	r2, r3, [sp]
 800117c:	4622      	mov	r2, r4
 800117e:	4914      	ldr	r1, [pc, #80]	@ (80011d0 <Decode_CAN_Message+0xe8>)
 8001180:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <Decode_CAN_Message+0xec>)
 8001182:	f003 fd45 	bl	8004c10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001186:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <Decode_CAN_Message+0xec>)
 8001188:	f7ff f892 	bl	80002b0 <strlen>
 800118c:	4603      	mov	r3, r0
 800118e:	b29a      	uxth	r2, r3
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	490f      	ldr	r1, [pc, #60]	@ (80011d4 <Decode_CAN_Message+0xec>)
 8001196:	4810      	ldr	r0, [pc, #64]	@ (80011d8 <Decode_CAN_Message+0xf0>)
 8001198:	f002 fa46 	bl	8003628 <HAL_UART_Transmit>
    else
    {
        sprintf(uart_buffer, "Unknown CAN ID: 0x%03lX\n", (unsigned long)header->StdId);
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
    }
}
 800119c:	e011      	b.n	80011c2 <Decode_CAN_Message+0xda>
        sprintf(uart_buffer, "Unknown CAN ID: 0x%03lX\n", (unsigned long)header->StdId);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	490d      	ldr	r1, [pc, #52]	@ (80011dc <Decode_CAN_Message+0xf4>)
 80011a6:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <Decode_CAN_Message+0xec>)
 80011a8:	f003 fd32 	bl	8004c10 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <Decode_CAN_Message+0xec>)
 80011ae:	f7ff f87f 	bl	80002b0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	4906      	ldr	r1, [pc, #24]	@ (80011d4 <Decode_CAN_Message+0xec>)
 80011bc:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <Decode_CAN_Message+0xf0>)
 80011be:	f002 fa33 	bl	8003628 <HAL_UART_Transmit>
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	447a0000 	.word	0x447a0000
 80011d0:	080084b0 	.word	0x080084b0
 80011d4:	20000288 	.word	0x20000288
 80011d8:	20000218 	.word	0x20000218
 80011dc:	080084e8 	.word	0x080084e8

080011e0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fd6d 	bl	8001cce <HAL_CAN_GetRxMessage>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    {
        Decode_CAN_Message(&RxHeader, RxData);
 80011fa:	4905      	ldr	r1, [pc, #20]	@ (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80011fc:	4805      	ldr	r0, [pc, #20]	@ (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80011fe:	f7ff ff73 	bl	80010e8 <Decode_CAN_Message>
        can_msg_received = 1;
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
    }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000027c 	.word	0x2000027c
 8001214:	20000260 	.word	0x20000260
 8001218:	20000284 	.word	0x20000284

0800121c <main>:
/* USER CODE END 0 */

int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  HAL_Init();
 8001220:	f000 fb80 	bl	8001924 <HAL_Init>
  SystemClock_Config();
 8001224:	f000 f830 	bl	8001288 <SystemClock_Config>
  MX_GPIO_Init();
 8001228:	f000 f8fa 	bl	8001420 <MX_GPIO_Init>
  MX_CAN1_Init();
 800122c:	f000 f898 	bl	8001360 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001230:	f000 f8cc 	bl	80013cc <MX_USART2_UART_Init>

  HAL_CAN_Start(&hcan1);
 8001234:	480f      	ldr	r0, [pc, #60]	@ (8001274 <main+0x58>)
 8001236:	f000 fd06 	bl	8001c46 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800123a:	2102      	movs	r1, #2
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <main+0x58>)
 800123e:	f000 fe68 	bl	8001f12 <HAL_CAN_ActivateNotification>
  while (1)
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
		printf("Working1");
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <main+0x5c>)
 8001244:	f003 fcd2 	bl	8004bec <iprintf>
	    if (can_msg_received)
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <main+0x60>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f8      	beq.n	8001242 <main+0x26>
	    {
	    	printf("Working2");
 8001250:	480b      	ldr	r0, [pc, #44]	@ (8001280 <main+0x64>)
 8001252:	f003 fccb 	bl	8004bec <iprintf>
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001256:	2120      	movs	r1, #32
 8001258:	480a      	ldr	r0, [pc, #40]	@ (8001284 <main+0x68>)
 800125a:	f001 fb6e 	bl	800293a <HAL_GPIO_TogglePin>
	        HAL_Delay(100);  // Blink duration
 800125e:	2064      	movs	r0, #100	@ 0x64
 8001260:	f000 fbd2 	bl	8001a08 <HAL_Delay>
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001264:	2120      	movs	r1, #32
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <main+0x68>)
 8001268:	f001 fb67 	bl	800293a <HAL_GPIO_TogglePin>
	        can_msg_received = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <main+0x60>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
		printf("Working1");
 8001272:	e7e6      	b.n	8001242 <main+0x26>
 8001274:	200001f0 	.word	0x200001f0
 8001278:	08008504 	.word	0x08008504
 800127c:	20000284 	.word	0x20000284
 8001280:	08008510 	.word	0x08008510
 8001284:	40020000 	.word	0x40020000

08001288 <SystemClock_Config>:
	    }
    }
}

void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2234      	movs	r2, #52	@ 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fd1f 	bl	8004cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <SystemClock_Config+0xd0>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a28      	ldr	r2, [pc, #160]	@ (8001358 <SystemClock_Config+0xd0>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <SystemClock_Config+0xd0>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4b23      	ldr	r3, [pc, #140]	@ (800135c <SystemClock_Config+0xd4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <SystemClock_Config+0xd4>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <SystemClock_Config+0xd4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001300:	2354      	movs	r3, #84	@ 0x54
 8001302:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fe99 	bl	800304c <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x9c>
 8001320:	f000 f8dc 	bl	80014dc <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8001324:	230f      	movs	r3, #15
 8001326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001328:	2302      	movs	r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001334:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fb39 	bl	80029b8 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xc8>
 800134c:	f000 f8c6 	bl	80014dc <Error_Handler>
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	@ 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_CAN1_Init>:

static void MX_CAN1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <MX_CAN1_Init+0x64>)
 8001366:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <MX_CAN1_Init+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_CAN1_Init+0x64>)
 800136c:	2210      	movs	r2, #16
 800136e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_CAN1_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <MX_CAN1_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_CAN1_Init+0x64>)
 800137e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001382:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_CAN1_Init+0x64>)
 8001386:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800138a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <MX_CAN1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_CAN1_Init+0x64>)
 8001394:	2201      	movs	r2, #1
 8001396:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <MX_CAN1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_CAN1_Init+0x64>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <MX_CAN1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_CAN1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK) { Error_Handler(); }
 80013b0:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <MX_CAN1_Init+0x64>)
 80013b2:	f000 fb4d 	bl	8001a50 <HAL_CAN_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_CAN1_Init+0x60>
 80013bc:	f000 f88e 	bl	80014dc <Error_Handler>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200001f0 	.word	0x200001f0
 80013c8:	40006400 	.word	0x40006400

080013cc <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f002 f8c0 	bl	8003588 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
 800140e:	f000 f865 	bl	80014dc <Error_Handler>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000218 	.word	0x20000218
 800141c:	40004400 	.word	0x40004400

08001420 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a25      	ldr	r2, [pc, #148]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_GPIO_Init+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2120      	movs	r1, #32
 80014aa:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <MX_GPIO_Init+0xb8>)
 80014ac:	f001 fa2c 	bl	8002908 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LED_Pin;
 80014b0:	2320      	movs	r3, #32
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_GPIO_Init+0xb8>)
 80014c8:	f001 f88a 	bl	80025e0 <HAL_GPIO_Init>
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <Error_Handler>:

void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  __disable_irq();
  while (1) {}
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <Error_Handler+0x8>

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <HAL_MspInit+0x4c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_MspInit+0x4c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001526:	2007      	movs	r0, #7
 8001528:	f001 f818 	bl	800255c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a29      	ldr	r2, [pc, #164]	@ (80015fc <HAL_CAN_MspInit+0xc4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d14c      	bne.n	80015f4 <HAL_CAN_MspInit+0xbc>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <HAL_CAN_MspInit+0xc8>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <HAL_CAN_MspInit+0xc8>)
 8001564:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <HAL_CAN_MspInit+0xc8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <HAL_CAN_MspInit+0xc8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a20      	ldr	r2, [pc, #128]	@ (8001600 <HAL_CAN_MspInit+0xc8>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <HAL_CAN_MspInit+0xc8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001592:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015a4:	2309      	movs	r3, #9
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4815      	ldr	r0, [pc, #84]	@ (8001604 <HAL_CAN_MspInit+0xcc>)
 80015b0:	f001 f816 	bl	80025e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2013      	movs	r0, #19
 80015ba:	f000 ffda 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80015be:	2013      	movs	r0, #19
 80015c0:	f000 fff3 	bl	80025aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2014      	movs	r0, #20
 80015ca:	f000 ffd2 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015ce:	2014      	movs	r0, #20
 80015d0:	f000 ffeb 	bl	80025aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2015      	movs	r0, #21
 80015da:	f000 ffca 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015de:	2015      	movs	r0, #21
 80015e0:	f000 ffe3 	bl	80025aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2016      	movs	r0, #22
 80015ea:	f000 ffc2 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015ee:	2016      	movs	r0, #22
 80015f0:	f000 ffdb 	bl	80025aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40006400 	.word	0x40006400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_UART_MspInit+0x84>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12b      	bne.n	8001682 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_UART_MspInit+0x88>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <HAL_UART_MspInit+0x88>)
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_UART_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <HAL_UART_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_UART_MspInit+0x88>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_UART_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001662:	230c      	movs	r3, #12
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001672:	2307      	movs	r3, #7
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <HAL_UART_MspInit+0x8c>)
 800167e:	f000 ffaf 	bl	80025e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	@ 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40004400 	.word	0x40004400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <NMI_Handler+0x4>

080016a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <MemManage_Handler+0x4>

080016b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <UsageFault_Handler+0x4>

080016c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ee:	f000 f96b 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <CAN1_TX_IRQHandler+0x10>)
 80016fe:	f000 fc2e 	bl	8001f5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001f0 	.word	0x200001f0

0800170c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <CAN1_RX0_IRQHandler+0x10>)
 8001712:	f000 fc24 	bl	8001f5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001f0 	.word	0x200001f0

08001720 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <CAN1_RX1_IRQHandler+0x10>)
 8001726:	f000 fc1a 	bl	8001f5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001f0 	.word	0x200001f0

08001734 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <CAN1_SCE_IRQHandler+0x10>)
 800173a:	f000 fc10 	bl	8001f5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001f0 	.word	0x200001f0

08001748 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800174c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001750:	f001 f90e 	bl	8002970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <_getpid>:
char **environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
 800175c:	2301      	movs	r3, #1
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8001772:	f003 fb05 	bl	8004d80 <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
    return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
    while (1) {}    /* Make sure we hang here */
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <_exit+0x12>

0800179e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00a      	b.n	80017c6 <_read+0x28>
    {
        *ptr++ = __io_getchar();
 80017b0:	f3af 8000 	nop.w
 80017b4:	4601      	mov	r1, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf0      	blt.n	80017b0 <_read+0x12>
    }

    return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_close>:

    return len;
}

int _close(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_fstat>:

int _fstat(int file, struct stat *st)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001800:	605a      	str	r2, [r3, #4]
    return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f003 fa86 	bl	8004d80 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	200002ec 	.word	0x200002ec
 80018a8:	20000440 	.word	0x20000440

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001908 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d4:	f7ff ffea 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018da:	490d      	ldr	r1, [pc, #52]	@ (8001910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f0:	4c0a      	ldr	r4, [pc, #40]	@ (800191c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f003 fa45 	bl	8004d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fc8b 	bl	800121c <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001914:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 8001918:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800191c:	20000440 	.word	0x20000440

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 fe05 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fdc6 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fe1d 	bl	80025c6 <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 fde5 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	@ (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008
 80019ec:	200002f0 	.word	0x200002f0

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	200002f0 	.word	0x200002f0

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0ed      	b.n	8001c3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fd62 	bl	8001538 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a84:	f7ff ffb4 	bl	80019f0 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a8a:	e012      	b.n	8001ab2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a8c:	f7ff ffb0 	bl	80019f0 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	d90b      	bls.n	8001ab2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0c5      	b.n	8001c3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0e5      	beq.n	8001a8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0202 	bic.w	r2, r2, #2
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad0:	f7ff ff8e 	bl	80019f0 <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ad6:	e012      	b.n	8001afe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad8:	f7ff ff8a 	bl	80019f0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b0a      	cmp	r3, #10
 8001ae4:	d90b      	bls.n	8001afe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2205      	movs	r2, #5
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e09f      	b.n	8001c3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e5      	bne.n	8001ad8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7e1b      	ldrb	r3, [r3, #24]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d108      	bne.n	8001b26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e007      	b.n	8001b36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7e5b      	ldrb	r3, [r3, #25]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d108      	bne.n	8001b50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7e9b      	ldrb	r3, [r3, #26]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d108      	bne.n	8001b7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e007      	b.n	8001b8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0220 	bic.w	r2, r2, #32
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7edb      	ldrb	r3, [r3, #27]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d108      	bne.n	8001ba4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0210 	bic.w	r2, r2, #16
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e007      	b.n	8001bb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0210 	orr.w	r2, r2, #16
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7f1b      	ldrb	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d108      	bne.n	8001bce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0208 	orr.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0208 	bic.w	r2, r2, #8
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7f5b      	ldrb	r3, [r3, #29]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0204 	orr.w	r2, r2, #4
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e007      	b.n	8001c08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0204 	bic.w	r2, r2, #4
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	ea42 0103 	orr.w	r1, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d12e      	bne.n	8001cb8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c72:	f7ff febd 	bl	80019f0 <HAL_GetTick>
 8001c76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c78:	e012      	b.n	8001ca0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c7a:	f7ff feb9 	bl	80019f0 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b0a      	cmp	r3, #10
 8001c86:	d90b      	bls.n	8001ca0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2205      	movs	r2, #5
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e012      	b.n	8001cc6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1e5      	bne.n	8001c7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e006      	b.n	8001cc6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b087      	sub	sp, #28
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_GetRxMessage+0x24>
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	f040 8103 	bne.w	8001ef8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10e      	bne.n	8001d16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0f7      	b.n	8001f06 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0e8      	b.n	8001f06 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	331b      	adds	r3, #27
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0204 	and.w	r2, r3, #4
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	331b      	adds	r3, #27
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0d5b      	lsrs	r3, r3, #21
 8001d62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	331b      	adds	r3, #27
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	4413      	add	r3, r2
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	331b      	adds	r3, #27
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0202 	and.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	331b      	adds	r3, #27
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	3304      	adds	r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2208      	movs	r2, #8
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	e00b      	b.n	8001dd2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	331b      	adds	r3, #27
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	331b      	adds	r3, #27
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	331b      	adds	r3, #27
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	3304      	adds	r3, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0a1a      	lsrs	r2, r3, #8
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0c1a      	lsrs	r2, r3, #16
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3302      	adds	r3, #2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e1a      	lsrs	r2, r3, #24
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3303      	adds	r3, #3
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0a1a      	lsrs	r2, r3, #8
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	3305      	adds	r3, #5
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0c1a      	lsrs	r2, r3, #16
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	3306      	adds	r3, #6
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0e1a      	lsrs	r2, r3, #24
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0220 	orr.w	r2, r2, #32
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0220 	orr.w	r2, r2, #32
 8001ef2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e006      	b.n	8001f06 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d002      	beq.n	8001f30 <HAL_CAN_ActivateNotification+0x1e>
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d109      	bne.n	8001f44 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6959      	ldr	r1, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e006      	b.n	8001f52 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	@ 0x28
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d07c      	beq.n	800209e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f983 	bl	80022cc <HAL_CAN_TxMailbox0CompleteCallback>
 8001fc6:	e016      	b.n	8001ff6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	e00c      	b.n	8001ff6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	e002      	b.n	8001ff6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f989 	bl	8002308 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d024      	beq.n	800204a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002008:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f963 	bl	80022e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800201a:	e016      	b.n	800204a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	e00c      	b.n	800204a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
 8002042:	e002      	b.n	800204a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f969 	bl	800231c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d024      	beq.n	800209e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800205c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f943 	bl	80022f4 <HAL_CAN_TxMailbox2CompleteCallback>
 800206e:	e016      	b.n	800209e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
 8002082:	e00c      	b.n	800209e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
 8002096:	e002      	b.n	800209e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f949 	bl	8002330 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00c      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2210      	movs	r2, #16
 80020c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2208      	movs	r2, #8
 80020dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f930 	bl	8002344 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff f86f 	bl	80011e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00c      	beq.n	8002126 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2210      	movs	r2, #16
 8002124:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2208      	movs	r2, #8
 8002140:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f912 	bl	800236c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f8f9 	bl	8002358 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2210      	movs	r2, #16
 8002180:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8fc 	bl	8002380 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f8f5 	bl	8002394 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d07b      	beq.n	80022ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d072      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002218:	2b00      	cmp	r3, #0
 800221a:	d043      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03e      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800222c:	2b60      	cmp	r3, #96	@ 0x60
 800222e:	d02b      	beq.n	8002288 <HAL_CAN_IRQHandler+0x32a>
 8002230:	2b60      	cmp	r3, #96	@ 0x60
 8002232:	d82e      	bhi.n	8002292 <HAL_CAN_IRQHandler+0x334>
 8002234:	2b50      	cmp	r3, #80	@ 0x50
 8002236:	d022      	beq.n	800227e <HAL_CAN_IRQHandler+0x320>
 8002238:	2b50      	cmp	r3, #80	@ 0x50
 800223a:	d82a      	bhi.n	8002292 <HAL_CAN_IRQHandler+0x334>
 800223c:	2b40      	cmp	r3, #64	@ 0x40
 800223e:	d019      	beq.n	8002274 <HAL_CAN_IRQHandler+0x316>
 8002240:	2b40      	cmp	r3, #64	@ 0x40
 8002242:	d826      	bhi.n	8002292 <HAL_CAN_IRQHandler+0x334>
 8002244:	2b30      	cmp	r3, #48	@ 0x30
 8002246:	d010      	beq.n	800226a <HAL_CAN_IRQHandler+0x30c>
 8002248:	2b30      	cmp	r3, #48	@ 0x30
 800224a:	d822      	bhi.n	8002292 <HAL_CAN_IRQHandler+0x334>
 800224c:	2b10      	cmp	r3, #16
 800224e:	d002      	beq.n	8002256 <HAL_CAN_IRQHandler+0x2f8>
 8002250:	2b20      	cmp	r3, #32
 8002252:	d005      	beq.n	8002260 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002254:	e01d      	b.n	8002292 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800225e:	e019      	b.n	8002294 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002268:	e014      	b.n	8002294 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	f043 0320 	orr.w	r3, r3, #32
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002272:	e00f      	b.n	8002294 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800227c:	e00a      	b.n	8002294 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002286:	e005      	b.n	8002294 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002290:	e000      	b.n	8002294 <HAL_CAN_IRQHandler+0x336>
            break;
 8002292:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2204      	movs	r2, #4
 80022aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f872 	bl	80023a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <__NVIC_SetPriorityGrouping>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4907      	ldr	r1, [pc, #28]	@ (8002458 <__NVIC_EnableIRQ+0x38>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e100 	.word	0xe000e100

0800245c <__NVIC_SetPriority>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff29 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff3e 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff31 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa2 	bl	8002518 <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e165      	b.n	80028c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8154 	bne.w	80028c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80ae 	beq.w	80028c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b5d      	ldr	r3, [pc, #372]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a5c      	ldr	r2, [pc, #368]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b5a      	ldr	r3, [pc, #360]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a58      	ldr	r2, [pc, #352]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4f      	ldr	r2, [pc, #316]	@ (80028e8 <HAL_GPIO_Init+0x308>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x21a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4e      	ldr	r2, [pc, #312]	@ (80028ec <HAL_GPIO_Init+0x30c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x216>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4d      	ldr	r2, [pc, #308]	@ (80028f0 <HAL_GPIO_Init+0x310>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x212>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4c      	ldr	r2, [pc, #304]	@ (80028f4 <HAL_GPIO_Init+0x314>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x20e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4b      	ldr	r2, [pc, #300]	@ (80028f8 <HAL_GPIO_Init+0x318>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x20a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4a      	ldr	r2, [pc, #296]	@ (80028fc <HAL_GPIO_Init+0x31c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x206>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a49      	ldr	r2, [pc, #292]	@ (8002900 <HAL_GPIO_Init+0x320>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x202>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b3a      	ldr	r3, [pc, #232]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a26      	ldr	r2, [pc, #152]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_GPIO_Init+0x324>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae96 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	@ 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800294c:	887a      	ldrh	r2, [r7, #2]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	041a      	lsls	r2, r3, #16
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	43d9      	mvns	r1, r3
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	400b      	ands	r3, r1
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	619a      	str	r2, [r3, #24]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f806 	bl	80029a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40013c00 	.word	0x40013c00

080029a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0cc      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b68      	ldr	r3, [pc, #416]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d90c      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b65      	ldr	r3, [pc, #404]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4934      	ldr	r1, [pc, #208]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe ffa2 	bl	80019f0 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe ff9e 	bl	80019f0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d20c      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f855 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff02 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	0800851c 	.word	0x0800851c
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000000 	.word	0x20000000

08002b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba0:	f7ff fff0 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	@ (8002bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	0800852c 	.word	0x0800852c

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc8:	f7ff ffdc 	bl	8002b84 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0b5b      	lsrs	r3, r3, #13
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	0800852c 	.word	0x0800852c

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b0ae      	sub	sp, #184	@ 0xb8
 8002bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c12:	4bcb      	ldr	r3, [pc, #812]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	f200 8206 	bhi.w	800302c <HAL_RCC_GetSysClockFreq+0x440>
 8002c20:	a201      	add	r2, pc, #4	@ (adr r2, 8002c28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c5d 	.word	0x08002c5d
 8002c2c:	0800302d 	.word	0x0800302d
 8002c30:	0800302d 	.word	0x0800302d
 8002c34:	0800302d 	.word	0x0800302d
 8002c38:	08002c65 	.word	0x08002c65
 8002c3c:	0800302d 	.word	0x0800302d
 8002c40:	0800302d 	.word	0x0800302d
 8002c44:	0800302d 	.word	0x0800302d
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	0800302d 	.word	0x0800302d
 8002c50:	0800302d 	.word	0x0800302d
 8002c54:	0800302d 	.word	0x0800302d
 8002c58:	08002e5d 	.word	0x08002e5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4bb9      	ldr	r3, [pc, #740]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c62:	e1e7      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4bb8      	ldr	r3, [pc, #736]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c6a:	e1e3      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4bb4      	ldr	r3, [pc, #720]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c78:	4bb1      	ldr	r3, [pc, #708]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d071      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c84:	4bae      	ldr	r3, [pc, #696]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c90:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ca6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	f04f 0000 	mov.w	r0, #0
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	0159      	lsls	r1, r3, #5
 8002cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cbc:	0150      	lsls	r0, r2, #5
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	1a51      	subs	r1, r2, r1
 8002cc6:	6439      	str	r1, [r7, #64]	@ 0x40
 8002cc8:	4629      	mov	r1, r5
 8002cca:	eb63 0301 	sbc.w	r3, r3, r1
 8002cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002cdc:	4649      	mov	r1, r9
 8002cde:	018b      	lsls	r3, r1, #6
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce6:	4641      	mov	r1, r8
 8002ce8:	018a      	lsls	r2, r1, #6
 8002cea:	4641      	mov	r1, r8
 8002cec:	1a51      	subs	r1, r2, r1
 8002cee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d04:	4649      	mov	r1, r9
 8002d06:	00cb      	lsls	r3, r1, #3
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0e:	4641      	mov	r1, r8
 8002d10:	00ca      	lsls	r2, r1, #3
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	4622      	mov	r2, r4
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d1e:	462b      	mov	r3, r5
 8002d20:	460a      	mov	r2, r1
 8002d22:	eb42 0303 	adc.w	r3, r2, r3
 8002d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d34:	4629      	mov	r1, r5
 8002d36:	024b      	lsls	r3, r1, #9
 8002d38:	4621      	mov	r1, r4
 8002d3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d3e:	4621      	mov	r1, r4
 8002d40:	024a      	lsls	r2, r1, #9
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d54:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d58:	f7fd ffb6 	bl	8000cc8 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4613      	mov	r3, r2
 8002d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d66:	e067      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d68:	4b75      	ldr	r3, [pc, #468]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d82:	2300      	movs	r3, #0
 8002d84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f04f 0000 	mov.w	r0, #0
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	0159      	lsls	r1, r3, #5
 8002d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9c:	0150      	lsls	r0, r2, #5
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4621      	mov	r1, r4
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	018a      	lsls	r2, r1, #6
 8002dca:	4641      	mov	r1, r8
 8002dcc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002de2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dea:	4692      	mov	sl, r2
 8002dec:	469b      	mov	fp, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	eb1a 0303 	adds.w	r3, sl, r3
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	462b      	mov	r3, r5
 8002df8:	eb4b 0303 	adc.w	r3, fp, r3
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	028b      	lsls	r3, r1, #10
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e14:	4621      	mov	r1, r4
 8002e16:	028a      	lsls	r2, r1, #10
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e20:	2200      	movs	r2, #0
 8002e22:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e24:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e2a:	f7fd ff4d 	bl	8000cc8 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4613      	mov	r3, r2
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e38:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002e4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e5a:	e0eb      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e5c:	4b38      	ldr	r3, [pc, #224]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e68:	4b35      	ldr	r3, [pc, #212]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d06b      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e74:	4b32      	ldr	r3, [pc, #200]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e86:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e88:	2300      	movs	r3, #0
 8002e8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e90:	4622      	mov	r2, r4
 8002e92:	462b      	mov	r3, r5
 8002e94:	f04f 0000 	mov.w	r0, #0
 8002e98:	f04f 0100 	mov.w	r1, #0
 8002e9c:	0159      	lsls	r1, r3, #5
 8002e9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea2:	0150      	lsls	r0, r2, #5
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	1a51      	subs	r1, r2, r1
 8002eac:	61b9      	str	r1, [r7, #24]
 8002eae:	4629      	mov	r1, r5
 8002eb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	018b      	lsls	r3, r1, #6
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ecc:	4651      	mov	r1, sl
 8002ece:	018a      	lsls	r2, r1, #6
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	eb63 0901 	sbc.w	r9, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef0:	4690      	mov	r8, r2
 8002ef2:	4699      	mov	r9, r3
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	eb18 0303 	adds.w	r3, r8, r3
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	462b      	mov	r3, r5
 8002efe:	eb49 0303 	adc.w	r3, r9, r3
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f10:	4629      	mov	r1, r5
 8002f12:	024b      	lsls	r3, r1, #9
 8002f14:	4621      	mov	r1, r4
 8002f16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	024a      	lsls	r2, r1, #9
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f26:	2200      	movs	r2, #0
 8002f28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f2a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f30:	f7fd feca 	bl	8000cc8 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f3e:	e065      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x420>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	2200      	movs	r2, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	4611      	mov	r1, r2
 8002f58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f5e:	2300      	movs	r3, #0
 8002f60:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f66:	4642      	mov	r2, r8
 8002f68:	464b      	mov	r3, r9
 8002f6a:	f04f 0000 	mov.w	r0, #0
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f78:	0150      	lsls	r0, r2, #5
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4641      	mov	r1, r8
 8002f80:	1a51      	subs	r1, r2, r1
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	4649      	mov	r1, r9
 8002f86:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f98:	4659      	mov	r1, fp
 8002f9a:	018b      	lsls	r3, r1, #6
 8002f9c:	4651      	mov	r1, sl
 8002f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa2:	4651      	mov	r1, sl
 8002fa4:	018a      	lsls	r2, r1, #6
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	1a54      	subs	r4, r2, r1
 8002faa:	4659      	mov	r1, fp
 8002fac:	eb63 0501 	sbc.w	r5, r3, r1
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	00eb      	lsls	r3, r5, #3
 8002fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fbe:	00e2      	lsls	r2, r4, #3
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	18e3      	adds	r3, r4, r3
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	464b      	mov	r3, r9
 8002fcc:	eb45 0303 	adc.w	r3, r5, r3
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	028b      	lsls	r3, r1, #10
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe8:	4621      	mov	r1, r4
 8002fea:	028a      	lsls	r2, r1, #10
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ff8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ffa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ffe:	f7fd fe63 	bl	8000cc8 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4613      	mov	r3, r2
 8003008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800300c:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x458>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0f1b      	lsrs	r3, r3, #28
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800301a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800301e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800302a:	e003      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x45c>)
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003032:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003038:	4618      	mov	r0, r3
 800303a:	37b8      	adds	r7, #184	@ 0xb8
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e28d      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8083 	beq.w	8003172 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800306c:	4b94      	ldr	r3, [pc, #592]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b04      	cmp	r3, #4
 8003076:	d019      	beq.n	80030ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003078:	4b91      	ldr	r3, [pc, #580]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003080:	2b08      	cmp	r3, #8
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003084:	4b8e      	ldr	r3, [pc, #568]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b8b      	ldr	r3, [pc, #556]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b88      	ldr	r3, [pc, #544]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b84      	ldr	r3, [pc, #528]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x124>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e25a      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x90>
 80030ce:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7b      	ldr	r2, [pc, #492]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xcc>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0xb4>
 80030e6:	4b76      	ldr	r3, [pc, #472]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a75      	ldr	r2, [pc, #468]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b73      	ldr	r3, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a72      	ldr	r2, [pc, #456]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xcc>
 8003100:	4b6f      	ldr	r3, [pc, #444]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6e      	ldr	r2, [pc, #440]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b6c      	ldr	r3, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6b      	ldr	r2, [pc, #428]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fc66 	bl	80019f0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fc62 	bl	80019f0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e21f      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b61      	ldr	r3, [pc, #388]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xdc>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe fc52 	bl	80019f0 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fc4e 	bl	80019f0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e20b      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b57      	ldr	r3, [pc, #348]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x104>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d06f      	beq.n	800325e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800317e:	4b50      	ldr	r3, [pc, #320]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800318a:	4b4d      	ldr	r3, [pc, #308]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003192:	2b08      	cmp	r3, #8
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003196:	4b4a      	ldr	r3, [pc, #296]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b44      	ldr	r3, [pc, #272]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x186>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1d3      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4937      	ldr	r1, [pc, #220]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e03a      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCC_OscConfig+0x278>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe fbfb 	bl	80019f0 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe fbf7 	bl	80019f0 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e1b4      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	4b2b      	ldr	r3, [pc, #172]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b28      	ldr	r3, [pc, #160]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4925      	ldr	r1, [pc, #148]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_RCC_OscConfig+0x278>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fbda 	bl	80019f0 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fbd6 	bl	80019f0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e193      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d036      	beq.n	80032d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b15      	ldr	r3, [pc, #84]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fbba 	bl	80019f0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe fbb6 	bl	80019f0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e173      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x234>
 800329e:	e01b      	b.n	80032d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fe fba3 	bl	80019f0 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ac:	e00e      	b.n	80032cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ae:	f7fe fb9f 	bl	80019f0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d907      	bls.n	80032cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e15c      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
 80032c0:	40023800 	.word	0x40023800
 80032c4:	42470000 	.word	0x42470000
 80032c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	4b8a      	ldr	r3, [pc, #552]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80032ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ea      	bne.n	80032ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8097 	beq.w	8003414 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b83      	ldr	r3, [pc, #524]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a7e      	ldr	r2, [pc, #504]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b7c      	ldr	r3, [pc, #496]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b79      	ldr	r3, [pc, #484]	@ (80034fc <HAL_RCC_OscConfig+0x4b0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b76      	ldr	r3, [pc, #472]	@ (80034fc <HAL_RCC_OscConfig+0x4b0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	@ (80034fc <HAL_RCC_OscConfig+0x4b0>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fe fb5f 	bl	80019f0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe fb5b 	bl	80019f0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e118      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <HAL_RCC_OscConfig+0x4b0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x31e>
 800335c:	4b66      	ldr	r3, [pc, #408]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a65      	ldr	r2, [pc, #404]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	e01c      	b.n	80033a4 <HAL_RCC_OscConfig+0x358>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x340>
 8003372:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	4a60      	ldr	r2, [pc, #384]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6713      	str	r3, [r2, #112]	@ 0x70
 800337e:	4b5e      	ldr	r3, [pc, #376]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	4a5d      	ldr	r2, [pc, #372]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	@ 0x70
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0x358>
 800338c:	4b5a      	ldr	r3, [pc, #360]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003390:	4a59      	ldr	r2, [pc, #356]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	@ 0x70
 8003398:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	4a56      	ldr	r2, [pc, #344]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800339e:	f023 0304 	bic.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe fb20 	bl	80019f0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fe fb1c 	bl	80019f0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0d7      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	4b4b      	ldr	r3, [pc, #300]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ee      	beq.n	80033b4 <HAL_RCC_OscConfig+0x368>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe fb0a 	bl	80019f0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe fb06 	bl	80019f0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0c1      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	4b40      	ldr	r3, [pc, #256]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ee      	bne.n	80033e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4a3a      	ldr	r2, [pc, #232]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80ad 	beq.w	8003578 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800341e:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d060      	beq.n	80034ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d145      	bne.n	80034be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b33      	ldr	r3, [pc, #204]	@ (8003500 <HAL_RCC_OscConfig+0x4b4>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fada 	bl	80019f0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fad6 	bl	80019f0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e093      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b29      	ldr	r3, [pc, #164]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	071b      	lsls	r3, r3, #28
 800348a:	491b      	ldr	r1, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_RCC_OscConfig+0x4b4>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe faab 	bl	80019f0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe faa7 	bl	80019f0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e064      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x452>
 80034bc:	e05c      	b.n	8003578 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <HAL_RCC_OscConfig+0x4b4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fa94 	bl	80019f0 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fa90 	bl	80019f0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e04d      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x480>
 80034ea:	e045      	b.n	8003578 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e040      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003504:	4b1f      	ldr	r3, [pc, #124]	@ (8003584 <HAL_RCC_OscConfig+0x538>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d030      	beq.n	8003574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d129      	bne.n	8003574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d122      	bne.n	8003574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800353a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d119      	bne.n	8003574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d10f      	bne.n	8003574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e042      	b.n	8003620 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe f82a 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f973 	bl	80038b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	d175      	bne.n	8003734 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_UART_Transmit+0x2c>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e06e      	b.n	8003736 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2221      	movs	r2, #33	@ 0x21
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003666:	f7fe f9c3 	bl	80019f0 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	88fa      	ldrh	r2, [r7, #6]
 8003676:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003680:	d108      	bne.n	8003694 <HAL_UART_Transmit+0x6c>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d104      	bne.n	8003694 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e003      	b.n	800369c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800369c:	e02e      	b.n	80036fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2180      	movs	r1, #128	@ 0x80
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f848 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e03a      	b.n	8003736 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3302      	adds	r3, #2
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	e007      	b.n	80036ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3301      	adds	r3, #1
 80036ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1cb      	bne.n	800369e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2200      	movs	r2, #0
 800370e:	2140      	movs	r1, #64	@ 0x40
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f814 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	e03b      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d037      	beq.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe f94a 	bl	80019f0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <UART_WaitOnFlagUntilTimeout+0x30>
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e03a      	b.n	80037e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d023      	beq.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b80      	cmp	r3, #128	@ 0x80
 8003784:	d020      	beq.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d01d      	beq.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b08      	cmp	r3, #8
 8003798:	d116      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f81d 	bl	80037f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2208      	movs	r2, #8
 80037ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e00f      	b.n	80037e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4013      	ands	r3, r2
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d0b4      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b095      	sub	sp, #84	@ 0x54
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003818:	643a      	str	r2, [r7, #64]	@ 0x40
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800381e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3314      	adds	r3, #20
 8003832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	61fb      	str	r3, [r7, #28]
   return(result);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3314      	adds	r3, #20
 800384a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800384c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	2b01      	cmp	r3, #1
 8003866:	d119      	bne.n	800389c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	60bb      	str	r3, [r7, #8]
   return(result);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f023 0310 	bic.w	r3, r3, #16
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003888:	61ba      	str	r2, [r7, #24]
 800388a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6979      	ldr	r1, [r7, #20]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	613b      	str	r3, [r7, #16]
   return(result);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038aa:	bf00      	nop
 80038ac:	3754      	adds	r7, #84	@ 0x54
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b0c0      	sub	sp, #256	@ 0x100
 80038be:	af00      	add	r7, sp, #0
 80038c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	68d9      	ldr	r1, [r3, #12]
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	ea40 0301 	orr.w	r3, r0, r1
 80038e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003910:	f021 010c 	bic.w	r1, r1, #12
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800391e:	430b      	orrs	r3, r1
 8003920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003932:	6999      	ldr	r1, [r3, #24]
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	ea40 0301 	orr.w	r3, r0, r1
 800393e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b8f      	ldr	r3, [pc, #572]	@ (8003b84 <UART_SetConfig+0x2cc>)
 8003948:	429a      	cmp	r2, r3
 800394a:	d005      	beq.n	8003958 <UART_SetConfig+0xa0>
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b8d      	ldr	r3, [pc, #564]	@ (8003b88 <UART_SetConfig+0x2d0>)
 8003954:	429a      	cmp	r2, r3
 8003956:	d104      	bne.n	8003962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7ff f934 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 800395c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003960:	e003      	b.n	800396a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003962:	f7ff f91b 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8003966:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003974:	f040 810c 	bne.w	8003b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800397c:	2200      	movs	r2, #0
 800397e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003982:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800398a:	4622      	mov	r2, r4
 800398c:	462b      	mov	r3, r5
 800398e:	1891      	adds	r1, r2, r2
 8003990:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003992:	415b      	adcs	r3, r3
 8003994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800399a:	4621      	mov	r1, r4
 800399c:	eb12 0801 	adds.w	r8, r2, r1
 80039a0:	4629      	mov	r1, r5
 80039a2:	eb43 0901 	adc.w	r9, r3, r1
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ba:	4690      	mov	r8, r2
 80039bc:	4699      	mov	r9, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	eb18 0303 	adds.w	r3, r8, r3
 80039c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039c8:	462b      	mov	r3, r5
 80039ca:	eb49 0303 	adc.w	r3, r9, r3
 80039ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039e6:	460b      	mov	r3, r1
 80039e8:	18db      	adds	r3, r3, r3
 80039ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ec:	4613      	mov	r3, r2
 80039ee:	eb42 0303 	adc.w	r3, r2, r3
 80039f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039fc:	f7fd f964 	bl	8000cc8 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <UART_SetConfig+0x2d4>)
 8003a06:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	011c      	lsls	r4, r3, #4
 8003a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	1891      	adds	r1, r2, r2
 8003a26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a28:	415b      	adcs	r3, r3
 8003a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a30:	4641      	mov	r1, r8
 8003a32:	eb12 0a01 	adds.w	sl, r2, r1
 8003a36:	4649      	mov	r1, r9
 8003a38:	eb43 0b01 	adc.w	fp, r3, r1
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a50:	4692      	mov	sl, r2
 8003a52:	469b      	mov	fp, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	eb1a 0303 	adds.w	r3, sl, r3
 8003a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	eb4b 0303 	adc.w	r3, fp, r3
 8003a64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	18db      	adds	r3, r3, r3
 8003a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a82:	4613      	mov	r3, r2
 8003a84:	eb42 0303 	adc.w	r3, r2, r3
 8003a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a92:	f7fd f919 	bl	8000cc8 <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <UART_SetConfig+0x2d4>)
 8003a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2264      	movs	r2, #100	@ 0x64
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	1acb      	subs	r3, r1, r3
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <UART_SetConfig+0x2d4>)
 8003ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ac0:	441c      	add	r4, r3
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003acc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003adc:	415b      	adcs	r3, r3
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	1851      	adds	r1, r2, r1
 8003ae8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003aea:	4649      	mov	r1, r9
 8003aec:	414b      	adcs	r3, r1
 8003aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003afc:	4659      	mov	r1, fp
 8003afe:	00cb      	lsls	r3, r1, #3
 8003b00:	4651      	mov	r1, sl
 8003b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b06:	4651      	mov	r1, sl
 8003b08:	00ca      	lsls	r2, r1, #3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4642      	mov	r2, r8
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b18:	464b      	mov	r3, r9
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b38:	460b      	mov	r3, r1
 8003b3a:	18db      	adds	r3, r3, r3
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3e:	4613      	mov	r3, r2
 8003b40:	eb42 0303 	adc.w	r3, r2, r3
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b4e:	f7fd f8bb 	bl	8000cc8 <__aeabi_uldivmod>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <UART_SetConfig+0x2d4>)
 8003b58:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	2164      	movs	r1, #100	@ 0x64
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	3332      	adds	r3, #50	@ 0x32
 8003b6a:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <UART_SetConfig+0x2d4>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	f003 0207 	and.w	r2, r3, #7
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4422      	add	r2, r4
 8003b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b80:	e106      	b.n	8003d90 <UART_SetConfig+0x4d8>
 8003b82:	bf00      	nop
 8003b84:	40011000 	.word	0x40011000
 8003b88:	40011400 	.word	0x40011400
 8003b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	1891      	adds	r1, r2, r2
 8003ba8:	6239      	str	r1, [r7, #32]
 8003baa:	415b      	adcs	r3, r3
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	1854      	adds	r4, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0501 	adc.w	r5, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	00eb      	lsls	r3, r5, #3
 8003bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bca:	00e2      	lsls	r2, r4, #3
 8003bcc:	4614      	mov	r4, r2
 8003bce:	461d      	mov	r5, r3
 8003bd0:	4643      	mov	r3, r8
 8003bd2:	18e3      	adds	r3, r4, r3
 8003bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bd8:	464b      	mov	r3, r9
 8003bda:	eb45 0303 	adc.w	r3, r5, r3
 8003bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bfe:	4629      	mov	r1, r5
 8003c00:	008b      	lsls	r3, r1, #2
 8003c02:	4621      	mov	r1, r4
 8003c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c08:	4621      	mov	r1, r4
 8003c0a:	008a      	lsls	r2, r1, #2
 8003c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c10:	f7fd f85a 	bl	8000cc8 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4b60      	ldr	r3, [pc, #384]	@ (8003d9c <UART_SetConfig+0x4e4>)
 8003c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	011c      	lsls	r4, r3, #4
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c34:	4642      	mov	r2, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	61b9      	str	r1, [r7, #24]
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c44:	4641      	mov	r1, r8
 8003c46:	1851      	adds	r1, r2, r1
 8003c48:	6139      	str	r1, [r7, #16]
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	414b      	adcs	r3, r1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	00cb      	lsls	r3, r1, #3
 8003c60:	4651      	mov	r1, sl
 8003c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c66:	4651      	mov	r1, sl
 8003c68:	00ca      	lsls	r2, r1, #3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4642      	mov	r2, r8
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c78:	464b      	mov	r3, r9
 8003c7a:	460a      	mov	r2, r1
 8003c7c:	eb42 0303 	adc.w	r3, r2, r3
 8003c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	008b      	lsls	r3, r1, #2
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	008a      	lsls	r2, r1, #2
 8003caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cae:	f7fd f80b 	bl	8000cc8 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4b38      	ldr	r3, [pc, #224]	@ (8003d9c <UART_SetConfig+0x4e4>)
 8003cba:	fba3 2301 	umull	r2, r3, r3, r1
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2264      	movs	r2, #100	@ 0x64
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	1acb      	subs	r3, r1, r3
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	3332      	adds	r3, #50	@ 0x32
 8003ccc:	4a33      	ldr	r2, [pc, #204]	@ (8003d9c <UART_SetConfig+0x4e4>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cd8:	441c      	add	r4, r3
 8003cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cde:	2200      	movs	r2, #0
 8003ce0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ce2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ce4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	1851      	adds	r1, r2, r1
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	4649      	mov	r1, r9
 8003d00:	414b      	adcs	r3, r1
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d10:	4659      	mov	r1, fp
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	00ca      	lsls	r2, r1, #3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	4642      	mov	r2, r8
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	eb42 0303 	adc.w	r3, r2, r3
 8003d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	008b      	lsls	r3, r1, #2
 8003d50:	4641      	mov	r1, r8
 8003d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d56:	4641      	mov	r1, r8
 8003d58:	008a      	lsls	r2, r1, #2
 8003d5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d5e:	f7fc ffb3 	bl	8000cc8 <__aeabi_uldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <UART_SetConfig+0x4e4>)
 8003d68:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	2164      	movs	r1, #100	@ 0x64
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	3332      	adds	r3, #50	@ 0x32
 8003d7a:	4a08      	ldr	r2, [pc, #32]	@ (8003d9c <UART_SetConfig+0x4e4>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4422      	add	r2, r4
 8003d8e:	609a      	str	r2, [r3, #8]
}
 8003d90:	bf00      	nop
 8003d92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d96:	46bd      	mov	sp, r7
 8003d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9c:	51eb851f 	.word	0x51eb851f

08003da0 <__cvt>:
 8003da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	ec57 6b10 	vmov	r6, r7, d0
 8003da8:	2f00      	cmp	r7, #0
 8003daa:	460c      	mov	r4, r1
 8003dac:	4619      	mov	r1, r3
 8003dae:	463b      	mov	r3, r7
 8003db0:	bfbb      	ittet	lt
 8003db2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003db6:	461f      	movlt	r7, r3
 8003db8:	2300      	movge	r3, #0
 8003dba:	232d      	movlt	r3, #45	@ 0x2d
 8003dbc:	700b      	strb	r3, [r1, #0]
 8003dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003dc4:	4691      	mov	r9, r2
 8003dc6:	f023 0820 	bic.w	r8, r3, #32
 8003dca:	bfbc      	itt	lt
 8003dcc:	4632      	movlt	r2, r6
 8003dce:	4616      	movlt	r6, r2
 8003dd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dd4:	d005      	beq.n	8003de2 <__cvt+0x42>
 8003dd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003dda:	d100      	bne.n	8003dde <__cvt+0x3e>
 8003ddc:	3401      	adds	r4, #1
 8003dde:	2102      	movs	r1, #2
 8003de0:	e000      	b.n	8003de4 <__cvt+0x44>
 8003de2:	2103      	movs	r1, #3
 8003de4:	ab03      	add	r3, sp, #12
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	ab02      	add	r3, sp, #8
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	ec47 6b10 	vmov	d0, r6, r7
 8003df0:	4653      	mov	r3, sl
 8003df2:	4622      	mov	r2, r4
 8003df4:	f001 f880 	bl	8004ef8 <_dtoa_r>
 8003df8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	d119      	bne.n	8003e34 <__cvt+0x94>
 8003e00:	f019 0f01 	tst.w	r9, #1
 8003e04:	d00e      	beq.n	8003e24 <__cvt+0x84>
 8003e06:	eb00 0904 	add.w	r9, r0, r4
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4630      	mov	r0, r6
 8003e10:	4639      	mov	r1, r7
 8003e12:	f7fc fe79 	bl	8000b08 <__aeabi_dcmpeq>
 8003e16:	b108      	cbz	r0, 8003e1c <__cvt+0x7c>
 8003e18:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e1c:	2230      	movs	r2, #48	@ 0x30
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	454b      	cmp	r3, r9
 8003e22:	d31e      	bcc.n	8003e62 <__cvt+0xc2>
 8003e24:	9b03      	ldr	r3, [sp, #12]
 8003e26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e28:	1b5b      	subs	r3, r3, r5
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	b004      	add	sp, #16
 8003e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e38:	eb00 0904 	add.w	r9, r0, r4
 8003e3c:	d1e5      	bne.n	8003e0a <__cvt+0x6a>
 8003e3e:	7803      	ldrb	r3, [r0, #0]
 8003e40:	2b30      	cmp	r3, #48	@ 0x30
 8003e42:	d10a      	bne.n	8003e5a <__cvt+0xba>
 8003e44:	2200      	movs	r2, #0
 8003e46:	2300      	movs	r3, #0
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	f7fc fe5c 	bl	8000b08 <__aeabi_dcmpeq>
 8003e50:	b918      	cbnz	r0, 8003e5a <__cvt+0xba>
 8003e52:	f1c4 0401 	rsb	r4, r4, #1
 8003e56:	f8ca 4000 	str.w	r4, [sl]
 8003e5a:	f8da 3000 	ldr.w	r3, [sl]
 8003e5e:	4499      	add	r9, r3
 8003e60:	e7d3      	b.n	8003e0a <__cvt+0x6a>
 8003e62:	1c59      	adds	r1, r3, #1
 8003e64:	9103      	str	r1, [sp, #12]
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e7d9      	b.n	8003e1e <__cvt+0x7e>

08003e6a <__exponent>:
 8003e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	bfba      	itte	lt
 8003e70:	4249      	neglt	r1, r1
 8003e72:	232d      	movlt	r3, #45	@ 0x2d
 8003e74:	232b      	movge	r3, #43	@ 0x2b
 8003e76:	2909      	cmp	r1, #9
 8003e78:	7002      	strb	r2, [r0, #0]
 8003e7a:	7043      	strb	r3, [r0, #1]
 8003e7c:	dd29      	ble.n	8003ed2 <__exponent+0x68>
 8003e7e:	f10d 0307 	add.w	r3, sp, #7
 8003e82:	461d      	mov	r5, r3
 8003e84:	270a      	movs	r7, #10
 8003e86:	461a      	mov	r2, r3
 8003e88:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e8c:	fb07 1416 	mls	r4, r7, r6, r1
 8003e90:	3430      	adds	r4, #48	@ 0x30
 8003e92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e96:	460c      	mov	r4, r1
 8003e98:	2c63      	cmp	r4, #99	@ 0x63
 8003e9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	dcf1      	bgt.n	8003e86 <__exponent+0x1c>
 8003ea2:	3130      	adds	r1, #48	@ 0x30
 8003ea4:	1e94      	subs	r4, r2, #2
 8003ea6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003eaa:	1c41      	adds	r1, r0, #1
 8003eac:	4623      	mov	r3, r4
 8003eae:	42ab      	cmp	r3, r5
 8003eb0:	d30a      	bcc.n	8003ec8 <__exponent+0x5e>
 8003eb2:	f10d 0309 	add.w	r3, sp, #9
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	42ac      	cmp	r4, r5
 8003eba:	bf88      	it	hi
 8003ebc:	2300      	movhi	r3, #0
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	4403      	add	r3, r0
 8003ec2:	1a18      	subs	r0, r3, r0
 8003ec4:	b003      	add	sp, #12
 8003ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ecc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ed0:	e7ed      	b.n	8003eae <__exponent+0x44>
 8003ed2:	2330      	movs	r3, #48	@ 0x30
 8003ed4:	3130      	adds	r1, #48	@ 0x30
 8003ed6:	7083      	strb	r3, [r0, #2]
 8003ed8:	70c1      	strb	r1, [r0, #3]
 8003eda:	1d03      	adds	r3, r0, #4
 8003edc:	e7f1      	b.n	8003ec2 <__exponent+0x58>
	...

08003ee0 <_printf_float>:
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	b08d      	sub	sp, #52	@ 0x34
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003eec:	4616      	mov	r6, r2
 8003eee:	461f      	mov	r7, r3
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	f000 fefb 	bl	8004cec <_localeconv_r>
 8003ef6:	6803      	ldr	r3, [r0, #0]
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc f9d8 	bl	80002b0 <strlen>
 8003f00:	2300      	movs	r3, #0
 8003f02:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f04:	f8d8 3000 	ldr.w	r3, [r8]
 8003f08:	9005      	str	r0, [sp, #20]
 8003f0a:	3307      	adds	r3, #7
 8003f0c:	f023 0307 	bic.w	r3, r3, #7
 8003f10:	f103 0208 	add.w	r2, r3, #8
 8003f14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f18:	f8d4 b000 	ldr.w	fp, [r4]
 8003f1c:	f8c8 2000 	str.w	r2, [r8]
 8003f20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f28:	9307      	str	r3, [sp, #28]
 8003f2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f36:	4b9c      	ldr	r3, [pc, #624]	@ (80041a8 <_printf_float+0x2c8>)
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	f7fc fe16 	bl	8000b6c <__aeabi_dcmpun>
 8003f40:	bb70      	cbnz	r0, 8003fa0 <_printf_float+0xc0>
 8003f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f46:	4b98      	ldr	r3, [pc, #608]	@ (80041a8 <_printf_float+0x2c8>)
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	f7fc fdf0 	bl	8000b30 <__aeabi_dcmple>
 8003f50:	bb30      	cbnz	r0, 8003fa0 <_printf_float+0xc0>
 8003f52:	2200      	movs	r2, #0
 8003f54:	2300      	movs	r3, #0
 8003f56:	4640      	mov	r0, r8
 8003f58:	4649      	mov	r1, r9
 8003f5a:	f7fc fddf 	bl	8000b1c <__aeabi_dcmplt>
 8003f5e:	b110      	cbz	r0, 8003f66 <_printf_float+0x86>
 8003f60:	232d      	movs	r3, #45	@ 0x2d
 8003f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f66:	4a91      	ldr	r2, [pc, #580]	@ (80041ac <_printf_float+0x2cc>)
 8003f68:	4b91      	ldr	r3, [pc, #580]	@ (80041b0 <_printf_float+0x2d0>)
 8003f6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f6e:	bf8c      	ite	hi
 8003f70:	4690      	movhi	r8, r2
 8003f72:	4698      	movls	r8, r3
 8003f74:	2303      	movs	r3, #3
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	f02b 0304 	bic.w	r3, fp, #4
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	f04f 0900 	mov.w	r9, #0
 8003f82:	9700      	str	r7, [sp, #0]
 8003f84:	4633      	mov	r3, r6
 8003f86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 f9d2 	bl	8004334 <_printf_common>
 8003f90:	3001      	adds	r0, #1
 8003f92:	f040 808d 	bne.w	80040b0 <_printf_float+0x1d0>
 8003f96:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9a:	b00d      	add	sp, #52	@ 0x34
 8003f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	f7fc fde0 	bl	8000b6c <__aeabi_dcmpun>
 8003fac:	b140      	cbz	r0, 8003fc0 <_printf_float+0xe0>
 8003fae:	464b      	mov	r3, r9
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bfbc      	itt	lt
 8003fb4:	232d      	movlt	r3, #45	@ 0x2d
 8003fb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <_printf_float+0x2d4>)
 8003fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80041b8 <_printf_float+0x2d8>)
 8003fbe:	e7d4      	b.n	8003f6a <_printf_float+0x8a>
 8003fc0:	6863      	ldr	r3, [r4, #4]
 8003fc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003fc6:	9206      	str	r2, [sp, #24]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	d13b      	bne.n	8004044 <_printf_float+0x164>
 8003fcc:	2306      	movs	r3, #6
 8003fce:	6063      	str	r3, [r4, #4]
 8003fd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	6022      	str	r2, [r4, #0]
 8003fd8:	9303      	str	r3, [sp, #12]
 8003fda:	ab0a      	add	r3, sp, #40	@ 0x28
 8003fdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003fe0:	ab09      	add	r3, sp, #36	@ 0x24
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	6861      	ldr	r1, [r4, #4]
 8003fe6:	ec49 8b10 	vmov	d0, r8, r9
 8003fea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7ff fed6 	bl	8003da0 <__cvt>
 8003ff4:	9b06      	ldr	r3, [sp, #24]
 8003ff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003ff8:	2b47      	cmp	r3, #71	@ 0x47
 8003ffa:	4680      	mov	r8, r0
 8003ffc:	d129      	bne.n	8004052 <_printf_float+0x172>
 8003ffe:	1cc8      	adds	r0, r1, #3
 8004000:	db02      	blt.n	8004008 <_printf_float+0x128>
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	4299      	cmp	r1, r3
 8004006:	dd41      	ble.n	800408c <_printf_float+0x1ac>
 8004008:	f1aa 0a02 	sub.w	sl, sl, #2
 800400c:	fa5f fa8a 	uxtb.w	sl, sl
 8004010:	3901      	subs	r1, #1
 8004012:	4652      	mov	r2, sl
 8004014:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004018:	9109      	str	r1, [sp, #36]	@ 0x24
 800401a:	f7ff ff26 	bl	8003e6a <__exponent>
 800401e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004020:	1813      	adds	r3, r2, r0
 8004022:	2a01      	cmp	r2, #1
 8004024:	4681      	mov	r9, r0
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	dc02      	bgt.n	8004030 <_printf_float+0x150>
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	07d2      	lsls	r2, r2, #31
 800402e:	d501      	bpl.n	8004034 <_printf_float+0x154>
 8004030:	3301      	adds	r3, #1
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0a2      	beq.n	8003f82 <_printf_float+0xa2>
 800403c:	232d      	movs	r3, #45	@ 0x2d
 800403e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004042:	e79e      	b.n	8003f82 <_printf_float+0xa2>
 8004044:	9a06      	ldr	r2, [sp, #24]
 8004046:	2a47      	cmp	r2, #71	@ 0x47
 8004048:	d1c2      	bne.n	8003fd0 <_printf_float+0xf0>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1c0      	bne.n	8003fd0 <_printf_float+0xf0>
 800404e:	2301      	movs	r3, #1
 8004050:	e7bd      	b.n	8003fce <_printf_float+0xee>
 8004052:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004056:	d9db      	bls.n	8004010 <_printf_float+0x130>
 8004058:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800405c:	d118      	bne.n	8004090 <_printf_float+0x1b0>
 800405e:	2900      	cmp	r1, #0
 8004060:	6863      	ldr	r3, [r4, #4]
 8004062:	dd0b      	ble.n	800407c <_printf_float+0x19c>
 8004064:	6121      	str	r1, [r4, #16]
 8004066:	b913      	cbnz	r3, 800406e <_printf_float+0x18e>
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	07d0      	lsls	r0, r2, #31
 800406c:	d502      	bpl.n	8004074 <_printf_float+0x194>
 800406e:	3301      	adds	r3, #1
 8004070:	440b      	add	r3, r1
 8004072:	6123      	str	r3, [r4, #16]
 8004074:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004076:	f04f 0900 	mov.w	r9, #0
 800407a:	e7db      	b.n	8004034 <_printf_float+0x154>
 800407c:	b913      	cbnz	r3, 8004084 <_printf_float+0x1a4>
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	07d2      	lsls	r2, r2, #31
 8004082:	d501      	bpl.n	8004088 <_printf_float+0x1a8>
 8004084:	3302      	adds	r3, #2
 8004086:	e7f4      	b.n	8004072 <_printf_float+0x192>
 8004088:	2301      	movs	r3, #1
 800408a:	e7f2      	b.n	8004072 <_printf_float+0x192>
 800408c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004092:	4299      	cmp	r1, r3
 8004094:	db05      	blt.n	80040a2 <_printf_float+0x1c2>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	6121      	str	r1, [r4, #16]
 800409a:	07d8      	lsls	r0, r3, #31
 800409c:	d5ea      	bpl.n	8004074 <_printf_float+0x194>
 800409e:	1c4b      	adds	r3, r1, #1
 80040a0:	e7e7      	b.n	8004072 <_printf_float+0x192>
 80040a2:	2900      	cmp	r1, #0
 80040a4:	bfd4      	ite	le
 80040a6:	f1c1 0202 	rsble	r2, r1, #2
 80040aa:	2201      	movgt	r2, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	e7e0      	b.n	8004072 <_printf_float+0x192>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	055a      	lsls	r2, r3, #21
 80040b4:	d407      	bmi.n	80040c6 <_printf_float+0x1e6>
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	4642      	mov	r2, r8
 80040ba:	4631      	mov	r1, r6
 80040bc:	4628      	mov	r0, r5
 80040be:	47b8      	blx	r7
 80040c0:	3001      	adds	r0, #1
 80040c2:	d12b      	bne.n	800411c <_printf_float+0x23c>
 80040c4:	e767      	b.n	8003f96 <_printf_float+0xb6>
 80040c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040ca:	f240 80dd 	bls.w	8004288 <_printf_float+0x3a8>
 80040ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040d2:	2200      	movs	r2, #0
 80040d4:	2300      	movs	r3, #0
 80040d6:	f7fc fd17 	bl	8000b08 <__aeabi_dcmpeq>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d033      	beq.n	8004146 <_printf_float+0x266>
 80040de:	4a37      	ldr	r2, [pc, #220]	@ (80041bc <_printf_float+0x2dc>)
 80040e0:	2301      	movs	r3, #1
 80040e2:	4631      	mov	r1, r6
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b8      	blx	r7
 80040e8:	3001      	adds	r0, #1
 80040ea:	f43f af54 	beq.w	8003f96 <_printf_float+0xb6>
 80040ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80040f2:	4543      	cmp	r3, r8
 80040f4:	db02      	blt.n	80040fc <_printf_float+0x21c>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	07d8      	lsls	r0, r3, #31
 80040fa:	d50f      	bpl.n	800411c <_printf_float+0x23c>
 80040fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004100:	4631      	mov	r1, r6
 8004102:	4628      	mov	r0, r5
 8004104:	47b8      	blx	r7
 8004106:	3001      	adds	r0, #1
 8004108:	f43f af45 	beq.w	8003f96 <_printf_float+0xb6>
 800410c:	f04f 0900 	mov.w	r9, #0
 8004110:	f108 38ff 	add.w	r8, r8, #4294967295
 8004114:	f104 0a1a 	add.w	sl, r4, #26
 8004118:	45c8      	cmp	r8, r9
 800411a:	dc09      	bgt.n	8004130 <_printf_float+0x250>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	079b      	lsls	r3, r3, #30
 8004120:	f100 8103 	bmi.w	800432a <_printf_float+0x44a>
 8004124:	68e0      	ldr	r0, [r4, #12]
 8004126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004128:	4298      	cmp	r0, r3
 800412a:	bfb8      	it	lt
 800412c:	4618      	movlt	r0, r3
 800412e:	e734      	b.n	8003f9a <_printf_float+0xba>
 8004130:	2301      	movs	r3, #1
 8004132:	4652      	mov	r2, sl
 8004134:	4631      	mov	r1, r6
 8004136:	4628      	mov	r0, r5
 8004138:	47b8      	blx	r7
 800413a:	3001      	adds	r0, #1
 800413c:	f43f af2b 	beq.w	8003f96 <_printf_float+0xb6>
 8004140:	f109 0901 	add.w	r9, r9, #1
 8004144:	e7e8      	b.n	8004118 <_printf_float+0x238>
 8004146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	dc39      	bgt.n	80041c0 <_printf_float+0x2e0>
 800414c:	4a1b      	ldr	r2, [pc, #108]	@ (80041bc <_printf_float+0x2dc>)
 800414e:	2301      	movs	r3, #1
 8004150:	4631      	mov	r1, r6
 8004152:	4628      	mov	r0, r5
 8004154:	47b8      	blx	r7
 8004156:	3001      	adds	r0, #1
 8004158:	f43f af1d 	beq.w	8003f96 <_printf_float+0xb6>
 800415c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004160:	ea59 0303 	orrs.w	r3, r9, r3
 8004164:	d102      	bne.n	800416c <_printf_float+0x28c>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	07d9      	lsls	r1, r3, #31
 800416a:	d5d7      	bpl.n	800411c <_printf_float+0x23c>
 800416c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004170:	4631      	mov	r1, r6
 8004172:	4628      	mov	r0, r5
 8004174:	47b8      	blx	r7
 8004176:	3001      	adds	r0, #1
 8004178:	f43f af0d 	beq.w	8003f96 <_printf_float+0xb6>
 800417c:	f04f 0a00 	mov.w	sl, #0
 8004180:	f104 0b1a 	add.w	fp, r4, #26
 8004184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004186:	425b      	negs	r3, r3
 8004188:	4553      	cmp	r3, sl
 800418a:	dc01      	bgt.n	8004190 <_printf_float+0x2b0>
 800418c:	464b      	mov	r3, r9
 800418e:	e793      	b.n	80040b8 <_printf_float+0x1d8>
 8004190:	2301      	movs	r3, #1
 8004192:	465a      	mov	r2, fp
 8004194:	4631      	mov	r1, r6
 8004196:	4628      	mov	r0, r5
 8004198:	47b8      	blx	r7
 800419a:	3001      	adds	r0, #1
 800419c:	f43f aefb 	beq.w	8003f96 <_printf_float+0xb6>
 80041a0:	f10a 0a01 	add.w	sl, sl, #1
 80041a4:	e7ee      	b.n	8004184 <_printf_float+0x2a4>
 80041a6:	bf00      	nop
 80041a8:	7fefffff 	.word	0x7fefffff
 80041ac:	08008538 	.word	0x08008538
 80041b0:	08008534 	.word	0x08008534
 80041b4:	08008540 	.word	0x08008540
 80041b8:	0800853c 	.word	0x0800853c
 80041bc:	08008544 	.word	0x08008544
 80041c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041c6:	4553      	cmp	r3, sl
 80041c8:	bfa8      	it	ge
 80041ca:	4653      	movge	r3, sl
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	4699      	mov	r9, r3
 80041d0:	dc36      	bgt.n	8004240 <_printf_float+0x360>
 80041d2:	f04f 0b00 	mov.w	fp, #0
 80041d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041da:	f104 021a 	add.w	r2, r4, #26
 80041de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041e0:	9306      	str	r3, [sp, #24]
 80041e2:	eba3 0309 	sub.w	r3, r3, r9
 80041e6:	455b      	cmp	r3, fp
 80041e8:	dc31      	bgt.n	800424e <_printf_float+0x36e>
 80041ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ec:	459a      	cmp	sl, r3
 80041ee:	dc3a      	bgt.n	8004266 <_printf_float+0x386>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	07da      	lsls	r2, r3, #31
 80041f4:	d437      	bmi.n	8004266 <_printf_float+0x386>
 80041f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041f8:	ebaa 0903 	sub.w	r9, sl, r3
 80041fc:	9b06      	ldr	r3, [sp, #24]
 80041fe:	ebaa 0303 	sub.w	r3, sl, r3
 8004202:	4599      	cmp	r9, r3
 8004204:	bfa8      	it	ge
 8004206:	4699      	movge	r9, r3
 8004208:	f1b9 0f00 	cmp.w	r9, #0
 800420c:	dc33      	bgt.n	8004276 <_printf_float+0x396>
 800420e:	f04f 0800 	mov.w	r8, #0
 8004212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004216:	f104 0b1a 	add.w	fp, r4, #26
 800421a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800421c:	ebaa 0303 	sub.w	r3, sl, r3
 8004220:	eba3 0309 	sub.w	r3, r3, r9
 8004224:	4543      	cmp	r3, r8
 8004226:	f77f af79 	ble.w	800411c <_printf_float+0x23c>
 800422a:	2301      	movs	r3, #1
 800422c:	465a      	mov	r2, fp
 800422e:	4631      	mov	r1, r6
 8004230:	4628      	mov	r0, r5
 8004232:	47b8      	blx	r7
 8004234:	3001      	adds	r0, #1
 8004236:	f43f aeae 	beq.w	8003f96 <_printf_float+0xb6>
 800423a:	f108 0801 	add.w	r8, r8, #1
 800423e:	e7ec      	b.n	800421a <_printf_float+0x33a>
 8004240:	4642      	mov	r2, r8
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
 8004246:	47b8      	blx	r7
 8004248:	3001      	adds	r0, #1
 800424a:	d1c2      	bne.n	80041d2 <_printf_float+0x2f2>
 800424c:	e6a3      	b.n	8003f96 <_printf_float+0xb6>
 800424e:	2301      	movs	r3, #1
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	9206      	str	r2, [sp, #24]
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	f43f ae9c 	beq.w	8003f96 <_printf_float+0xb6>
 800425e:	9a06      	ldr	r2, [sp, #24]
 8004260:	f10b 0b01 	add.w	fp, fp, #1
 8004264:	e7bb      	b.n	80041de <_printf_float+0x2fe>
 8004266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d1c0      	bne.n	80041f6 <_printf_float+0x316>
 8004274:	e68f      	b.n	8003f96 <_printf_float+0xb6>
 8004276:	9a06      	ldr	r2, [sp, #24]
 8004278:	464b      	mov	r3, r9
 800427a:	4442      	add	r2, r8
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	d1c3      	bne.n	800420e <_printf_float+0x32e>
 8004286:	e686      	b.n	8003f96 <_printf_float+0xb6>
 8004288:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800428c:	f1ba 0f01 	cmp.w	sl, #1
 8004290:	dc01      	bgt.n	8004296 <_printf_float+0x3b6>
 8004292:	07db      	lsls	r3, r3, #31
 8004294:	d536      	bpl.n	8004304 <_printf_float+0x424>
 8004296:	2301      	movs	r3, #1
 8004298:	4642      	mov	r2, r8
 800429a:	4631      	mov	r1, r6
 800429c:	4628      	mov	r0, r5
 800429e:	47b8      	blx	r7
 80042a0:	3001      	adds	r0, #1
 80042a2:	f43f ae78 	beq.w	8003f96 <_printf_float+0xb6>
 80042a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae70 	beq.w	8003f96 <_printf_float+0xb6>
 80042b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042c2:	f7fc fc21 	bl	8000b08 <__aeabi_dcmpeq>
 80042c6:	b9c0      	cbnz	r0, 80042fa <_printf_float+0x41a>
 80042c8:	4653      	mov	r3, sl
 80042ca:	f108 0201 	add.w	r2, r8, #1
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	d10c      	bne.n	80042f2 <_printf_float+0x412>
 80042d8:	e65d      	b.n	8003f96 <_printf_float+0xb6>
 80042da:	2301      	movs	r3, #1
 80042dc:	465a      	mov	r2, fp
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	f43f ae56 	beq.w	8003f96 <_printf_float+0xb6>
 80042ea:	f108 0801 	add.w	r8, r8, #1
 80042ee:	45d0      	cmp	r8, sl
 80042f0:	dbf3      	blt.n	80042da <_printf_float+0x3fa>
 80042f2:	464b      	mov	r3, r9
 80042f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80042f8:	e6df      	b.n	80040ba <_printf_float+0x1da>
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	f104 0b1a 	add.w	fp, r4, #26
 8004302:	e7f4      	b.n	80042ee <_printf_float+0x40e>
 8004304:	2301      	movs	r3, #1
 8004306:	4642      	mov	r2, r8
 8004308:	e7e1      	b.n	80042ce <_printf_float+0x3ee>
 800430a:	2301      	movs	r3, #1
 800430c:	464a      	mov	r2, r9
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f ae3e 	beq.w	8003f96 <_printf_float+0xb6>
 800431a:	f108 0801 	add.w	r8, r8, #1
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004322:	1a5b      	subs	r3, r3, r1
 8004324:	4543      	cmp	r3, r8
 8004326:	dcf0      	bgt.n	800430a <_printf_float+0x42a>
 8004328:	e6fc      	b.n	8004124 <_printf_float+0x244>
 800432a:	f04f 0800 	mov.w	r8, #0
 800432e:	f104 0919 	add.w	r9, r4, #25
 8004332:	e7f4      	b.n	800431e <_printf_float+0x43e>

08004334 <_printf_common>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	4616      	mov	r6, r2
 800433a:	4698      	mov	r8, r3
 800433c:	688a      	ldr	r2, [r1, #8]
 800433e:	690b      	ldr	r3, [r1, #16]
 8004340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004344:	4293      	cmp	r3, r2
 8004346:	bfb8      	it	lt
 8004348:	4613      	movlt	r3, r2
 800434a:	6033      	str	r3, [r6, #0]
 800434c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004350:	4607      	mov	r7, r0
 8004352:	460c      	mov	r4, r1
 8004354:	b10a      	cbz	r2, 800435a <_printf_common+0x26>
 8004356:	3301      	adds	r3, #1
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	0699      	lsls	r1, r3, #26
 800435e:	bf42      	ittt	mi
 8004360:	6833      	ldrmi	r3, [r6, #0]
 8004362:	3302      	addmi	r3, #2
 8004364:	6033      	strmi	r3, [r6, #0]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	f015 0506 	ands.w	r5, r5, #6
 800436c:	d106      	bne.n	800437c <_printf_common+0x48>
 800436e:	f104 0a19 	add.w	sl, r4, #25
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	6832      	ldr	r2, [r6, #0]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	42ab      	cmp	r3, r5
 800437a:	dc26      	bgt.n	80043ca <_printf_common+0x96>
 800437c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	3b00      	subs	r3, #0
 8004384:	bf18      	it	ne
 8004386:	2301      	movne	r3, #1
 8004388:	0692      	lsls	r2, r2, #26
 800438a:	d42b      	bmi.n	80043e4 <_printf_common+0xb0>
 800438c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004390:	4641      	mov	r1, r8
 8004392:	4638      	mov	r0, r7
 8004394:	47c8      	blx	r9
 8004396:	3001      	adds	r0, #1
 8004398:	d01e      	beq.n	80043d8 <_printf_common+0xa4>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	bf02      	ittt	eq
 80043a6:	68e5      	ldreq	r5, [r4, #12]
 80043a8:	6833      	ldreq	r3, [r6, #0]
 80043aa:	1aed      	subeq	r5, r5, r3
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	bf0c      	ite	eq
 80043b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b4:	2500      	movne	r5, #0
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bfc4      	itt	gt
 80043ba:	1a9b      	subgt	r3, r3, r2
 80043bc:	18ed      	addgt	r5, r5, r3
 80043be:	2600      	movs	r6, #0
 80043c0:	341a      	adds	r4, #26
 80043c2:	42b5      	cmp	r5, r6
 80043c4:	d11a      	bne.n	80043fc <_printf_common+0xc8>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e008      	b.n	80043dc <_printf_common+0xa8>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4652      	mov	r2, sl
 80043ce:	4641      	mov	r1, r8
 80043d0:	4638      	mov	r0, r7
 80043d2:	47c8      	blx	r9
 80043d4:	3001      	adds	r0, #1
 80043d6:	d103      	bne.n	80043e0 <_printf_common+0xac>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7c6      	b.n	8004372 <_printf_common+0x3e>
 80043e4:	18e1      	adds	r1, r4, r3
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	2030      	movs	r0, #48	@ 0x30
 80043ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043ee:	4422      	add	r2, r4
 80043f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043f8:	3302      	adds	r3, #2
 80043fa:	e7c7      	b.n	800438c <_printf_common+0x58>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4622      	mov	r2, r4
 8004400:	4641      	mov	r1, r8
 8004402:	4638      	mov	r0, r7
 8004404:	47c8      	blx	r9
 8004406:	3001      	adds	r0, #1
 8004408:	d0e6      	beq.n	80043d8 <_printf_common+0xa4>
 800440a:	3601      	adds	r6, #1
 800440c:	e7d9      	b.n	80043c2 <_printf_common+0x8e>
	...

08004410 <_printf_i>:
 8004410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	7e0f      	ldrb	r7, [r1, #24]
 8004416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004418:	2f78      	cmp	r7, #120	@ 0x78
 800441a:	4691      	mov	r9, r2
 800441c:	4680      	mov	r8, r0
 800441e:	460c      	mov	r4, r1
 8004420:	469a      	mov	sl, r3
 8004422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004426:	d807      	bhi.n	8004438 <_printf_i+0x28>
 8004428:	2f62      	cmp	r7, #98	@ 0x62
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x32>
 800442c:	2f00      	cmp	r7, #0
 800442e:	f000 80d1 	beq.w	80045d4 <_printf_i+0x1c4>
 8004432:	2f58      	cmp	r7, #88	@ 0x58
 8004434:	f000 80b8 	beq.w	80045a8 <_printf_i+0x198>
 8004438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800443c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004440:	e03a      	b.n	80044b8 <_printf_i+0xa8>
 8004442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004446:	2b15      	cmp	r3, #21
 8004448:	d8f6      	bhi.n	8004438 <_printf_i+0x28>
 800444a:	a101      	add	r1, pc, #4	@ (adr r1, 8004450 <_printf_i+0x40>)
 800444c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044bd 	.word	0x080044bd
 8004458:	08004439 	.word	0x08004439
 800445c:	08004439 	.word	0x08004439
 8004460:	08004439 	.word	0x08004439
 8004464:	08004439 	.word	0x08004439
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004439 	.word	0x08004439
 8004470:	08004439 	.word	0x08004439
 8004474:	08004439 	.word	0x08004439
 8004478:	08004439 	.word	0x08004439
 800447c:	080045bb 	.word	0x080045bb
 8004480:	080044e7 	.word	0x080044e7
 8004484:	08004575 	.word	0x08004575
 8004488:	08004439 	.word	0x08004439
 800448c:	08004439 	.word	0x08004439
 8004490:	080045dd 	.word	0x080045dd
 8004494:	08004439 	.word	0x08004439
 8004498:	080044e7 	.word	0x080044e7
 800449c:	08004439 	.word	0x08004439
 80044a0:	08004439 	.word	0x08004439
 80044a4:	0800457d 	.word	0x0800457d
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6032      	str	r2, [r6, #0]
 80044b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044b8:	2301      	movs	r3, #1
 80044ba:	e09c      	b.n	80045f6 <_printf_i+0x1e6>
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	1d19      	adds	r1, r3, #4
 80044c2:	6031      	str	r1, [r6, #0]
 80044c4:	0606      	lsls	r6, r0, #24
 80044c6:	d501      	bpl.n	80044cc <_printf_i+0xbc>
 80044c8:	681d      	ldr	r5, [r3, #0]
 80044ca:	e003      	b.n	80044d4 <_printf_i+0xc4>
 80044cc:	0645      	lsls	r5, r0, #25
 80044ce:	d5fb      	bpl.n	80044c8 <_printf_i+0xb8>
 80044d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	da03      	bge.n	80044e0 <_printf_i+0xd0>
 80044d8:	232d      	movs	r3, #45	@ 0x2d
 80044da:	426d      	negs	r5, r5
 80044dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e0:	4858      	ldr	r0, [pc, #352]	@ (8004644 <_printf_i+0x234>)
 80044e2:	230a      	movs	r3, #10
 80044e4:	e011      	b.n	800450a <_printf_i+0xfa>
 80044e6:	6821      	ldr	r1, [r4, #0]
 80044e8:	6833      	ldr	r3, [r6, #0]
 80044ea:	0608      	lsls	r0, r1, #24
 80044ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80044f0:	d402      	bmi.n	80044f8 <_printf_i+0xe8>
 80044f2:	0649      	lsls	r1, r1, #25
 80044f4:	bf48      	it	mi
 80044f6:	b2ad      	uxthmi	r5, r5
 80044f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044fa:	4852      	ldr	r0, [pc, #328]	@ (8004644 <_printf_i+0x234>)
 80044fc:	6033      	str	r3, [r6, #0]
 80044fe:	bf14      	ite	ne
 8004500:	230a      	movne	r3, #10
 8004502:	2308      	moveq	r3, #8
 8004504:	2100      	movs	r1, #0
 8004506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800450a:	6866      	ldr	r6, [r4, #4]
 800450c:	60a6      	str	r6, [r4, #8]
 800450e:	2e00      	cmp	r6, #0
 8004510:	db05      	blt.n	800451e <_printf_i+0x10e>
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	432e      	orrs	r6, r5
 8004516:	f021 0104 	bic.w	r1, r1, #4
 800451a:	6021      	str	r1, [r4, #0]
 800451c:	d04b      	beq.n	80045b6 <_printf_i+0x1a6>
 800451e:	4616      	mov	r6, r2
 8004520:	fbb5 f1f3 	udiv	r1, r5, r3
 8004524:	fb03 5711 	mls	r7, r3, r1, r5
 8004528:	5dc7      	ldrb	r7, [r0, r7]
 800452a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800452e:	462f      	mov	r7, r5
 8004530:	42bb      	cmp	r3, r7
 8004532:	460d      	mov	r5, r1
 8004534:	d9f4      	bls.n	8004520 <_printf_i+0x110>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d10b      	bne.n	8004552 <_printf_i+0x142>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	07df      	lsls	r7, r3, #31
 800453e:	d508      	bpl.n	8004552 <_printf_i+0x142>
 8004540:	6923      	ldr	r3, [r4, #16]
 8004542:	6861      	ldr	r1, [r4, #4]
 8004544:	4299      	cmp	r1, r3
 8004546:	bfde      	ittt	le
 8004548:	2330      	movle	r3, #48	@ 0x30
 800454a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800454e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004552:	1b92      	subs	r2, r2, r6
 8004554:	6122      	str	r2, [r4, #16]
 8004556:	f8cd a000 	str.w	sl, [sp]
 800455a:	464b      	mov	r3, r9
 800455c:	aa03      	add	r2, sp, #12
 800455e:	4621      	mov	r1, r4
 8004560:	4640      	mov	r0, r8
 8004562:	f7ff fee7 	bl	8004334 <_printf_common>
 8004566:	3001      	adds	r0, #1
 8004568:	d14a      	bne.n	8004600 <_printf_i+0x1f0>
 800456a:	f04f 30ff 	mov.w	r0, #4294967295
 800456e:	b004      	add	sp, #16
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	4832      	ldr	r0, [pc, #200]	@ (8004648 <_printf_i+0x238>)
 800457e:	2778      	movs	r7, #120	@ 0x78
 8004580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	6831      	ldr	r1, [r6, #0]
 8004588:	061f      	lsls	r7, r3, #24
 800458a:	f851 5b04 	ldr.w	r5, [r1], #4
 800458e:	d402      	bmi.n	8004596 <_printf_i+0x186>
 8004590:	065f      	lsls	r7, r3, #25
 8004592:	bf48      	it	mi
 8004594:	b2ad      	uxthmi	r5, r5
 8004596:	6031      	str	r1, [r6, #0]
 8004598:	07d9      	lsls	r1, r3, #31
 800459a:	bf44      	itt	mi
 800459c:	f043 0320 	orrmi.w	r3, r3, #32
 80045a0:	6023      	strmi	r3, [r4, #0]
 80045a2:	b11d      	cbz	r5, 80045ac <_printf_i+0x19c>
 80045a4:	2310      	movs	r3, #16
 80045a6:	e7ad      	b.n	8004504 <_printf_i+0xf4>
 80045a8:	4826      	ldr	r0, [pc, #152]	@ (8004644 <_printf_i+0x234>)
 80045aa:	e7e9      	b.n	8004580 <_printf_i+0x170>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	f023 0320 	bic.w	r3, r3, #32
 80045b2:	6023      	str	r3, [r4, #0]
 80045b4:	e7f6      	b.n	80045a4 <_printf_i+0x194>
 80045b6:	4616      	mov	r6, r2
 80045b8:	e7bd      	b.n	8004536 <_printf_i+0x126>
 80045ba:	6833      	ldr	r3, [r6, #0]
 80045bc:	6825      	ldr	r5, [r4, #0]
 80045be:	6961      	ldr	r1, [r4, #20]
 80045c0:	1d18      	adds	r0, r3, #4
 80045c2:	6030      	str	r0, [r6, #0]
 80045c4:	062e      	lsls	r6, r5, #24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	d501      	bpl.n	80045ce <_printf_i+0x1be>
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <_printf_i+0x1c4>
 80045ce:	0668      	lsls	r0, r5, #25
 80045d0:	d5fb      	bpl.n	80045ca <_printf_i+0x1ba>
 80045d2:	8019      	strh	r1, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	4616      	mov	r6, r2
 80045da:	e7bc      	b.n	8004556 <_printf_i+0x146>
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	1d1a      	adds	r2, r3, #4
 80045e0:	6032      	str	r2, [r6, #0]
 80045e2:	681e      	ldr	r6, [r3, #0]
 80045e4:	6862      	ldr	r2, [r4, #4]
 80045e6:	2100      	movs	r1, #0
 80045e8:	4630      	mov	r0, r6
 80045ea:	f7fb fe11 	bl	8000210 <memchr>
 80045ee:	b108      	cbz	r0, 80045f4 <_printf_i+0x1e4>
 80045f0:	1b80      	subs	r0, r0, r6
 80045f2:	6060      	str	r0, [r4, #4]
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	6123      	str	r3, [r4, #16]
 80045f8:	2300      	movs	r3, #0
 80045fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045fe:	e7aa      	b.n	8004556 <_printf_i+0x146>
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	4632      	mov	r2, r6
 8004604:	4649      	mov	r1, r9
 8004606:	4640      	mov	r0, r8
 8004608:	47d0      	blx	sl
 800460a:	3001      	adds	r0, #1
 800460c:	d0ad      	beq.n	800456a <_printf_i+0x15a>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	079b      	lsls	r3, r3, #30
 8004612:	d413      	bmi.n	800463c <_printf_i+0x22c>
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	4298      	cmp	r0, r3
 800461a:	bfb8      	it	lt
 800461c:	4618      	movlt	r0, r3
 800461e:	e7a6      	b.n	800456e <_printf_i+0x15e>
 8004620:	2301      	movs	r3, #1
 8004622:	4632      	mov	r2, r6
 8004624:	4649      	mov	r1, r9
 8004626:	4640      	mov	r0, r8
 8004628:	47d0      	blx	sl
 800462a:	3001      	adds	r0, #1
 800462c:	d09d      	beq.n	800456a <_printf_i+0x15a>
 800462e:	3501      	adds	r5, #1
 8004630:	68e3      	ldr	r3, [r4, #12]
 8004632:	9903      	ldr	r1, [sp, #12]
 8004634:	1a5b      	subs	r3, r3, r1
 8004636:	42ab      	cmp	r3, r5
 8004638:	dcf2      	bgt.n	8004620 <_printf_i+0x210>
 800463a:	e7eb      	b.n	8004614 <_printf_i+0x204>
 800463c:	2500      	movs	r5, #0
 800463e:	f104 0619 	add.w	r6, r4, #25
 8004642:	e7f5      	b.n	8004630 <_printf_i+0x220>
 8004644:	08008546 	.word	0x08008546
 8004648:	08008557 	.word	0x08008557

0800464c <_scanf_float>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	b087      	sub	sp, #28
 8004652:	4691      	mov	r9, r2
 8004654:	9303      	str	r3, [sp, #12]
 8004656:	688b      	ldr	r3, [r1, #8]
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800465e:	bf81      	itttt	hi
 8004660:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004664:	eb03 0b05 	addhi.w	fp, r3, r5
 8004668:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800466c:	608b      	strhi	r3, [r1, #8]
 800466e:	680b      	ldr	r3, [r1, #0]
 8004670:	460a      	mov	r2, r1
 8004672:	f04f 0500 	mov.w	r5, #0
 8004676:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800467a:	f842 3b1c 	str.w	r3, [r2], #28
 800467e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004682:	4680      	mov	r8, r0
 8004684:	460c      	mov	r4, r1
 8004686:	bf98      	it	ls
 8004688:	f04f 0b00 	movls.w	fp, #0
 800468c:	9201      	str	r2, [sp, #4]
 800468e:	4616      	mov	r6, r2
 8004690:	46aa      	mov	sl, r5
 8004692:	462f      	mov	r7, r5
 8004694:	9502      	str	r5, [sp, #8]
 8004696:	68a2      	ldr	r2, [r4, #8]
 8004698:	b15a      	cbz	r2, 80046b2 <_scanf_float+0x66>
 800469a:	f8d9 3000 	ldr.w	r3, [r9]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80046a2:	d863      	bhi.n	800476c <_scanf_float+0x120>
 80046a4:	2b40      	cmp	r3, #64	@ 0x40
 80046a6:	d83b      	bhi.n	8004720 <_scanf_float+0xd4>
 80046a8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80046ac:	b2c8      	uxtb	r0, r1
 80046ae:	280e      	cmp	r0, #14
 80046b0:	d939      	bls.n	8004726 <_scanf_float+0xda>
 80046b2:	b11f      	cbz	r7, 80046bc <_scanf_float+0x70>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046c0:	f1ba 0f01 	cmp.w	sl, #1
 80046c4:	f200 8114 	bhi.w	80048f0 <_scanf_float+0x2a4>
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	429e      	cmp	r6, r3
 80046cc:	f200 8105 	bhi.w	80048da <_scanf_float+0x28e>
 80046d0:	2001      	movs	r0, #1
 80046d2:	b007      	add	sp, #28
 80046d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80046dc:	2a0d      	cmp	r2, #13
 80046de:	d8e8      	bhi.n	80046b2 <_scanf_float+0x66>
 80046e0:	a101      	add	r1, pc, #4	@ (adr r1, 80046e8 <_scanf_float+0x9c>)
 80046e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	08004831 	.word	0x08004831
 80046ec:	080046b3 	.word	0x080046b3
 80046f0:	080046b3 	.word	0x080046b3
 80046f4:	080046b3 	.word	0x080046b3
 80046f8:	0800488d 	.word	0x0800488d
 80046fc:	08004867 	.word	0x08004867
 8004700:	080046b3 	.word	0x080046b3
 8004704:	080046b3 	.word	0x080046b3
 8004708:	0800483f 	.word	0x0800483f
 800470c:	080046b3 	.word	0x080046b3
 8004710:	080046b3 	.word	0x080046b3
 8004714:	080046b3 	.word	0x080046b3
 8004718:	080046b3 	.word	0x080046b3
 800471c:	080047fb 	.word	0x080047fb
 8004720:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004724:	e7da      	b.n	80046dc <_scanf_float+0x90>
 8004726:	290e      	cmp	r1, #14
 8004728:	d8c3      	bhi.n	80046b2 <_scanf_float+0x66>
 800472a:	a001      	add	r0, pc, #4	@ (adr r0, 8004730 <_scanf_float+0xe4>)
 800472c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004730:	080047eb 	.word	0x080047eb
 8004734:	080046b3 	.word	0x080046b3
 8004738:	080047eb 	.word	0x080047eb
 800473c:	0800487b 	.word	0x0800487b
 8004740:	080046b3 	.word	0x080046b3
 8004744:	0800478d 	.word	0x0800478d
 8004748:	080047d1 	.word	0x080047d1
 800474c:	080047d1 	.word	0x080047d1
 8004750:	080047d1 	.word	0x080047d1
 8004754:	080047d1 	.word	0x080047d1
 8004758:	080047d1 	.word	0x080047d1
 800475c:	080047d1 	.word	0x080047d1
 8004760:	080047d1 	.word	0x080047d1
 8004764:	080047d1 	.word	0x080047d1
 8004768:	080047d1 	.word	0x080047d1
 800476c:	2b6e      	cmp	r3, #110	@ 0x6e
 800476e:	d809      	bhi.n	8004784 <_scanf_float+0x138>
 8004770:	2b60      	cmp	r3, #96	@ 0x60
 8004772:	d8b1      	bhi.n	80046d8 <_scanf_float+0x8c>
 8004774:	2b54      	cmp	r3, #84	@ 0x54
 8004776:	d07b      	beq.n	8004870 <_scanf_float+0x224>
 8004778:	2b59      	cmp	r3, #89	@ 0x59
 800477a:	d19a      	bne.n	80046b2 <_scanf_float+0x66>
 800477c:	2d07      	cmp	r5, #7
 800477e:	d198      	bne.n	80046b2 <_scanf_float+0x66>
 8004780:	2508      	movs	r5, #8
 8004782:	e02f      	b.n	80047e4 <_scanf_float+0x198>
 8004784:	2b74      	cmp	r3, #116	@ 0x74
 8004786:	d073      	beq.n	8004870 <_scanf_float+0x224>
 8004788:	2b79      	cmp	r3, #121	@ 0x79
 800478a:	e7f6      	b.n	800477a <_scanf_float+0x12e>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	05c8      	lsls	r0, r1, #23
 8004790:	d51e      	bpl.n	80047d0 <_scanf_float+0x184>
 8004792:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004796:	6021      	str	r1, [r4, #0]
 8004798:	3701      	adds	r7, #1
 800479a:	f1bb 0f00 	cmp.w	fp, #0
 800479e:	d003      	beq.n	80047a8 <_scanf_float+0x15c>
 80047a0:	3201      	adds	r2, #1
 80047a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047a6:	60a2      	str	r2, [r4, #8]
 80047a8:	68a3      	ldr	r3, [r4, #8]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	60a3      	str	r3, [r4, #8]
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	3301      	adds	r3, #1
 80047b2:	6123      	str	r3, [r4, #16]
 80047b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f8c9 3004 	str.w	r3, [r9, #4]
 80047c0:	f340 8082 	ble.w	80048c8 <_scanf_float+0x27c>
 80047c4:	f8d9 3000 	ldr.w	r3, [r9]
 80047c8:	3301      	adds	r3, #1
 80047ca:	f8c9 3000 	str.w	r3, [r9]
 80047ce:	e762      	b.n	8004696 <_scanf_float+0x4a>
 80047d0:	eb1a 0105 	adds.w	r1, sl, r5
 80047d4:	f47f af6d 	bne.w	80046b2 <_scanf_float+0x66>
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80047de:	6022      	str	r2, [r4, #0]
 80047e0:	460d      	mov	r5, r1
 80047e2:	468a      	mov	sl, r1
 80047e4:	f806 3b01 	strb.w	r3, [r6], #1
 80047e8:	e7de      	b.n	80047a8 <_scanf_float+0x15c>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	0610      	lsls	r0, r2, #24
 80047ee:	f57f af60 	bpl.w	80046b2 <_scanf_float+0x66>
 80047f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	e7f4      	b.n	80047e4 <_scanf_float+0x198>
 80047fa:	f1ba 0f00 	cmp.w	sl, #0
 80047fe:	d10c      	bne.n	800481a <_scanf_float+0x1ce>
 8004800:	b977      	cbnz	r7, 8004820 <_scanf_float+0x1d4>
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004808:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800480c:	d108      	bne.n	8004820 <_scanf_float+0x1d4>
 800480e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	f04f 0a01 	mov.w	sl, #1
 8004818:	e7e4      	b.n	80047e4 <_scanf_float+0x198>
 800481a:	f1ba 0f02 	cmp.w	sl, #2
 800481e:	d050      	beq.n	80048c2 <_scanf_float+0x276>
 8004820:	2d01      	cmp	r5, #1
 8004822:	d002      	beq.n	800482a <_scanf_float+0x1de>
 8004824:	2d04      	cmp	r5, #4
 8004826:	f47f af44 	bne.w	80046b2 <_scanf_float+0x66>
 800482a:	3501      	adds	r5, #1
 800482c:	b2ed      	uxtb	r5, r5
 800482e:	e7d9      	b.n	80047e4 <_scanf_float+0x198>
 8004830:	f1ba 0f01 	cmp.w	sl, #1
 8004834:	f47f af3d 	bne.w	80046b2 <_scanf_float+0x66>
 8004838:	f04f 0a02 	mov.w	sl, #2
 800483c:	e7d2      	b.n	80047e4 <_scanf_float+0x198>
 800483e:	b975      	cbnz	r5, 800485e <_scanf_float+0x212>
 8004840:	2f00      	cmp	r7, #0
 8004842:	f47f af37 	bne.w	80046b4 <_scanf_float+0x68>
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800484c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004850:	f040 8103 	bne.w	8004a5a <_scanf_float+0x40e>
 8004854:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	2501      	movs	r5, #1
 800485c:	e7c2      	b.n	80047e4 <_scanf_float+0x198>
 800485e:	2d03      	cmp	r5, #3
 8004860:	d0e3      	beq.n	800482a <_scanf_float+0x1de>
 8004862:	2d05      	cmp	r5, #5
 8004864:	e7df      	b.n	8004826 <_scanf_float+0x1da>
 8004866:	2d02      	cmp	r5, #2
 8004868:	f47f af23 	bne.w	80046b2 <_scanf_float+0x66>
 800486c:	2503      	movs	r5, #3
 800486e:	e7b9      	b.n	80047e4 <_scanf_float+0x198>
 8004870:	2d06      	cmp	r5, #6
 8004872:	f47f af1e 	bne.w	80046b2 <_scanf_float+0x66>
 8004876:	2507      	movs	r5, #7
 8004878:	e7b4      	b.n	80047e4 <_scanf_float+0x198>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	0591      	lsls	r1, r2, #22
 800487e:	f57f af18 	bpl.w	80046b2 <_scanf_float+0x66>
 8004882:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	9702      	str	r7, [sp, #8]
 800488a:	e7ab      	b.n	80047e4 <_scanf_float+0x198>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004892:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004896:	d005      	beq.n	80048a4 <_scanf_float+0x258>
 8004898:	0550      	lsls	r0, r2, #21
 800489a:	f57f af0a 	bpl.w	80046b2 <_scanf_float+0x66>
 800489e:	2f00      	cmp	r7, #0
 80048a0:	f000 80db 	beq.w	8004a5a <_scanf_float+0x40e>
 80048a4:	0591      	lsls	r1, r2, #22
 80048a6:	bf58      	it	pl
 80048a8:	9902      	ldrpl	r1, [sp, #8]
 80048aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048ae:	bf58      	it	pl
 80048b0:	1a79      	subpl	r1, r7, r1
 80048b2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80048b6:	bf58      	it	pl
 80048b8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	2700      	movs	r7, #0
 80048c0:	e790      	b.n	80047e4 <_scanf_float+0x198>
 80048c2:	f04f 0a03 	mov.w	sl, #3
 80048c6:	e78d      	b.n	80047e4 <_scanf_float+0x198>
 80048c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80048cc:	4649      	mov	r1, r9
 80048ce:	4640      	mov	r0, r8
 80048d0:	4798      	blx	r3
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f43f aedf 	beq.w	8004696 <_scanf_float+0x4a>
 80048d8:	e6eb      	b.n	80046b2 <_scanf_float+0x66>
 80048da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048e2:	464a      	mov	r2, r9
 80048e4:	4640      	mov	r0, r8
 80048e6:	4798      	blx	r3
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	e6eb      	b.n	80046c8 <_scanf_float+0x7c>
 80048f0:	1e6b      	subs	r3, r5, #1
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d824      	bhi.n	8004940 <_scanf_float+0x2f4>
 80048f6:	2d02      	cmp	r5, #2
 80048f8:	d836      	bhi.n	8004968 <_scanf_float+0x31c>
 80048fa:	9b01      	ldr	r3, [sp, #4]
 80048fc:	429e      	cmp	r6, r3
 80048fe:	f67f aee7 	bls.w	80046d0 <_scanf_float+0x84>
 8004902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800490a:	464a      	mov	r2, r9
 800490c:	4640      	mov	r0, r8
 800490e:	4798      	blx	r3
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	3b01      	subs	r3, #1
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	e7f0      	b.n	80048fa <_scanf_float+0x2ae>
 8004918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800491c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004920:	464a      	mov	r2, r9
 8004922:	4640      	mov	r0, r8
 8004924:	4798      	blx	r3
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	3b01      	subs	r3, #1
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004930:	fa5f fa8a 	uxtb.w	sl, sl
 8004934:	f1ba 0f02 	cmp.w	sl, #2
 8004938:	d1ee      	bne.n	8004918 <_scanf_float+0x2cc>
 800493a:	3d03      	subs	r5, #3
 800493c:	b2ed      	uxtb	r5, r5
 800493e:	1b76      	subs	r6, r6, r5
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	05da      	lsls	r2, r3, #23
 8004944:	d530      	bpl.n	80049a8 <_scanf_float+0x35c>
 8004946:	055b      	lsls	r3, r3, #21
 8004948:	d511      	bpl.n	800496e <_scanf_float+0x322>
 800494a:	9b01      	ldr	r3, [sp, #4]
 800494c:	429e      	cmp	r6, r3
 800494e:	f67f aebf 	bls.w	80046d0 <_scanf_float+0x84>
 8004952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800495a:	464a      	mov	r2, r9
 800495c:	4640      	mov	r0, r8
 800495e:	4798      	blx	r3
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	3b01      	subs	r3, #1
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	e7f0      	b.n	800494a <_scanf_float+0x2fe>
 8004968:	46aa      	mov	sl, r5
 800496a:	46b3      	mov	fp, r6
 800496c:	e7de      	b.n	800492c <_scanf_float+0x2e0>
 800496e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	2965      	cmp	r1, #101	@ 0x65
 8004976:	f103 33ff 	add.w	r3, r3, #4294967295
 800497a:	f106 35ff 	add.w	r5, r6, #4294967295
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	d00c      	beq.n	800499c <_scanf_float+0x350>
 8004982:	2945      	cmp	r1, #69	@ 0x45
 8004984:	d00a      	beq.n	800499c <_scanf_float+0x350>
 8004986:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800498a:	464a      	mov	r2, r9
 800498c:	4640      	mov	r0, r8
 800498e:	4798      	blx	r3
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004996:	3b01      	subs	r3, #1
 8004998:	1eb5      	subs	r5, r6, #2
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049a0:	464a      	mov	r2, r9
 80049a2:	4640      	mov	r0, r8
 80049a4:	4798      	blx	r3
 80049a6:	462e      	mov	r6, r5
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	f012 0210 	ands.w	r2, r2, #16
 80049ae:	d001      	beq.n	80049b4 <_scanf_float+0x368>
 80049b0:	2000      	movs	r0, #0
 80049b2:	e68e      	b.n	80046d2 <_scanf_float+0x86>
 80049b4:	7032      	strb	r2, [r6, #0]
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c0:	d125      	bne.n	8004a0e <_scanf_float+0x3c2>
 80049c2:	9b02      	ldr	r3, [sp, #8]
 80049c4:	429f      	cmp	r7, r3
 80049c6:	d00a      	beq.n	80049de <_scanf_float+0x392>
 80049c8:	1bda      	subs	r2, r3, r7
 80049ca:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80049ce:	429e      	cmp	r6, r3
 80049d0:	bf28      	it	cs
 80049d2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80049d6:	4922      	ldr	r1, [pc, #136]	@ (8004a60 <_scanf_float+0x414>)
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 f919 	bl	8004c10 <siprintf>
 80049de:	9901      	ldr	r1, [sp, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	4640      	mov	r0, r8
 80049e4:	f002 fc04 	bl	80071f0 <_strtod_r>
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	6821      	ldr	r1, [r4, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f011 0f02 	tst.w	r1, #2
 80049f2:	ec57 6b10 	vmov	r6, r7, d0
 80049f6:	f103 0204 	add.w	r2, r3, #4
 80049fa:	d015      	beq.n	8004a28 <_scanf_float+0x3dc>
 80049fc:	9903      	ldr	r1, [sp, #12]
 80049fe:	600a      	str	r2, [r1, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e9c3 6700 	strd	r6, r7, [r3]
 8004a06:	68e3      	ldr	r3, [r4, #12]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	60e3      	str	r3, [r4, #12]
 8004a0c:	e7d0      	b.n	80049b0 <_scanf_float+0x364>
 8004a0e:	9b04      	ldr	r3, [sp, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0e4      	beq.n	80049de <_scanf_float+0x392>
 8004a14:	9905      	ldr	r1, [sp, #20]
 8004a16:	230a      	movs	r3, #10
 8004a18:	3101      	adds	r1, #1
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f002 fc68 	bl	80072f0 <_strtol_r>
 8004a20:	9b04      	ldr	r3, [sp, #16]
 8004a22:	9e05      	ldr	r6, [sp, #20]
 8004a24:	1ac2      	subs	r2, r0, r3
 8004a26:	e7d0      	b.n	80049ca <_scanf_float+0x37e>
 8004a28:	f011 0f04 	tst.w	r1, #4
 8004a2c:	9903      	ldr	r1, [sp, #12]
 8004a2e:	600a      	str	r2, [r1, #0]
 8004a30:	d1e6      	bne.n	8004a00 <_scanf_float+0x3b4>
 8004a32:	681d      	ldr	r5, [r3, #0]
 8004a34:	4632      	mov	r2, r6
 8004a36:	463b      	mov	r3, r7
 8004a38:	4630      	mov	r0, r6
 8004a3a:	4639      	mov	r1, r7
 8004a3c:	f7fc f896 	bl	8000b6c <__aeabi_dcmpun>
 8004a40:	b128      	cbz	r0, 8004a4e <_scanf_float+0x402>
 8004a42:	4808      	ldr	r0, [pc, #32]	@ (8004a64 <_scanf_float+0x418>)
 8004a44:	f000 f9ca 	bl	8004ddc <nanf>
 8004a48:	ed85 0a00 	vstr	s0, [r5]
 8004a4c:	e7db      	b.n	8004a06 <_scanf_float+0x3ba>
 8004a4e:	4630      	mov	r0, r6
 8004a50:	4639      	mov	r1, r7
 8004a52:	f7fc f8e9 	bl	8000c28 <__aeabi_d2f>
 8004a56:	6028      	str	r0, [r5, #0]
 8004a58:	e7d5      	b.n	8004a06 <_scanf_float+0x3ba>
 8004a5a:	2700      	movs	r7, #0
 8004a5c:	e62e      	b.n	80046bc <_scanf_float+0x70>
 8004a5e:	bf00      	nop
 8004a60:	08008568 	.word	0x08008568
 8004a64:	080086a9 	.word	0x080086a9

08004a68 <std>:
 8004a68:	2300      	movs	r3, #0
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a76:	6083      	str	r3, [r0, #8]
 8004a78:	8181      	strh	r1, [r0, #12]
 8004a7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a7c:	81c2      	strh	r2, [r0, #14]
 8004a7e:	6183      	str	r3, [r0, #24]
 8004a80:	4619      	mov	r1, r3
 8004a82:	2208      	movs	r2, #8
 8004a84:	305c      	adds	r0, #92	@ 0x5c
 8004a86:	f000 f928 	bl	8004cda <memset>
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <std+0x58>)
 8004a8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <std+0x5c>)
 8004a90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <std+0x60>)
 8004a94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <std+0x64>)
 8004a98:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <std+0x68>)
 8004a9c:	6224      	str	r4, [r4, #32]
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d006      	beq.n	8004ab0 <std+0x48>
 8004aa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aa6:	4294      	cmp	r4, r2
 8004aa8:	d002      	beq.n	8004ab0 <std+0x48>
 8004aaa:	33d0      	adds	r3, #208	@ 0xd0
 8004aac:	429c      	cmp	r4, r3
 8004aae:	d105      	bne.n	8004abc <std+0x54>
 8004ab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab8:	f000 b98c 	b.w	8004dd4 <__retarget_lock_init_recursive>
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	bf00      	nop
 8004ac0:	08004c55 	.word	0x08004c55
 8004ac4:	08004c77 	.word	0x08004c77
 8004ac8:	08004caf 	.word	0x08004caf
 8004acc:	08004cd3 	.word	0x08004cd3
 8004ad0:	200002f4 	.word	0x200002f4

08004ad4 <stdio_exit_handler>:
 8004ad4:	4a02      	ldr	r2, [pc, #8]	@ (8004ae0 <stdio_exit_handler+0xc>)
 8004ad6:	4903      	ldr	r1, [pc, #12]	@ (8004ae4 <stdio_exit_handler+0x10>)
 8004ad8:	4803      	ldr	r0, [pc, #12]	@ (8004ae8 <stdio_exit_handler+0x14>)
 8004ada:	f000 b869 	b.w	8004bb0 <_fwalk_sglue>
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	08007931 	.word	0x08007931
 8004ae8:	2000001c 	.word	0x2000001c

08004aec <cleanup_stdio>:
 8004aec:	6841      	ldr	r1, [r0, #4]
 8004aee:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <cleanup_stdio+0x34>)
 8004af0:	4299      	cmp	r1, r3
 8004af2:	b510      	push	{r4, lr}
 8004af4:	4604      	mov	r4, r0
 8004af6:	d001      	beq.n	8004afc <cleanup_stdio+0x10>
 8004af8:	f002 ff1a 	bl	8007930 <_fflush_r>
 8004afc:	68a1      	ldr	r1, [r4, #8]
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <cleanup_stdio+0x38>)
 8004b00:	4299      	cmp	r1, r3
 8004b02:	d002      	beq.n	8004b0a <cleanup_stdio+0x1e>
 8004b04:	4620      	mov	r0, r4
 8004b06:	f002 ff13 	bl	8007930 <_fflush_r>
 8004b0a:	68e1      	ldr	r1, [r4, #12]
 8004b0c:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <cleanup_stdio+0x3c>)
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	d004      	beq.n	8004b1c <cleanup_stdio+0x30>
 8004b12:	4620      	mov	r0, r4
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	f002 bf0a 	b.w	8007930 <_fflush_r>
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop
 8004b20:	200002f4 	.word	0x200002f4
 8004b24:	2000035c 	.word	0x2000035c
 8004b28:	200003c4 	.word	0x200003c4

08004b2c <global_stdio_init.part.0>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <global_stdio_init.part.0+0x30>)
 8004b30:	4c0b      	ldr	r4, [pc, #44]	@ (8004b60 <global_stdio_init.part.0+0x34>)
 8004b32:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <global_stdio_init.part.0+0x38>)
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	4620      	mov	r0, r4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	f7ff ff94 	bl	8004a68 <std>
 8004b40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b44:	2201      	movs	r2, #1
 8004b46:	2109      	movs	r1, #9
 8004b48:	f7ff ff8e 	bl	8004a68 <std>
 8004b4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b50:	2202      	movs	r2, #2
 8004b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b56:	2112      	movs	r1, #18
 8004b58:	f7ff bf86 	b.w	8004a68 <std>
 8004b5c:	2000042c 	.word	0x2000042c
 8004b60:	200002f4 	.word	0x200002f4
 8004b64:	08004ad5 	.word	0x08004ad5

08004b68 <__sfp_lock_acquire>:
 8004b68:	4801      	ldr	r0, [pc, #4]	@ (8004b70 <__sfp_lock_acquire+0x8>)
 8004b6a:	f000 b934 	b.w	8004dd6 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	20000435 	.word	0x20000435

08004b74 <__sfp_lock_release>:
 8004b74:	4801      	ldr	r0, [pc, #4]	@ (8004b7c <__sfp_lock_release+0x8>)
 8004b76:	f000 b92f 	b.w	8004dd8 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	20000435 	.word	0x20000435

08004b80 <__sinit>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4604      	mov	r4, r0
 8004b84:	f7ff fff0 	bl	8004b68 <__sfp_lock_acquire>
 8004b88:	6a23      	ldr	r3, [r4, #32]
 8004b8a:	b11b      	cbz	r3, 8004b94 <__sinit+0x14>
 8004b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b90:	f7ff bff0 	b.w	8004b74 <__sfp_lock_release>
 8004b94:	4b04      	ldr	r3, [pc, #16]	@ (8004ba8 <__sinit+0x28>)
 8004b96:	6223      	str	r3, [r4, #32]
 8004b98:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <__sinit+0x2c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f5      	bne.n	8004b8c <__sinit+0xc>
 8004ba0:	f7ff ffc4 	bl	8004b2c <global_stdio_init.part.0>
 8004ba4:	e7f2      	b.n	8004b8c <__sinit+0xc>
 8004ba6:	bf00      	nop
 8004ba8:	08004aed 	.word	0x08004aed
 8004bac:	2000042c 	.word	0x2000042c

08004bb0 <_fwalk_sglue>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	2600      	movs	r6, #0
 8004bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004bc4:	d505      	bpl.n	8004bd2 <_fwalk_sglue+0x22>
 8004bc6:	6824      	ldr	r4, [r4, #0]
 8004bc8:	2c00      	cmp	r4, #0
 8004bca:	d1f7      	bne.n	8004bbc <_fwalk_sglue+0xc>
 8004bcc:	4630      	mov	r0, r6
 8004bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd2:	89ab      	ldrh	r3, [r5, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d907      	bls.n	8004be8 <_fwalk_sglue+0x38>
 8004bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	d003      	beq.n	8004be8 <_fwalk_sglue+0x38>
 8004be0:	4629      	mov	r1, r5
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	4306      	orrs	r6, r0
 8004be8:	3568      	adds	r5, #104	@ 0x68
 8004bea:	e7e9      	b.n	8004bc0 <_fwalk_sglue+0x10>

08004bec <iprintf>:
 8004bec:	b40f      	push	{r0, r1, r2, r3}
 8004bee:	b507      	push	{r0, r1, r2, lr}
 8004bf0:	4906      	ldr	r1, [pc, #24]	@ (8004c0c <iprintf+0x20>)
 8004bf2:	ab04      	add	r3, sp, #16
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bfa:	6881      	ldr	r1, [r0, #8]
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	f002 fcfb 	bl	80075f8 <_vfiprintf_r>
 8004c02:	b003      	add	sp, #12
 8004c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c08:	b004      	add	sp, #16
 8004c0a:	4770      	bx	lr
 8004c0c:	20000018 	.word	0x20000018

08004c10 <siprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	b510      	push	{r4, lr}
 8004c14:	b09d      	sub	sp, #116	@ 0x74
 8004c16:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c18:	9002      	str	r0, [sp, #8]
 8004c1a:	9006      	str	r0, [sp, #24]
 8004c1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c20:	480a      	ldr	r0, [pc, #40]	@ (8004c4c <siprintf+0x3c>)
 8004c22:	9107      	str	r1, [sp, #28]
 8004c24:	9104      	str	r1, [sp, #16]
 8004c26:	490a      	ldr	r1, [pc, #40]	@ (8004c50 <siprintf+0x40>)
 8004c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c2c:	9105      	str	r1, [sp, #20]
 8004c2e:	2400      	movs	r4, #0
 8004c30:	a902      	add	r1, sp, #8
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c38:	f002 fbb8 	bl	80073ac <_svfiprintf_r>
 8004c3c:	9b02      	ldr	r3, [sp, #8]
 8004c3e:	701c      	strb	r4, [r3, #0]
 8004c40:	b01d      	add	sp, #116	@ 0x74
 8004c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c46:	b003      	add	sp, #12
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000018 	.word	0x20000018
 8004c50:	ffff0208 	.word	0xffff0208

08004c54 <__sread>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	460c      	mov	r4, r1
 8004c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5c:	f000 f86c 	bl	8004d38 <_read_r>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	bfab      	itete	ge
 8004c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c66:	89a3      	ldrhlt	r3, [r4, #12]
 8004c68:	181b      	addge	r3, r3, r0
 8004c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c6e:	bfac      	ite	ge
 8004c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c72:	81a3      	strhlt	r3, [r4, #12]
 8004c74:	bd10      	pop	{r4, pc}

08004c76 <__swrite>:
 8004c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7a:	461f      	mov	r7, r3
 8004c7c:	898b      	ldrh	r3, [r1, #12]
 8004c7e:	05db      	lsls	r3, r3, #23
 8004c80:	4605      	mov	r5, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	4616      	mov	r6, r2
 8004c86:	d505      	bpl.n	8004c94 <__swrite+0x1e>
 8004c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f000 f840 	bl	8004d14 <_lseek_r>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	463b      	mov	r3, r7
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004caa:	f000 b857 	b.w	8004d5c <_write_r>

08004cae <__sseek>:
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb6:	f000 f82d 	bl	8004d14 <_lseek_r>
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	bf15      	itete	ne
 8004cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cca:	81a3      	strheq	r3, [r4, #12]
 8004ccc:	bf18      	it	ne
 8004cce:	81a3      	strhne	r3, [r4, #12]
 8004cd0:	bd10      	pop	{r4, pc}

08004cd2 <__sclose>:
 8004cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd6:	f000 b80d 	b.w	8004cf4 <_close_r>

08004cda <memset>:
 8004cda:	4402      	add	r2, r0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <memset+0xa>
 8004ce2:	4770      	bx	lr
 8004ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce8:	e7f9      	b.n	8004cde <memset+0x4>
	...

08004cec <_localeconv_r>:
 8004cec:	4800      	ldr	r0, [pc, #0]	@ (8004cf0 <_localeconv_r+0x4>)
 8004cee:	4770      	bx	lr
 8004cf0:	20000158 	.word	0x20000158

08004cf4 <_close_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4d06      	ldr	r5, [pc, #24]	@ (8004d10 <_close_r+0x1c>)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fc fd6a 	bl	80017d8 <_close>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_close_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_close_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000430 	.word	0x20000430

08004d14 <_lseek_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d07      	ldr	r5, [pc, #28]	@ (8004d34 <_lseek_r+0x20>)
 8004d18:	4604      	mov	r4, r0
 8004d1a:	4608      	mov	r0, r1
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	2200      	movs	r2, #0
 8004d20:	602a      	str	r2, [r5, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f7fc fd7f 	bl	8001826 <_lseek>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_lseek_r+0x1e>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_lseek_r+0x1e>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	20000430 	.word	0x20000430

08004d38 <_read_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d07      	ldr	r5, [pc, #28]	@ (8004d58 <_read_r+0x20>)
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	4608      	mov	r0, r1
 8004d40:	4611      	mov	r1, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	602a      	str	r2, [r5, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f7fc fd29 	bl	800179e <_read>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_read_r+0x1e>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_read_r+0x1e>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	20000430 	.word	0x20000430

08004d5c <_write_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d07      	ldr	r5, [pc, #28]	@ (8004d7c <_write_r+0x20>)
 8004d60:	4604      	mov	r4, r0
 8004d62:	4608      	mov	r0, r1
 8004d64:	4611      	mov	r1, r2
 8004d66:	2200      	movs	r2, #0
 8004d68:	602a      	str	r2, [r5, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f7fc f99f 	bl	80010ae <_write>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_write_r+0x1e>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_write_r+0x1e>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	20000430 	.word	0x20000430

08004d80 <__errno>:
 8004d80:	4b01      	ldr	r3, [pc, #4]	@ (8004d88 <__errno+0x8>)
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000018 	.word	0x20000018

08004d8c <__libc_init_array>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8004dc4 <__libc_init_array+0x38>)
 8004d90:	4c0d      	ldr	r4, [pc, #52]	@ (8004dc8 <__libc_init_array+0x3c>)
 8004d92:	1b64      	subs	r4, r4, r5
 8004d94:	10a4      	asrs	r4, r4, #2
 8004d96:	2600      	movs	r6, #0
 8004d98:	42a6      	cmp	r6, r4
 8004d9a:	d109      	bne.n	8004db0 <__libc_init_array+0x24>
 8004d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8004dcc <__libc_init_array+0x40>)
 8004d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8004dd0 <__libc_init_array+0x44>)
 8004da0:	f003 fb78 	bl	8008494 <_init>
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	2600      	movs	r6, #0
 8004daa:	42a6      	cmp	r6, r4
 8004dac:	d105      	bne.n	8004dba <__libc_init_array+0x2e>
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db4:	4798      	blx	r3
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7ee      	b.n	8004d98 <__libc_init_array+0xc>
 8004dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbe:	4798      	blx	r3
 8004dc0:	3601      	adds	r6, #1
 8004dc2:	e7f2      	b.n	8004daa <__libc_init_array+0x1e>
 8004dc4:	08008964 	.word	0x08008964
 8004dc8:	08008964 	.word	0x08008964
 8004dcc:	08008964 	.word	0x08008964
 8004dd0:	08008968 	.word	0x08008968

08004dd4 <__retarget_lock_init_recursive>:
 8004dd4:	4770      	bx	lr

08004dd6 <__retarget_lock_acquire_recursive>:
 8004dd6:	4770      	bx	lr

08004dd8 <__retarget_lock_release_recursive>:
 8004dd8:	4770      	bx	lr
	...

08004ddc <nanf>:
 8004ddc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004de4 <nanf+0x8>
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	7fc00000 	.word	0x7fc00000

08004de8 <quorem>:
 8004de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	6903      	ldr	r3, [r0, #16]
 8004dee:	690c      	ldr	r4, [r1, #16]
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	4607      	mov	r7, r0
 8004df4:	db7e      	blt.n	8004ef4 <quorem+0x10c>
 8004df6:	3c01      	subs	r4, #1
 8004df8:	f101 0814 	add.w	r8, r1, #20
 8004dfc:	00a3      	lsls	r3, r4, #2
 8004dfe:	f100 0514 	add.w	r5, r0, #20
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e12:	3301      	adds	r3, #1
 8004e14:	429a      	cmp	r2, r3
 8004e16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e1e:	d32e      	bcc.n	8004e7e <quorem+0x96>
 8004e20:	f04f 0a00 	mov.w	sl, #0
 8004e24:	46c4      	mov	ip, r8
 8004e26:	46ae      	mov	lr, r5
 8004e28:	46d3      	mov	fp, sl
 8004e2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	fb06 a000 	mla	r0, r6, r0, sl
 8004e34:	0c02      	lsrs	r2, r0, #16
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	fb06 2303 	mla	r3, r6, r3, r2
 8004e3c:	f8de 2000 	ldr.w	r2, [lr]
 8004e40:	b280      	uxth	r0, r0
 8004e42:	b292      	uxth	r2, r2
 8004e44:	1a12      	subs	r2, r2, r0
 8004e46:	445a      	add	r2, fp
 8004e48:	f8de 0000 	ldr.w	r0, [lr]
 8004e4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e60:	45e1      	cmp	r9, ip
 8004e62:	f84e 2b04 	str.w	r2, [lr], #4
 8004e66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e6a:	d2de      	bcs.n	8004e2a <quorem+0x42>
 8004e6c:	9b00      	ldr	r3, [sp, #0]
 8004e6e:	58eb      	ldr	r3, [r5, r3]
 8004e70:	b92b      	cbnz	r3, 8004e7e <quorem+0x96>
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	3b04      	subs	r3, #4
 8004e76:	429d      	cmp	r5, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	d32f      	bcc.n	8004edc <quorem+0xf4>
 8004e7c:	613c      	str	r4, [r7, #16]
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f001 f9c6 	bl	8006210 <__mcmp>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	db25      	blt.n	8004ed4 <quorem+0xec>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e90:	f8d1 c000 	ldr.w	ip, [r1]
 8004e94:	fa1f fe82 	uxth.w	lr, r2
 8004e98:	fa1f f38c 	uxth.w	r3, ip
 8004e9c:	eba3 030e 	sub.w	r3, r3, lr
 8004ea0:	4403      	add	r3, r0
 8004ea2:	0c12      	lsrs	r2, r2, #16
 8004ea4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ea8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eb2:	45c1      	cmp	r9, r8
 8004eb4:	f841 3b04 	str.w	r3, [r1], #4
 8004eb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ebc:	d2e6      	bcs.n	8004e8c <quorem+0xa4>
 8004ebe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ec6:	b922      	cbnz	r2, 8004ed2 <quorem+0xea>
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	d30b      	bcc.n	8004ee8 <quorem+0x100>
 8004ed0:	613c      	str	r4, [r7, #16]
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	b003      	add	sp, #12
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	3b04      	subs	r3, #4
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	d1cb      	bne.n	8004e7c <quorem+0x94>
 8004ee4:	3c01      	subs	r4, #1
 8004ee6:	e7c6      	b.n	8004e76 <quorem+0x8e>
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	3b04      	subs	r3, #4
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	d1ef      	bne.n	8004ed0 <quorem+0xe8>
 8004ef0:	3c01      	subs	r4, #1
 8004ef2:	e7ea      	b.n	8004eca <quorem+0xe2>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e7ee      	b.n	8004ed6 <quorem+0xee>

08004ef8 <_dtoa_r>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	69c7      	ldr	r7, [r0, #28]
 8004efe:	b097      	sub	sp, #92	@ 0x5c
 8004f00:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004f04:	ec55 4b10 	vmov	r4, r5, d0
 8004f08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004f0a:	9107      	str	r1, [sp, #28]
 8004f0c:	4681      	mov	r9, r0
 8004f0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004f10:	9311      	str	r3, [sp, #68]	@ 0x44
 8004f12:	b97f      	cbnz	r7, 8004f34 <_dtoa_r+0x3c>
 8004f14:	2010      	movs	r0, #16
 8004f16:	f000 fe09 	bl	8005b2c <malloc>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004f20:	b920      	cbnz	r0, 8004f2c <_dtoa_r+0x34>
 8004f22:	4ba9      	ldr	r3, [pc, #676]	@ (80051c8 <_dtoa_r+0x2d0>)
 8004f24:	21ef      	movs	r1, #239	@ 0xef
 8004f26:	48a9      	ldr	r0, [pc, #676]	@ (80051cc <_dtoa_r+0x2d4>)
 8004f28:	f002 fe12 	bl	8007b50 <__assert_func>
 8004f2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f30:	6007      	str	r7, [r0, #0]
 8004f32:	60c7      	str	r7, [r0, #12]
 8004f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	b159      	cbz	r1, 8004f54 <_dtoa_r+0x5c>
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	604a      	str	r2, [r1, #4]
 8004f40:	2301      	movs	r3, #1
 8004f42:	4093      	lsls	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
 8004f46:	4648      	mov	r0, r9
 8004f48:	f000 fee6 	bl	8005d18 <_Bfree>
 8004f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	1e2b      	subs	r3, r5, #0
 8004f56:	bfb9      	ittee	lt
 8004f58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f5c:	9305      	strlt	r3, [sp, #20]
 8004f5e:	2300      	movge	r3, #0
 8004f60:	6033      	strge	r3, [r6, #0]
 8004f62:	9f05      	ldr	r7, [sp, #20]
 8004f64:	4b9a      	ldr	r3, [pc, #616]	@ (80051d0 <_dtoa_r+0x2d8>)
 8004f66:	bfbc      	itt	lt
 8004f68:	2201      	movlt	r2, #1
 8004f6a:	6032      	strlt	r2, [r6, #0]
 8004f6c:	43bb      	bics	r3, r7
 8004f6e:	d112      	bne.n	8004f96 <_dtoa_r+0x9e>
 8004f70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004f72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f7c:	4323      	orrs	r3, r4
 8004f7e:	f000 855a 	beq.w	8005a36 <_dtoa_r+0xb3e>
 8004f82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80051e4 <_dtoa_r+0x2ec>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 855c 	beq.w	8005a46 <_dtoa_r+0xb4e>
 8004f8e:	f10a 0303 	add.w	r3, sl, #3
 8004f92:	f000 bd56 	b.w	8005a42 <_dtoa_r+0xb4a>
 8004f96:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	ec51 0b17 	vmov	r0, r1, d7
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004fa6:	f7fb fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 8004faa:	4680      	mov	r8, r0
 8004fac:	b158      	cbz	r0, 8004fc6 <_dtoa_r+0xce>
 8004fae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fb6:	b113      	cbz	r3, 8004fbe <_dtoa_r+0xc6>
 8004fb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004fba:	4b86      	ldr	r3, [pc, #536]	@ (80051d4 <_dtoa_r+0x2dc>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80051e8 <_dtoa_r+0x2f0>
 8004fc2:	f000 bd40 	b.w	8005a46 <_dtoa_r+0xb4e>
 8004fc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004fca:	aa14      	add	r2, sp, #80	@ 0x50
 8004fcc:	a915      	add	r1, sp, #84	@ 0x54
 8004fce:	4648      	mov	r0, r9
 8004fd0:	f001 fa3e 	bl	8006450 <__d2b>
 8004fd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004fd8:	9002      	str	r0, [sp, #8]
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	d078      	beq.n	80050d0 <_dtoa_r+0x1d8>
 8004fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fe0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004ff0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004ff4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4b76      	ldr	r3, [pc, #472]	@ (80051d8 <_dtoa_r+0x2e0>)
 8004ffe:	f7fb f963 	bl	80002c8 <__aeabi_dsub>
 8005002:	a36b      	add	r3, pc, #428	@ (adr r3, 80051b0 <_dtoa_r+0x2b8>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f7fb fb16 	bl	8000638 <__aeabi_dmul>
 800500c:	a36a      	add	r3, pc, #424	@ (adr r3, 80051b8 <_dtoa_r+0x2c0>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb f95b 	bl	80002cc <__adddf3>
 8005016:	4604      	mov	r4, r0
 8005018:	4630      	mov	r0, r6
 800501a:	460d      	mov	r5, r1
 800501c:	f7fb faa2 	bl	8000564 <__aeabi_i2d>
 8005020:	a367      	add	r3, pc, #412	@ (adr r3, 80051c0 <_dtoa_r+0x2c8>)
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f7fb fb07 	bl	8000638 <__aeabi_dmul>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb f94b 	bl	80002cc <__adddf3>
 8005036:	4604      	mov	r4, r0
 8005038:	460d      	mov	r5, r1
 800503a:	f7fb fdad 	bl	8000b98 <__aeabi_d2iz>
 800503e:	2200      	movs	r2, #0
 8005040:	4607      	mov	r7, r0
 8005042:	2300      	movs	r3, #0
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb fd68 	bl	8000b1c <__aeabi_dcmplt>
 800504c:	b140      	cbz	r0, 8005060 <_dtoa_r+0x168>
 800504e:	4638      	mov	r0, r7
 8005050:	f7fb fa88 	bl	8000564 <__aeabi_i2d>
 8005054:	4622      	mov	r2, r4
 8005056:	462b      	mov	r3, r5
 8005058:	f7fb fd56 	bl	8000b08 <__aeabi_dcmpeq>
 800505c:	b900      	cbnz	r0, 8005060 <_dtoa_r+0x168>
 800505e:	3f01      	subs	r7, #1
 8005060:	2f16      	cmp	r7, #22
 8005062:	d852      	bhi.n	800510a <_dtoa_r+0x212>
 8005064:	4b5d      	ldr	r3, [pc, #372]	@ (80051dc <_dtoa_r+0x2e4>)
 8005066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005072:	f7fb fd53 	bl	8000b1c <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	d049      	beq.n	800510e <_dtoa_r+0x216>
 800507a:	3f01      	subs	r7, #1
 800507c:	2300      	movs	r3, #0
 800507e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005080:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005082:	1b9b      	subs	r3, r3, r6
 8005084:	1e5a      	subs	r2, r3, #1
 8005086:	bf45      	ittet	mi
 8005088:	f1c3 0301 	rsbmi	r3, r3, #1
 800508c:	9300      	strmi	r3, [sp, #0]
 800508e:	2300      	movpl	r3, #0
 8005090:	2300      	movmi	r3, #0
 8005092:	9206      	str	r2, [sp, #24]
 8005094:	bf54      	ite	pl
 8005096:	9300      	strpl	r3, [sp, #0]
 8005098:	9306      	strmi	r3, [sp, #24]
 800509a:	2f00      	cmp	r7, #0
 800509c:	db39      	blt.n	8005112 <_dtoa_r+0x21a>
 800509e:	9b06      	ldr	r3, [sp, #24]
 80050a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80050a2:	443b      	add	r3, r7
 80050a4:	9306      	str	r3, [sp, #24]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9308      	str	r3, [sp, #32]
 80050aa:	9b07      	ldr	r3, [sp, #28]
 80050ac:	2b09      	cmp	r3, #9
 80050ae:	d863      	bhi.n	8005178 <_dtoa_r+0x280>
 80050b0:	2b05      	cmp	r3, #5
 80050b2:	bfc4      	itt	gt
 80050b4:	3b04      	subgt	r3, #4
 80050b6:	9307      	strgt	r3, [sp, #28]
 80050b8:	9b07      	ldr	r3, [sp, #28]
 80050ba:	f1a3 0302 	sub.w	r3, r3, #2
 80050be:	bfcc      	ite	gt
 80050c0:	2400      	movgt	r4, #0
 80050c2:	2401      	movle	r4, #1
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d863      	bhi.n	8005190 <_dtoa_r+0x298>
 80050c8:	e8df f003 	tbb	[pc, r3]
 80050cc:	2b375452 	.word	0x2b375452
 80050d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80050d4:	441e      	add	r6, r3
 80050d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80050da:	2b20      	cmp	r3, #32
 80050dc:	bfc1      	itttt	gt
 80050de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80050e2:	409f      	lslgt	r7, r3
 80050e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80050e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80050ec:	bfd6      	itet	le
 80050ee:	f1c3 0320 	rsble	r3, r3, #32
 80050f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80050f6:	fa04 f003 	lslle.w	r0, r4, r3
 80050fa:	f7fb fa23 	bl	8000544 <__aeabi_ui2d>
 80050fe:	2201      	movs	r2, #1
 8005100:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005104:	3e01      	subs	r6, #1
 8005106:	9212      	str	r2, [sp, #72]	@ 0x48
 8005108:	e776      	b.n	8004ff8 <_dtoa_r+0x100>
 800510a:	2301      	movs	r3, #1
 800510c:	e7b7      	b.n	800507e <_dtoa_r+0x186>
 800510e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005110:	e7b6      	b.n	8005080 <_dtoa_r+0x188>
 8005112:	9b00      	ldr	r3, [sp, #0]
 8005114:	1bdb      	subs	r3, r3, r7
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	427b      	negs	r3, r7
 800511a:	9308      	str	r3, [sp, #32]
 800511c:	2300      	movs	r3, #0
 800511e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005120:	e7c3      	b.n	80050aa <_dtoa_r+0x1b2>
 8005122:	2301      	movs	r3, #1
 8005124:	9309      	str	r3, [sp, #36]	@ 0x24
 8005126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005128:	eb07 0b03 	add.w	fp, r7, r3
 800512c:	f10b 0301 	add.w	r3, fp, #1
 8005130:	2b01      	cmp	r3, #1
 8005132:	9303      	str	r3, [sp, #12]
 8005134:	bfb8      	it	lt
 8005136:	2301      	movlt	r3, #1
 8005138:	e006      	b.n	8005148 <_dtoa_r+0x250>
 800513a:	2301      	movs	r3, #1
 800513c:	9309      	str	r3, [sp, #36]	@ 0x24
 800513e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005140:	2b00      	cmp	r3, #0
 8005142:	dd28      	ble.n	8005196 <_dtoa_r+0x29e>
 8005144:	469b      	mov	fp, r3
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800514c:	2100      	movs	r1, #0
 800514e:	2204      	movs	r2, #4
 8005150:	f102 0514 	add.w	r5, r2, #20
 8005154:	429d      	cmp	r5, r3
 8005156:	d926      	bls.n	80051a6 <_dtoa_r+0x2ae>
 8005158:	6041      	str	r1, [r0, #4]
 800515a:	4648      	mov	r0, r9
 800515c:	f000 fd9c 	bl	8005c98 <_Balloc>
 8005160:	4682      	mov	sl, r0
 8005162:	2800      	cmp	r0, #0
 8005164:	d142      	bne.n	80051ec <_dtoa_r+0x2f4>
 8005166:	4b1e      	ldr	r3, [pc, #120]	@ (80051e0 <_dtoa_r+0x2e8>)
 8005168:	4602      	mov	r2, r0
 800516a:	f240 11af 	movw	r1, #431	@ 0x1af
 800516e:	e6da      	b.n	8004f26 <_dtoa_r+0x2e>
 8005170:	2300      	movs	r3, #0
 8005172:	e7e3      	b.n	800513c <_dtoa_r+0x244>
 8005174:	2300      	movs	r3, #0
 8005176:	e7d5      	b.n	8005124 <_dtoa_r+0x22c>
 8005178:	2401      	movs	r4, #1
 800517a:	2300      	movs	r3, #0
 800517c:	9307      	str	r3, [sp, #28]
 800517e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005180:	f04f 3bff 	mov.w	fp, #4294967295
 8005184:	2200      	movs	r2, #0
 8005186:	f8cd b00c 	str.w	fp, [sp, #12]
 800518a:	2312      	movs	r3, #18
 800518c:	920c      	str	r2, [sp, #48]	@ 0x30
 800518e:	e7db      	b.n	8005148 <_dtoa_r+0x250>
 8005190:	2301      	movs	r3, #1
 8005192:	9309      	str	r3, [sp, #36]	@ 0x24
 8005194:	e7f4      	b.n	8005180 <_dtoa_r+0x288>
 8005196:	f04f 0b01 	mov.w	fp, #1
 800519a:	f8cd b00c 	str.w	fp, [sp, #12]
 800519e:	465b      	mov	r3, fp
 80051a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80051a4:	e7d0      	b.n	8005148 <_dtoa_r+0x250>
 80051a6:	3101      	adds	r1, #1
 80051a8:	0052      	lsls	r2, r2, #1
 80051aa:	e7d1      	b.n	8005150 <_dtoa_r+0x258>
 80051ac:	f3af 8000 	nop.w
 80051b0:	636f4361 	.word	0x636f4361
 80051b4:	3fd287a7 	.word	0x3fd287a7
 80051b8:	8b60c8b3 	.word	0x8b60c8b3
 80051bc:	3fc68a28 	.word	0x3fc68a28
 80051c0:	509f79fb 	.word	0x509f79fb
 80051c4:	3fd34413 	.word	0x3fd34413
 80051c8:	0800857a 	.word	0x0800857a
 80051cc:	08008591 	.word	0x08008591
 80051d0:	7ff00000 	.word	0x7ff00000
 80051d4:	08008545 	.word	0x08008545
 80051d8:	3ff80000 	.word	0x3ff80000
 80051dc:	08008740 	.word	0x08008740
 80051e0:	080085e9 	.word	0x080085e9
 80051e4:	08008576 	.word	0x08008576
 80051e8:	08008544 	.word	0x08008544
 80051ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051f0:	6018      	str	r0, [r3, #0]
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	2b0e      	cmp	r3, #14
 80051f6:	f200 80a1 	bhi.w	800533c <_dtoa_r+0x444>
 80051fa:	2c00      	cmp	r4, #0
 80051fc:	f000 809e 	beq.w	800533c <_dtoa_r+0x444>
 8005200:	2f00      	cmp	r7, #0
 8005202:	dd33      	ble.n	800526c <_dtoa_r+0x374>
 8005204:	4b9c      	ldr	r3, [pc, #624]	@ (8005478 <_dtoa_r+0x580>)
 8005206:	f007 020f 	and.w	r2, r7, #15
 800520a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800520e:	ed93 7b00 	vldr	d7, [r3]
 8005212:	05f8      	lsls	r0, r7, #23
 8005214:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005218:	ea4f 1427 	mov.w	r4, r7, asr #4
 800521c:	d516      	bpl.n	800524c <_dtoa_r+0x354>
 800521e:	4b97      	ldr	r3, [pc, #604]	@ (800547c <_dtoa_r+0x584>)
 8005220:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005228:	f7fb fb30 	bl	800088c <__aeabi_ddiv>
 800522c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005230:	f004 040f 	and.w	r4, r4, #15
 8005234:	2603      	movs	r6, #3
 8005236:	4d91      	ldr	r5, [pc, #580]	@ (800547c <_dtoa_r+0x584>)
 8005238:	b954      	cbnz	r4, 8005250 <_dtoa_r+0x358>
 800523a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800523e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005242:	f7fb fb23 	bl	800088c <__aeabi_ddiv>
 8005246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800524a:	e028      	b.n	800529e <_dtoa_r+0x3a6>
 800524c:	2602      	movs	r6, #2
 800524e:	e7f2      	b.n	8005236 <_dtoa_r+0x33e>
 8005250:	07e1      	lsls	r1, r4, #31
 8005252:	d508      	bpl.n	8005266 <_dtoa_r+0x36e>
 8005254:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800525c:	f7fb f9ec 	bl	8000638 <__aeabi_dmul>
 8005260:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005264:	3601      	adds	r6, #1
 8005266:	1064      	asrs	r4, r4, #1
 8005268:	3508      	adds	r5, #8
 800526a:	e7e5      	b.n	8005238 <_dtoa_r+0x340>
 800526c:	f000 80af 	beq.w	80053ce <_dtoa_r+0x4d6>
 8005270:	427c      	negs	r4, r7
 8005272:	4b81      	ldr	r3, [pc, #516]	@ (8005478 <_dtoa_r+0x580>)
 8005274:	4d81      	ldr	r5, [pc, #516]	@ (800547c <_dtoa_r+0x584>)
 8005276:	f004 020f 	and.w	r2, r4, #15
 800527a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005286:	f7fb f9d7 	bl	8000638 <__aeabi_dmul>
 800528a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800528e:	1124      	asrs	r4, r4, #4
 8005290:	2300      	movs	r3, #0
 8005292:	2602      	movs	r6, #2
 8005294:	2c00      	cmp	r4, #0
 8005296:	f040 808f 	bne.w	80053b8 <_dtoa_r+0x4c0>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1d3      	bne.n	8005246 <_dtoa_r+0x34e>
 800529e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8094 	beq.w	80053d2 <_dtoa_r+0x4da>
 80052aa:	4b75      	ldr	r3, [pc, #468]	@ (8005480 <_dtoa_r+0x588>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fc33 	bl	8000b1c <__aeabi_dcmplt>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f000 808b 	beq.w	80053d2 <_dtoa_r+0x4da>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8087 	beq.w	80053d2 <_dtoa_r+0x4da>
 80052c4:	f1bb 0f00 	cmp.w	fp, #0
 80052c8:	dd34      	ble.n	8005334 <_dtoa_r+0x43c>
 80052ca:	4620      	mov	r0, r4
 80052cc:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <_dtoa_r+0x58c>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fb f9b1 	bl	8000638 <__aeabi_dmul>
 80052d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052da:	f107 38ff 	add.w	r8, r7, #4294967295
 80052de:	3601      	adds	r6, #1
 80052e0:	465c      	mov	r4, fp
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7fb f93e 	bl	8000564 <__aeabi_i2d>
 80052e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ec:	f7fb f9a4 	bl	8000638 <__aeabi_dmul>
 80052f0:	4b65      	ldr	r3, [pc, #404]	@ (8005488 <_dtoa_r+0x590>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	f7fa ffea 	bl	80002cc <__adddf3>
 80052f8:	4605      	mov	r5, r0
 80052fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80052fe:	2c00      	cmp	r4, #0
 8005300:	d16a      	bne.n	80053d8 <_dtoa_r+0x4e0>
 8005302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005306:	4b61      	ldr	r3, [pc, #388]	@ (800548c <_dtoa_r+0x594>)
 8005308:	2200      	movs	r2, #0
 800530a:	f7fa ffdd 	bl	80002c8 <__aeabi_dsub>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005316:	462a      	mov	r2, r5
 8005318:	4633      	mov	r3, r6
 800531a:	f7fb fc1d 	bl	8000b58 <__aeabi_dcmpgt>
 800531e:	2800      	cmp	r0, #0
 8005320:	f040 8298 	bne.w	8005854 <_dtoa_r+0x95c>
 8005324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005328:	462a      	mov	r2, r5
 800532a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800532e:	f7fb fbf5 	bl	8000b1c <__aeabi_dcmplt>
 8005332:	bb38      	cbnz	r0, 8005384 <_dtoa_r+0x48c>
 8005334:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005338:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800533c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800533e:	2b00      	cmp	r3, #0
 8005340:	f2c0 8157 	blt.w	80055f2 <_dtoa_r+0x6fa>
 8005344:	2f0e      	cmp	r7, #14
 8005346:	f300 8154 	bgt.w	80055f2 <_dtoa_r+0x6fa>
 800534a:	4b4b      	ldr	r3, [pc, #300]	@ (8005478 <_dtoa_r+0x580>)
 800534c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005350:	ed93 7b00 	vldr	d7, [r3]
 8005354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	ed8d 7b00 	vstr	d7, [sp]
 800535c:	f280 80e5 	bge.w	800552a <_dtoa_r+0x632>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f300 80e1 	bgt.w	800552a <_dtoa_r+0x632>
 8005368:	d10c      	bne.n	8005384 <_dtoa_r+0x48c>
 800536a:	4b48      	ldr	r3, [pc, #288]	@ (800548c <_dtoa_r+0x594>)
 800536c:	2200      	movs	r2, #0
 800536e:	ec51 0b17 	vmov	r0, r1, d7
 8005372:	f7fb f961 	bl	8000638 <__aeabi_dmul>
 8005376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800537a:	f7fb fbe3 	bl	8000b44 <__aeabi_dcmpge>
 800537e:	2800      	cmp	r0, #0
 8005380:	f000 8266 	beq.w	8005850 <_dtoa_r+0x958>
 8005384:	2400      	movs	r4, #0
 8005386:	4625      	mov	r5, r4
 8005388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800538a:	4656      	mov	r6, sl
 800538c:	ea6f 0803 	mvn.w	r8, r3
 8005390:	2700      	movs	r7, #0
 8005392:	4621      	mov	r1, r4
 8005394:	4648      	mov	r0, r9
 8005396:	f000 fcbf 	bl	8005d18 <_Bfree>
 800539a:	2d00      	cmp	r5, #0
 800539c:	f000 80bd 	beq.w	800551a <_dtoa_r+0x622>
 80053a0:	b12f      	cbz	r7, 80053ae <_dtoa_r+0x4b6>
 80053a2:	42af      	cmp	r7, r5
 80053a4:	d003      	beq.n	80053ae <_dtoa_r+0x4b6>
 80053a6:	4639      	mov	r1, r7
 80053a8:	4648      	mov	r0, r9
 80053aa:	f000 fcb5 	bl	8005d18 <_Bfree>
 80053ae:	4629      	mov	r1, r5
 80053b0:	4648      	mov	r0, r9
 80053b2:	f000 fcb1 	bl	8005d18 <_Bfree>
 80053b6:	e0b0      	b.n	800551a <_dtoa_r+0x622>
 80053b8:	07e2      	lsls	r2, r4, #31
 80053ba:	d505      	bpl.n	80053c8 <_dtoa_r+0x4d0>
 80053bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053c0:	f7fb f93a 	bl	8000638 <__aeabi_dmul>
 80053c4:	3601      	adds	r6, #1
 80053c6:	2301      	movs	r3, #1
 80053c8:	1064      	asrs	r4, r4, #1
 80053ca:	3508      	adds	r5, #8
 80053cc:	e762      	b.n	8005294 <_dtoa_r+0x39c>
 80053ce:	2602      	movs	r6, #2
 80053d0:	e765      	b.n	800529e <_dtoa_r+0x3a6>
 80053d2:	9c03      	ldr	r4, [sp, #12]
 80053d4:	46b8      	mov	r8, r7
 80053d6:	e784      	b.n	80052e2 <_dtoa_r+0x3ea>
 80053d8:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <_dtoa_r+0x580>)
 80053da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053e4:	4454      	add	r4, sl
 80053e6:	2900      	cmp	r1, #0
 80053e8:	d054      	beq.n	8005494 <_dtoa_r+0x59c>
 80053ea:	4929      	ldr	r1, [pc, #164]	@ (8005490 <_dtoa_r+0x598>)
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7fb fa4d 	bl	800088c <__aeabi_ddiv>
 80053f2:	4633      	mov	r3, r6
 80053f4:	462a      	mov	r2, r5
 80053f6:	f7fa ff67 	bl	80002c8 <__aeabi_dsub>
 80053fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053fe:	4656      	mov	r6, sl
 8005400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005404:	f7fb fbc8 	bl	8000b98 <__aeabi_d2iz>
 8005408:	4605      	mov	r5, r0
 800540a:	f7fb f8ab 	bl	8000564 <__aeabi_i2d>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005416:	f7fa ff57 	bl	80002c8 <__aeabi_dsub>
 800541a:	3530      	adds	r5, #48	@ 0x30
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005424:	f806 5b01 	strb.w	r5, [r6], #1
 8005428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800542c:	f7fb fb76 	bl	8000b1c <__aeabi_dcmplt>
 8005430:	2800      	cmp	r0, #0
 8005432:	d172      	bne.n	800551a <_dtoa_r+0x622>
 8005434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005438:	4911      	ldr	r1, [pc, #68]	@ (8005480 <_dtoa_r+0x588>)
 800543a:	2000      	movs	r0, #0
 800543c:	f7fa ff44 	bl	80002c8 <__aeabi_dsub>
 8005440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005444:	f7fb fb6a 	bl	8000b1c <__aeabi_dcmplt>
 8005448:	2800      	cmp	r0, #0
 800544a:	f040 80b4 	bne.w	80055b6 <_dtoa_r+0x6be>
 800544e:	42a6      	cmp	r6, r4
 8005450:	f43f af70 	beq.w	8005334 <_dtoa_r+0x43c>
 8005454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005458:	4b0a      	ldr	r3, [pc, #40]	@ (8005484 <_dtoa_r+0x58c>)
 800545a:	2200      	movs	r2, #0
 800545c:	f7fb f8ec 	bl	8000638 <__aeabi_dmul>
 8005460:	4b08      	ldr	r3, [pc, #32]	@ (8005484 <_dtoa_r+0x58c>)
 8005462:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005466:	2200      	movs	r2, #0
 8005468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800546c:	f7fb f8e4 	bl	8000638 <__aeabi_dmul>
 8005470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005474:	e7c4      	b.n	8005400 <_dtoa_r+0x508>
 8005476:	bf00      	nop
 8005478:	08008740 	.word	0x08008740
 800547c:	08008718 	.word	0x08008718
 8005480:	3ff00000 	.word	0x3ff00000
 8005484:	40240000 	.word	0x40240000
 8005488:	401c0000 	.word	0x401c0000
 800548c:	40140000 	.word	0x40140000
 8005490:	3fe00000 	.word	0x3fe00000
 8005494:	4631      	mov	r1, r6
 8005496:	4628      	mov	r0, r5
 8005498:	f7fb f8ce 	bl	8000638 <__aeabi_dmul>
 800549c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80054a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80054a2:	4656      	mov	r6, sl
 80054a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a8:	f7fb fb76 	bl	8000b98 <__aeabi_d2iz>
 80054ac:	4605      	mov	r5, r0
 80054ae:	f7fb f859 	bl	8000564 <__aeabi_i2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ba:	f7fa ff05 	bl	80002c8 <__aeabi_dsub>
 80054be:	3530      	adds	r5, #48	@ 0x30
 80054c0:	f806 5b01 	strb.w	r5, [r6], #1
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	d124      	bne.n	800551e <_dtoa_r+0x626>
 80054d4:	4baf      	ldr	r3, [pc, #700]	@ (8005794 <_dtoa_r+0x89c>)
 80054d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80054da:	f7fa fef7 	bl	80002cc <__adddf3>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e6:	f7fb fb37 	bl	8000b58 <__aeabi_dcmpgt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d163      	bne.n	80055b6 <_dtoa_r+0x6be>
 80054ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80054f2:	49a8      	ldr	r1, [pc, #672]	@ (8005794 <_dtoa_r+0x89c>)
 80054f4:	2000      	movs	r0, #0
 80054f6:	f7fa fee7 	bl	80002c8 <__aeabi_dsub>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005502:	f7fb fb0b 	bl	8000b1c <__aeabi_dcmplt>
 8005506:	2800      	cmp	r0, #0
 8005508:	f43f af14 	beq.w	8005334 <_dtoa_r+0x43c>
 800550c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800550e:	1e73      	subs	r3, r6, #1
 8005510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005512:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005516:	2b30      	cmp	r3, #48	@ 0x30
 8005518:	d0f8      	beq.n	800550c <_dtoa_r+0x614>
 800551a:	4647      	mov	r7, r8
 800551c:	e03b      	b.n	8005596 <_dtoa_r+0x69e>
 800551e:	4b9e      	ldr	r3, [pc, #632]	@ (8005798 <_dtoa_r+0x8a0>)
 8005520:	f7fb f88a 	bl	8000638 <__aeabi_dmul>
 8005524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005528:	e7bc      	b.n	80054a4 <_dtoa_r+0x5ac>
 800552a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800552e:	4656      	mov	r6, sl
 8005530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005534:	4620      	mov	r0, r4
 8005536:	4629      	mov	r1, r5
 8005538:	f7fb f9a8 	bl	800088c <__aeabi_ddiv>
 800553c:	f7fb fb2c 	bl	8000b98 <__aeabi_d2iz>
 8005540:	4680      	mov	r8, r0
 8005542:	f7fb f80f 	bl	8000564 <__aeabi_i2d>
 8005546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800554a:	f7fb f875 	bl	8000638 <__aeabi_dmul>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4620      	mov	r0, r4
 8005554:	4629      	mov	r1, r5
 8005556:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800555a:	f7fa feb5 	bl	80002c8 <__aeabi_dsub>
 800555e:	f806 4b01 	strb.w	r4, [r6], #1
 8005562:	9d03      	ldr	r5, [sp, #12]
 8005564:	eba6 040a 	sub.w	r4, r6, sl
 8005568:	42a5      	cmp	r5, r4
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	d133      	bne.n	80055d8 <_dtoa_r+0x6e0>
 8005570:	f7fa feac 	bl	80002cc <__adddf3>
 8005574:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005578:	4604      	mov	r4, r0
 800557a:	460d      	mov	r5, r1
 800557c:	f7fb faec 	bl	8000b58 <__aeabi_dcmpgt>
 8005580:	b9c0      	cbnz	r0, 80055b4 <_dtoa_r+0x6bc>
 8005582:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fb fabd 	bl	8000b08 <__aeabi_dcmpeq>
 800558e:	b110      	cbz	r0, 8005596 <_dtoa_r+0x69e>
 8005590:	f018 0f01 	tst.w	r8, #1
 8005594:	d10e      	bne.n	80055b4 <_dtoa_r+0x6bc>
 8005596:	9902      	ldr	r1, [sp, #8]
 8005598:	4648      	mov	r0, r9
 800559a:	f000 fbbd 	bl	8005d18 <_Bfree>
 800559e:	2300      	movs	r3, #0
 80055a0:	7033      	strb	r3, [r6, #0]
 80055a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055a4:	3701      	adds	r7, #1
 80055a6:	601f      	str	r7, [r3, #0]
 80055a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 824b 	beq.w	8005a46 <_dtoa_r+0xb4e>
 80055b0:	601e      	str	r6, [r3, #0]
 80055b2:	e248      	b.n	8005a46 <_dtoa_r+0xb4e>
 80055b4:	46b8      	mov	r8, r7
 80055b6:	4633      	mov	r3, r6
 80055b8:	461e      	mov	r6, r3
 80055ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055be:	2a39      	cmp	r2, #57	@ 0x39
 80055c0:	d106      	bne.n	80055d0 <_dtoa_r+0x6d8>
 80055c2:	459a      	cmp	sl, r3
 80055c4:	d1f8      	bne.n	80055b8 <_dtoa_r+0x6c0>
 80055c6:	2230      	movs	r2, #48	@ 0x30
 80055c8:	f108 0801 	add.w	r8, r8, #1
 80055cc:	f88a 2000 	strb.w	r2, [sl]
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	3201      	adds	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e7a0      	b.n	800551a <_dtoa_r+0x622>
 80055d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005798 <_dtoa_r+0x8a0>)
 80055da:	2200      	movs	r2, #0
 80055dc:	f7fb f82c 	bl	8000638 <__aeabi_dmul>
 80055e0:	2200      	movs	r2, #0
 80055e2:	2300      	movs	r3, #0
 80055e4:	4604      	mov	r4, r0
 80055e6:	460d      	mov	r5, r1
 80055e8:	f7fb fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d09f      	beq.n	8005530 <_dtoa_r+0x638>
 80055f0:	e7d1      	b.n	8005596 <_dtoa_r+0x69e>
 80055f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	f000 80ea 	beq.w	80057ce <_dtoa_r+0x8d6>
 80055fa:	9a07      	ldr	r2, [sp, #28]
 80055fc:	2a01      	cmp	r2, #1
 80055fe:	f300 80cd 	bgt.w	800579c <_dtoa_r+0x8a4>
 8005602:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005604:	2a00      	cmp	r2, #0
 8005606:	f000 80c1 	beq.w	800578c <_dtoa_r+0x894>
 800560a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800560e:	9c08      	ldr	r4, [sp, #32]
 8005610:	9e00      	ldr	r6, [sp, #0]
 8005612:	9a00      	ldr	r2, [sp, #0]
 8005614:	441a      	add	r2, r3
 8005616:	9200      	str	r2, [sp, #0]
 8005618:	9a06      	ldr	r2, [sp, #24]
 800561a:	2101      	movs	r1, #1
 800561c:	441a      	add	r2, r3
 800561e:	4648      	mov	r0, r9
 8005620:	9206      	str	r2, [sp, #24]
 8005622:	f000 fc77 	bl	8005f14 <__i2b>
 8005626:	4605      	mov	r5, r0
 8005628:	b166      	cbz	r6, 8005644 <_dtoa_r+0x74c>
 800562a:	9b06      	ldr	r3, [sp, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	dd09      	ble.n	8005644 <_dtoa_r+0x74c>
 8005630:	42b3      	cmp	r3, r6
 8005632:	9a00      	ldr	r2, [sp, #0]
 8005634:	bfa8      	it	ge
 8005636:	4633      	movge	r3, r6
 8005638:	1ad2      	subs	r2, r2, r3
 800563a:	9200      	str	r2, [sp, #0]
 800563c:	9a06      	ldr	r2, [sp, #24]
 800563e:	1af6      	subs	r6, r6, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	9306      	str	r3, [sp, #24]
 8005644:	9b08      	ldr	r3, [sp, #32]
 8005646:	b30b      	cbz	r3, 800568c <_dtoa_r+0x794>
 8005648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80c6 	beq.w	80057dc <_dtoa_r+0x8e4>
 8005650:	2c00      	cmp	r4, #0
 8005652:	f000 80c0 	beq.w	80057d6 <_dtoa_r+0x8de>
 8005656:	4629      	mov	r1, r5
 8005658:	4622      	mov	r2, r4
 800565a:	4648      	mov	r0, r9
 800565c:	f000 fd12 	bl	8006084 <__pow5mult>
 8005660:	9a02      	ldr	r2, [sp, #8]
 8005662:	4601      	mov	r1, r0
 8005664:	4605      	mov	r5, r0
 8005666:	4648      	mov	r0, r9
 8005668:	f000 fc6a 	bl	8005f40 <__multiply>
 800566c:	9902      	ldr	r1, [sp, #8]
 800566e:	4680      	mov	r8, r0
 8005670:	4648      	mov	r0, r9
 8005672:	f000 fb51 	bl	8005d18 <_Bfree>
 8005676:	9b08      	ldr	r3, [sp, #32]
 8005678:	1b1b      	subs	r3, r3, r4
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	f000 80b1 	beq.w	80057e2 <_dtoa_r+0x8ea>
 8005680:	9a08      	ldr	r2, [sp, #32]
 8005682:	4641      	mov	r1, r8
 8005684:	4648      	mov	r0, r9
 8005686:	f000 fcfd 	bl	8006084 <__pow5mult>
 800568a:	9002      	str	r0, [sp, #8]
 800568c:	2101      	movs	r1, #1
 800568e:	4648      	mov	r0, r9
 8005690:	f000 fc40 	bl	8005f14 <__i2b>
 8005694:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005696:	4604      	mov	r4, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 81d8 	beq.w	8005a4e <_dtoa_r+0xb56>
 800569e:	461a      	mov	r2, r3
 80056a0:	4601      	mov	r1, r0
 80056a2:	4648      	mov	r0, r9
 80056a4:	f000 fcee 	bl	8006084 <__pow5mult>
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	4604      	mov	r4, r0
 80056ae:	f300 809f 	bgt.w	80057f0 <_dtoa_r+0x8f8>
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f040 8097 	bne.w	80057e8 <_dtoa_r+0x8f0>
 80056ba:	9b05      	ldr	r3, [sp, #20]
 80056bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 8093 	bne.w	80057ec <_dtoa_r+0x8f4>
 80056c6:	9b05      	ldr	r3, [sp, #20]
 80056c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056cc:	0d1b      	lsrs	r3, r3, #20
 80056ce:	051b      	lsls	r3, r3, #20
 80056d0:	b133      	cbz	r3, 80056e0 <_dtoa_r+0x7e8>
 80056d2:	9b00      	ldr	r3, [sp, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	9b06      	ldr	r3, [sp, #24]
 80056da:	3301      	adds	r3, #1
 80056dc:	9306      	str	r3, [sp, #24]
 80056de:	2301      	movs	r3, #1
 80056e0:	9308      	str	r3, [sp, #32]
 80056e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 81b8 	beq.w	8005a5a <_dtoa_r+0xb62>
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056f0:	6918      	ldr	r0, [r3, #16]
 80056f2:	f000 fbc3 	bl	8005e7c <__hi0bits>
 80056f6:	f1c0 0020 	rsb	r0, r0, #32
 80056fa:	9b06      	ldr	r3, [sp, #24]
 80056fc:	4418      	add	r0, r3
 80056fe:	f010 001f 	ands.w	r0, r0, #31
 8005702:	f000 8082 	beq.w	800580a <_dtoa_r+0x912>
 8005706:	f1c0 0320 	rsb	r3, r0, #32
 800570a:	2b04      	cmp	r3, #4
 800570c:	dd73      	ble.n	80057f6 <_dtoa_r+0x8fe>
 800570e:	9b00      	ldr	r3, [sp, #0]
 8005710:	f1c0 001c 	rsb	r0, r0, #28
 8005714:	4403      	add	r3, r0
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	9b06      	ldr	r3, [sp, #24]
 800571a:	4403      	add	r3, r0
 800571c:	4406      	add	r6, r0
 800571e:	9306      	str	r3, [sp, #24]
 8005720:	9b00      	ldr	r3, [sp, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	dd05      	ble.n	8005732 <_dtoa_r+0x83a>
 8005726:	9902      	ldr	r1, [sp, #8]
 8005728:	461a      	mov	r2, r3
 800572a:	4648      	mov	r0, r9
 800572c:	f000 fd04 	bl	8006138 <__lshift>
 8005730:	9002      	str	r0, [sp, #8]
 8005732:	9b06      	ldr	r3, [sp, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	dd05      	ble.n	8005744 <_dtoa_r+0x84c>
 8005738:	4621      	mov	r1, r4
 800573a:	461a      	mov	r2, r3
 800573c:	4648      	mov	r0, r9
 800573e:	f000 fcfb 	bl	8006138 <__lshift>
 8005742:	4604      	mov	r4, r0
 8005744:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d061      	beq.n	800580e <_dtoa_r+0x916>
 800574a:	9802      	ldr	r0, [sp, #8]
 800574c:	4621      	mov	r1, r4
 800574e:	f000 fd5f 	bl	8006210 <__mcmp>
 8005752:	2800      	cmp	r0, #0
 8005754:	da5b      	bge.n	800580e <_dtoa_r+0x916>
 8005756:	2300      	movs	r3, #0
 8005758:	9902      	ldr	r1, [sp, #8]
 800575a:	220a      	movs	r2, #10
 800575c:	4648      	mov	r0, r9
 800575e:	f000 fafd 	bl	8005d5c <__multadd>
 8005762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005764:	9002      	str	r0, [sp, #8]
 8005766:	f107 38ff 	add.w	r8, r7, #4294967295
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8177 	beq.w	8005a5e <_dtoa_r+0xb66>
 8005770:	4629      	mov	r1, r5
 8005772:	2300      	movs	r3, #0
 8005774:	220a      	movs	r2, #10
 8005776:	4648      	mov	r0, r9
 8005778:	f000 faf0 	bl	8005d5c <__multadd>
 800577c:	f1bb 0f00 	cmp.w	fp, #0
 8005780:	4605      	mov	r5, r0
 8005782:	dc6f      	bgt.n	8005864 <_dtoa_r+0x96c>
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	2b02      	cmp	r3, #2
 8005788:	dc49      	bgt.n	800581e <_dtoa_r+0x926>
 800578a:	e06b      	b.n	8005864 <_dtoa_r+0x96c>
 800578c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800578e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005792:	e73c      	b.n	800560e <_dtoa_r+0x716>
 8005794:	3fe00000 	.word	0x3fe00000
 8005798:	40240000 	.word	0x40240000
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	1e5c      	subs	r4, r3, #1
 80057a0:	9b08      	ldr	r3, [sp, #32]
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	db09      	blt.n	80057ba <_dtoa_r+0x8c2>
 80057a6:	1b1c      	subs	r4, r3, r4
 80057a8:	9b03      	ldr	r3, [sp, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f6bf af30 	bge.w	8005610 <_dtoa_r+0x718>
 80057b0:	9b00      	ldr	r3, [sp, #0]
 80057b2:	9a03      	ldr	r2, [sp, #12]
 80057b4:	1a9e      	subs	r6, r3, r2
 80057b6:	2300      	movs	r3, #0
 80057b8:	e72b      	b.n	8005612 <_dtoa_r+0x71a>
 80057ba:	9b08      	ldr	r3, [sp, #32]
 80057bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80057be:	9408      	str	r4, [sp, #32]
 80057c0:	1ae3      	subs	r3, r4, r3
 80057c2:	441a      	add	r2, r3
 80057c4:	9e00      	ldr	r6, [sp, #0]
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80057ca:	2400      	movs	r4, #0
 80057cc:	e721      	b.n	8005612 <_dtoa_r+0x71a>
 80057ce:	9c08      	ldr	r4, [sp, #32]
 80057d0:	9e00      	ldr	r6, [sp, #0]
 80057d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80057d4:	e728      	b.n	8005628 <_dtoa_r+0x730>
 80057d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80057da:	e751      	b.n	8005680 <_dtoa_r+0x788>
 80057dc:	9a08      	ldr	r2, [sp, #32]
 80057de:	9902      	ldr	r1, [sp, #8]
 80057e0:	e750      	b.n	8005684 <_dtoa_r+0x78c>
 80057e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80057e6:	e751      	b.n	800568c <_dtoa_r+0x794>
 80057e8:	2300      	movs	r3, #0
 80057ea:	e779      	b.n	80056e0 <_dtoa_r+0x7e8>
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	e777      	b.n	80056e0 <_dtoa_r+0x7e8>
 80057f0:	2300      	movs	r3, #0
 80057f2:	9308      	str	r3, [sp, #32]
 80057f4:	e779      	b.n	80056ea <_dtoa_r+0x7f2>
 80057f6:	d093      	beq.n	8005720 <_dtoa_r+0x828>
 80057f8:	9a00      	ldr	r2, [sp, #0]
 80057fa:	331c      	adds	r3, #28
 80057fc:	441a      	add	r2, r3
 80057fe:	9200      	str	r2, [sp, #0]
 8005800:	9a06      	ldr	r2, [sp, #24]
 8005802:	441a      	add	r2, r3
 8005804:	441e      	add	r6, r3
 8005806:	9206      	str	r2, [sp, #24]
 8005808:	e78a      	b.n	8005720 <_dtoa_r+0x828>
 800580a:	4603      	mov	r3, r0
 800580c:	e7f4      	b.n	80057f8 <_dtoa_r+0x900>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	46b8      	mov	r8, r7
 8005814:	dc20      	bgt.n	8005858 <_dtoa_r+0x960>
 8005816:	469b      	mov	fp, r3
 8005818:	9b07      	ldr	r3, [sp, #28]
 800581a:	2b02      	cmp	r3, #2
 800581c:	dd1e      	ble.n	800585c <_dtoa_r+0x964>
 800581e:	f1bb 0f00 	cmp.w	fp, #0
 8005822:	f47f adb1 	bne.w	8005388 <_dtoa_r+0x490>
 8005826:	4621      	mov	r1, r4
 8005828:	465b      	mov	r3, fp
 800582a:	2205      	movs	r2, #5
 800582c:	4648      	mov	r0, r9
 800582e:	f000 fa95 	bl	8005d5c <__multadd>
 8005832:	4601      	mov	r1, r0
 8005834:	4604      	mov	r4, r0
 8005836:	9802      	ldr	r0, [sp, #8]
 8005838:	f000 fcea 	bl	8006210 <__mcmp>
 800583c:	2800      	cmp	r0, #0
 800583e:	f77f ada3 	ble.w	8005388 <_dtoa_r+0x490>
 8005842:	4656      	mov	r6, sl
 8005844:	2331      	movs	r3, #49	@ 0x31
 8005846:	f806 3b01 	strb.w	r3, [r6], #1
 800584a:	f108 0801 	add.w	r8, r8, #1
 800584e:	e59f      	b.n	8005390 <_dtoa_r+0x498>
 8005850:	9c03      	ldr	r4, [sp, #12]
 8005852:	46b8      	mov	r8, r7
 8005854:	4625      	mov	r5, r4
 8005856:	e7f4      	b.n	8005842 <_dtoa_r+0x94a>
 8005858:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800585c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8101 	beq.w	8005a66 <_dtoa_r+0xb6e>
 8005864:	2e00      	cmp	r6, #0
 8005866:	dd05      	ble.n	8005874 <_dtoa_r+0x97c>
 8005868:	4629      	mov	r1, r5
 800586a:	4632      	mov	r2, r6
 800586c:	4648      	mov	r0, r9
 800586e:	f000 fc63 	bl	8006138 <__lshift>
 8005872:	4605      	mov	r5, r0
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d05c      	beq.n	8005934 <_dtoa_r+0xa3c>
 800587a:	6869      	ldr	r1, [r5, #4]
 800587c:	4648      	mov	r0, r9
 800587e:	f000 fa0b 	bl	8005c98 <_Balloc>
 8005882:	4606      	mov	r6, r0
 8005884:	b928      	cbnz	r0, 8005892 <_dtoa_r+0x99a>
 8005886:	4b82      	ldr	r3, [pc, #520]	@ (8005a90 <_dtoa_r+0xb98>)
 8005888:	4602      	mov	r2, r0
 800588a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800588e:	f7ff bb4a 	b.w	8004f26 <_dtoa_r+0x2e>
 8005892:	692a      	ldr	r2, [r5, #16]
 8005894:	3202      	adds	r2, #2
 8005896:	0092      	lsls	r2, r2, #2
 8005898:	f105 010c 	add.w	r1, r5, #12
 800589c:	300c      	adds	r0, #12
 800589e:	f002 f93f 	bl	8007b20 <memcpy>
 80058a2:	2201      	movs	r2, #1
 80058a4:	4631      	mov	r1, r6
 80058a6:	4648      	mov	r0, r9
 80058a8:	f000 fc46 	bl	8006138 <__lshift>
 80058ac:	f10a 0301 	add.w	r3, sl, #1
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	eb0a 030b 	add.w	r3, sl, fp
 80058b6:	9308      	str	r3, [sp, #32]
 80058b8:	9b04      	ldr	r3, [sp, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	462f      	mov	r7, r5
 80058c0:	9306      	str	r3, [sp, #24]
 80058c2:	4605      	mov	r5, r0
 80058c4:	9b00      	ldr	r3, [sp, #0]
 80058c6:	9802      	ldr	r0, [sp, #8]
 80058c8:	4621      	mov	r1, r4
 80058ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80058ce:	f7ff fa8b 	bl	8004de8 <quorem>
 80058d2:	4603      	mov	r3, r0
 80058d4:	3330      	adds	r3, #48	@ 0x30
 80058d6:	9003      	str	r0, [sp, #12]
 80058d8:	4639      	mov	r1, r7
 80058da:	9802      	ldr	r0, [sp, #8]
 80058dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058de:	f000 fc97 	bl	8006210 <__mcmp>
 80058e2:	462a      	mov	r2, r5
 80058e4:	9004      	str	r0, [sp, #16]
 80058e6:	4621      	mov	r1, r4
 80058e8:	4648      	mov	r0, r9
 80058ea:	f000 fcad 	bl	8006248 <__mdiff>
 80058ee:	68c2      	ldr	r2, [r0, #12]
 80058f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f2:	4606      	mov	r6, r0
 80058f4:	bb02      	cbnz	r2, 8005938 <_dtoa_r+0xa40>
 80058f6:	4601      	mov	r1, r0
 80058f8:	9802      	ldr	r0, [sp, #8]
 80058fa:	f000 fc89 	bl	8006210 <__mcmp>
 80058fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005900:	4602      	mov	r2, r0
 8005902:	4631      	mov	r1, r6
 8005904:	4648      	mov	r0, r9
 8005906:	920c      	str	r2, [sp, #48]	@ 0x30
 8005908:	9309      	str	r3, [sp, #36]	@ 0x24
 800590a:	f000 fa05 	bl	8005d18 <_Bfree>
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005912:	9e00      	ldr	r6, [sp, #0]
 8005914:	ea42 0103 	orr.w	r1, r2, r3
 8005918:	9b06      	ldr	r3, [sp, #24]
 800591a:	4319      	orrs	r1, r3
 800591c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800591e:	d10d      	bne.n	800593c <_dtoa_r+0xa44>
 8005920:	2b39      	cmp	r3, #57	@ 0x39
 8005922:	d027      	beq.n	8005974 <_dtoa_r+0xa7c>
 8005924:	9a04      	ldr	r2, [sp, #16]
 8005926:	2a00      	cmp	r2, #0
 8005928:	dd01      	ble.n	800592e <_dtoa_r+0xa36>
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	3331      	adds	r3, #49	@ 0x31
 800592e:	f88b 3000 	strb.w	r3, [fp]
 8005932:	e52e      	b.n	8005392 <_dtoa_r+0x49a>
 8005934:	4628      	mov	r0, r5
 8005936:	e7b9      	b.n	80058ac <_dtoa_r+0x9b4>
 8005938:	2201      	movs	r2, #1
 800593a:	e7e2      	b.n	8005902 <_dtoa_r+0xa0a>
 800593c:	9904      	ldr	r1, [sp, #16]
 800593e:	2900      	cmp	r1, #0
 8005940:	db04      	blt.n	800594c <_dtoa_r+0xa54>
 8005942:	9807      	ldr	r0, [sp, #28]
 8005944:	4301      	orrs	r1, r0
 8005946:	9806      	ldr	r0, [sp, #24]
 8005948:	4301      	orrs	r1, r0
 800594a:	d120      	bne.n	800598e <_dtoa_r+0xa96>
 800594c:	2a00      	cmp	r2, #0
 800594e:	ddee      	ble.n	800592e <_dtoa_r+0xa36>
 8005950:	9902      	ldr	r1, [sp, #8]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2201      	movs	r2, #1
 8005956:	4648      	mov	r0, r9
 8005958:	f000 fbee 	bl	8006138 <__lshift>
 800595c:	4621      	mov	r1, r4
 800595e:	9002      	str	r0, [sp, #8]
 8005960:	f000 fc56 	bl	8006210 <__mcmp>
 8005964:	2800      	cmp	r0, #0
 8005966:	9b00      	ldr	r3, [sp, #0]
 8005968:	dc02      	bgt.n	8005970 <_dtoa_r+0xa78>
 800596a:	d1e0      	bne.n	800592e <_dtoa_r+0xa36>
 800596c:	07da      	lsls	r2, r3, #31
 800596e:	d5de      	bpl.n	800592e <_dtoa_r+0xa36>
 8005970:	2b39      	cmp	r3, #57	@ 0x39
 8005972:	d1da      	bne.n	800592a <_dtoa_r+0xa32>
 8005974:	2339      	movs	r3, #57	@ 0x39
 8005976:	f88b 3000 	strb.w	r3, [fp]
 800597a:	4633      	mov	r3, r6
 800597c:	461e      	mov	r6, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005984:	2a39      	cmp	r2, #57	@ 0x39
 8005986:	d04e      	beq.n	8005a26 <_dtoa_r+0xb2e>
 8005988:	3201      	adds	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e501      	b.n	8005392 <_dtoa_r+0x49a>
 800598e:	2a00      	cmp	r2, #0
 8005990:	dd03      	ble.n	800599a <_dtoa_r+0xaa2>
 8005992:	2b39      	cmp	r3, #57	@ 0x39
 8005994:	d0ee      	beq.n	8005974 <_dtoa_r+0xa7c>
 8005996:	3301      	adds	r3, #1
 8005998:	e7c9      	b.n	800592e <_dtoa_r+0xa36>
 800599a:	9a00      	ldr	r2, [sp, #0]
 800599c:	9908      	ldr	r1, [sp, #32]
 800599e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059a2:	428a      	cmp	r2, r1
 80059a4:	d028      	beq.n	80059f8 <_dtoa_r+0xb00>
 80059a6:	9902      	ldr	r1, [sp, #8]
 80059a8:	2300      	movs	r3, #0
 80059aa:	220a      	movs	r2, #10
 80059ac:	4648      	mov	r0, r9
 80059ae:	f000 f9d5 	bl	8005d5c <__multadd>
 80059b2:	42af      	cmp	r7, r5
 80059b4:	9002      	str	r0, [sp, #8]
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	f04f 020a 	mov.w	r2, #10
 80059be:	4639      	mov	r1, r7
 80059c0:	4648      	mov	r0, r9
 80059c2:	d107      	bne.n	80059d4 <_dtoa_r+0xadc>
 80059c4:	f000 f9ca 	bl	8005d5c <__multadd>
 80059c8:	4607      	mov	r7, r0
 80059ca:	4605      	mov	r5, r0
 80059cc:	9b00      	ldr	r3, [sp, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	e777      	b.n	80058c4 <_dtoa_r+0x9cc>
 80059d4:	f000 f9c2 	bl	8005d5c <__multadd>
 80059d8:	4629      	mov	r1, r5
 80059da:	4607      	mov	r7, r0
 80059dc:	2300      	movs	r3, #0
 80059de:	220a      	movs	r2, #10
 80059e0:	4648      	mov	r0, r9
 80059e2:	f000 f9bb 	bl	8005d5c <__multadd>
 80059e6:	4605      	mov	r5, r0
 80059e8:	e7f0      	b.n	80059cc <_dtoa_r+0xad4>
 80059ea:	f1bb 0f00 	cmp.w	fp, #0
 80059ee:	bfcc      	ite	gt
 80059f0:	465e      	movgt	r6, fp
 80059f2:	2601      	movle	r6, #1
 80059f4:	4456      	add	r6, sl
 80059f6:	2700      	movs	r7, #0
 80059f8:	9902      	ldr	r1, [sp, #8]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2201      	movs	r2, #1
 80059fe:	4648      	mov	r0, r9
 8005a00:	f000 fb9a 	bl	8006138 <__lshift>
 8005a04:	4621      	mov	r1, r4
 8005a06:	9002      	str	r0, [sp, #8]
 8005a08:	f000 fc02 	bl	8006210 <__mcmp>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	dcb4      	bgt.n	800597a <_dtoa_r+0xa82>
 8005a10:	d102      	bne.n	8005a18 <_dtoa_r+0xb20>
 8005a12:	9b00      	ldr	r3, [sp, #0]
 8005a14:	07db      	lsls	r3, r3, #31
 8005a16:	d4b0      	bmi.n	800597a <_dtoa_r+0xa82>
 8005a18:	4633      	mov	r3, r6
 8005a1a:	461e      	mov	r6, r3
 8005a1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a20:	2a30      	cmp	r2, #48	@ 0x30
 8005a22:	d0fa      	beq.n	8005a1a <_dtoa_r+0xb22>
 8005a24:	e4b5      	b.n	8005392 <_dtoa_r+0x49a>
 8005a26:	459a      	cmp	sl, r3
 8005a28:	d1a8      	bne.n	800597c <_dtoa_r+0xa84>
 8005a2a:	2331      	movs	r3, #49	@ 0x31
 8005a2c:	f108 0801 	add.w	r8, r8, #1
 8005a30:	f88a 3000 	strb.w	r3, [sl]
 8005a34:	e4ad      	b.n	8005392 <_dtoa_r+0x49a>
 8005a36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005a94 <_dtoa_r+0xb9c>
 8005a3c:	b11b      	cbz	r3, 8005a46 <_dtoa_r+0xb4e>
 8005a3e:	f10a 0308 	add.w	r3, sl, #8
 8005a42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	4650      	mov	r0, sl
 8005a48:	b017      	add	sp, #92	@ 0x5c
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	9b07      	ldr	r3, [sp, #28]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	f77f ae2e 	ble.w	80056b2 <_dtoa_r+0x7ba>
 8005a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a58:	9308      	str	r3, [sp, #32]
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	e64d      	b.n	80056fa <_dtoa_r+0x802>
 8005a5e:	f1bb 0f00 	cmp.w	fp, #0
 8005a62:	f77f aed9 	ble.w	8005818 <_dtoa_r+0x920>
 8005a66:	4656      	mov	r6, sl
 8005a68:	9802      	ldr	r0, [sp, #8]
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	f7ff f9bc 	bl	8004de8 <quorem>
 8005a70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005a74:	f806 3b01 	strb.w	r3, [r6], #1
 8005a78:	eba6 020a 	sub.w	r2, r6, sl
 8005a7c:	4593      	cmp	fp, r2
 8005a7e:	ddb4      	ble.n	80059ea <_dtoa_r+0xaf2>
 8005a80:	9902      	ldr	r1, [sp, #8]
 8005a82:	2300      	movs	r3, #0
 8005a84:	220a      	movs	r2, #10
 8005a86:	4648      	mov	r0, r9
 8005a88:	f000 f968 	bl	8005d5c <__multadd>
 8005a8c:	9002      	str	r0, [sp, #8]
 8005a8e:	e7eb      	b.n	8005a68 <_dtoa_r+0xb70>
 8005a90:	080085e9 	.word	0x080085e9
 8005a94:	0800856d 	.word	0x0800856d

08005a98 <_free_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d041      	beq.n	8005b24 <_free_r+0x8c>
 8005aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa4:	1f0c      	subs	r4, r1, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfb8      	it	lt
 8005aaa:	18e4      	addlt	r4, r4, r3
 8005aac:	f000 f8e8 	bl	8005c80 <__malloc_lock>
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <_free_r+0x90>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	b933      	cbnz	r3, 8005ac4 <_free_r+0x2c>
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	6014      	str	r4, [r2, #0]
 8005aba:	4628      	mov	r0, r5
 8005abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac0:	f000 b8e4 	b.w	8005c8c <__malloc_unlock>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x42>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf01      	itttt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	e7ed      	b.n	8005ab6 <_free_r+0x1e>
 8005ada:	461a      	mov	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_free_r+0x4c>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d9fa      	bls.n	8005ada <_free_r+0x42>
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	1850      	adds	r0, r2, r1
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d10b      	bne.n	8005b04 <_free_r+0x6c>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	4401      	add	r1, r0
 8005af0:	1850      	adds	r0, r2, r1
 8005af2:	4283      	cmp	r3, r0
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	d1e0      	bne.n	8005aba <_free_r+0x22>
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	6053      	str	r3, [r2, #4]
 8005afe:	4408      	add	r0, r1
 8005b00:	6010      	str	r0, [r2, #0]
 8005b02:	e7da      	b.n	8005aba <_free_r+0x22>
 8005b04:	d902      	bls.n	8005b0c <_free_r+0x74>
 8005b06:	230c      	movs	r3, #12
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	e7d6      	b.n	8005aba <_free_r+0x22>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf04      	itt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	bf04      	itt	eq
 8005b1c:	1809      	addeq	r1, r1, r0
 8005b1e:	6021      	streq	r1, [r4, #0]
 8005b20:	6054      	str	r4, [r2, #4]
 8005b22:	e7ca      	b.n	8005aba <_free_r+0x22>
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	2000043c 	.word	0x2000043c

08005b2c <malloc>:
 8005b2c:	4b02      	ldr	r3, [pc, #8]	@ (8005b38 <malloc+0xc>)
 8005b2e:	4601      	mov	r1, r0
 8005b30:	6818      	ldr	r0, [r3, #0]
 8005b32:	f000 b825 	b.w	8005b80 <_malloc_r>
 8005b36:	bf00      	nop
 8005b38:	20000018 	.word	0x20000018

08005b3c <sbrk_aligned>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b7c <sbrk_aligned+0x40>)
 8005b40:	460c      	mov	r4, r1
 8005b42:	6831      	ldr	r1, [r6, #0]
 8005b44:	4605      	mov	r5, r0
 8005b46:	b911      	cbnz	r1, 8005b4e <sbrk_aligned+0x12>
 8005b48:	f001 ffda 	bl	8007b00 <_sbrk_r>
 8005b4c:	6030      	str	r0, [r6, #0]
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f001 ffd5 	bl	8007b00 <_sbrk_r>
 8005b56:	1c43      	adds	r3, r0, #1
 8005b58:	d103      	bne.n	8005b62 <sbrk_aligned+0x26>
 8005b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b5e:	4620      	mov	r0, r4
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	1cc4      	adds	r4, r0, #3
 8005b64:	f024 0403 	bic.w	r4, r4, #3
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d0f8      	beq.n	8005b5e <sbrk_aligned+0x22>
 8005b6c:	1a21      	subs	r1, r4, r0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f001 ffc6 	bl	8007b00 <_sbrk_r>
 8005b74:	3001      	adds	r0, #1
 8005b76:	d1f2      	bne.n	8005b5e <sbrk_aligned+0x22>
 8005b78:	e7ef      	b.n	8005b5a <sbrk_aligned+0x1e>
 8005b7a:	bf00      	nop
 8005b7c:	20000438 	.word	0x20000438

08005b80 <_malloc_r>:
 8005b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	1ccd      	adds	r5, r1, #3
 8005b86:	f025 0503 	bic.w	r5, r5, #3
 8005b8a:	3508      	adds	r5, #8
 8005b8c:	2d0c      	cmp	r5, #12
 8005b8e:	bf38      	it	cc
 8005b90:	250c      	movcc	r5, #12
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	4606      	mov	r6, r0
 8005b96:	db01      	blt.n	8005b9c <_malloc_r+0x1c>
 8005b98:	42a9      	cmp	r1, r5
 8005b9a:	d904      	bls.n	8005ba6 <_malloc_r+0x26>
 8005b9c:	230c      	movs	r3, #12
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c7c <_malloc_r+0xfc>
 8005baa:	f000 f869 	bl	8005c80 <__malloc_lock>
 8005bae:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	bb44      	cbnz	r4, 8005c08 <_malloc_r+0x88>
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ffbf 	bl	8005b3c <sbrk_aligned>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	d158      	bne.n	8005c76 <_malloc_r+0xf6>
 8005bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005bc8:	4627      	mov	r7, r4
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	d143      	bne.n	8005c56 <_malloc_r+0xd6>
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	d04b      	beq.n	8005c6a <_malloc_r+0xea>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	eb04 0903 	add.w	r9, r4, r3
 8005bdc:	f001 ff90 	bl	8007b00 <_sbrk_r>
 8005be0:	4581      	cmp	r9, r0
 8005be2:	d142      	bne.n	8005c6a <_malloc_r+0xea>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	1a6d      	subs	r5, r5, r1
 8005be8:	4629      	mov	r1, r5
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ffa6 	bl	8005b3c <sbrk_aligned>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d03a      	beq.n	8005c6a <_malloc_r+0xea>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	442b      	add	r3, r5
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	bb62      	cbnz	r2, 8005c5c <_malloc_r+0xdc>
 8005c02:	f8c8 7000 	str.w	r7, [r8]
 8005c06:	e00f      	b.n	8005c28 <_malloc_r+0xa8>
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	1b52      	subs	r2, r2, r5
 8005c0c:	d420      	bmi.n	8005c50 <_malloc_r+0xd0>
 8005c0e:	2a0b      	cmp	r2, #11
 8005c10:	d917      	bls.n	8005c42 <_malloc_r+0xc2>
 8005c12:	1961      	adds	r1, r4, r5
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	6025      	str	r5, [r4, #0]
 8005c18:	bf18      	it	ne
 8005c1a:	6059      	strne	r1, [r3, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	bf08      	it	eq
 8005c20:	f8c8 1000 	streq.w	r1, [r8]
 8005c24:	5162      	str	r2, [r4, r5]
 8005c26:	604b      	str	r3, [r1, #4]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f000 f82f 	bl	8005c8c <__malloc_unlock>
 8005c2e:	f104 000b 	add.w	r0, r4, #11
 8005c32:	1d23      	adds	r3, r4, #4
 8005c34:	f020 0007 	bic.w	r0, r0, #7
 8005c38:	1ac2      	subs	r2, r0, r3
 8005c3a:	bf1c      	itt	ne
 8005c3c:	1a1b      	subne	r3, r3, r0
 8005c3e:	50a3      	strne	r3, [r4, r2]
 8005c40:	e7af      	b.n	8005ba2 <_malloc_r+0x22>
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	bf0c      	ite	eq
 8005c48:	f8c8 2000 	streq.w	r2, [r8]
 8005c4c:	605a      	strne	r2, [r3, #4]
 8005c4e:	e7eb      	b.n	8005c28 <_malloc_r+0xa8>
 8005c50:	4623      	mov	r3, r4
 8005c52:	6864      	ldr	r4, [r4, #4]
 8005c54:	e7ae      	b.n	8005bb4 <_malloc_r+0x34>
 8005c56:	463c      	mov	r4, r7
 8005c58:	687f      	ldr	r7, [r7, #4]
 8005c5a:	e7b6      	b.n	8005bca <_malloc_r+0x4a>
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	d1fb      	bne.n	8005c5c <_malloc_r+0xdc>
 8005c64:	2300      	movs	r3, #0
 8005c66:	6053      	str	r3, [r2, #4]
 8005c68:	e7de      	b.n	8005c28 <_malloc_r+0xa8>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f000 f80c 	bl	8005c8c <__malloc_unlock>
 8005c74:	e794      	b.n	8005ba0 <_malloc_r+0x20>
 8005c76:	6005      	str	r5, [r0, #0]
 8005c78:	e7d6      	b.n	8005c28 <_malloc_r+0xa8>
 8005c7a:	bf00      	nop
 8005c7c:	2000043c 	.word	0x2000043c

08005c80 <__malloc_lock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	@ (8005c88 <__malloc_lock+0x8>)
 8005c82:	f7ff b8a8 	b.w	8004dd6 <__retarget_lock_acquire_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000434 	.word	0x20000434

08005c8c <__malloc_unlock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	@ (8005c94 <__malloc_unlock+0x8>)
 8005c8e:	f7ff b8a3 	b.w	8004dd8 <__retarget_lock_release_recursive>
 8005c92:	bf00      	nop
 8005c94:	20000434 	.word	0x20000434

08005c98 <_Balloc>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	69c6      	ldr	r6, [r0, #28]
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	b976      	cbnz	r6, 8005cc0 <_Balloc+0x28>
 8005ca2:	2010      	movs	r0, #16
 8005ca4:	f7ff ff42 	bl	8005b2c <malloc>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	61e0      	str	r0, [r4, #28]
 8005cac:	b920      	cbnz	r0, 8005cb8 <_Balloc+0x20>
 8005cae:	4b18      	ldr	r3, [pc, #96]	@ (8005d10 <_Balloc+0x78>)
 8005cb0:	4818      	ldr	r0, [pc, #96]	@ (8005d14 <_Balloc+0x7c>)
 8005cb2:	216b      	movs	r1, #107	@ 0x6b
 8005cb4:	f001 ff4c 	bl	8007b50 <__assert_func>
 8005cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cbc:	6006      	str	r6, [r0, #0]
 8005cbe:	60c6      	str	r6, [r0, #12]
 8005cc0:	69e6      	ldr	r6, [r4, #28]
 8005cc2:	68f3      	ldr	r3, [r6, #12]
 8005cc4:	b183      	cbz	r3, 8005ce8 <_Balloc+0x50>
 8005cc6:	69e3      	ldr	r3, [r4, #28]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cce:	b9b8      	cbnz	r0, 8005d00 <_Balloc+0x68>
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005cd6:	1d72      	adds	r2, r6, #5
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f001 ff56 	bl	8007b8c <_calloc_r>
 8005ce0:	b160      	cbz	r0, 8005cfc <_Balloc+0x64>
 8005ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ce6:	e00e      	b.n	8005d06 <_Balloc+0x6e>
 8005ce8:	2221      	movs	r2, #33	@ 0x21
 8005cea:	2104      	movs	r1, #4
 8005cec:	4620      	mov	r0, r4
 8005cee:	f001 ff4d 	bl	8007b8c <_calloc_r>
 8005cf2:	69e3      	ldr	r3, [r4, #28]
 8005cf4:	60f0      	str	r0, [r6, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e4      	bne.n	8005cc6 <_Balloc+0x2e>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	6802      	ldr	r2, [r0, #0]
 8005d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d06:	2300      	movs	r3, #0
 8005d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d0c:	e7f7      	b.n	8005cfe <_Balloc+0x66>
 8005d0e:	bf00      	nop
 8005d10:	0800857a 	.word	0x0800857a
 8005d14:	080085fa 	.word	0x080085fa

08005d18 <_Bfree>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	69c6      	ldr	r6, [r0, #28]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b976      	cbnz	r6, 8005d40 <_Bfree+0x28>
 8005d22:	2010      	movs	r0, #16
 8005d24:	f7ff ff02 	bl	8005b2c <malloc>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	61e8      	str	r0, [r5, #28]
 8005d2c:	b920      	cbnz	r0, 8005d38 <_Bfree+0x20>
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <_Bfree+0x3c>)
 8005d30:	4809      	ldr	r0, [pc, #36]	@ (8005d58 <_Bfree+0x40>)
 8005d32:	218f      	movs	r1, #143	@ 0x8f
 8005d34:	f001 ff0c 	bl	8007b50 <__assert_func>
 8005d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d3c:	6006      	str	r6, [r0, #0]
 8005d3e:	60c6      	str	r6, [r0, #12]
 8005d40:	b13c      	cbz	r4, 8005d52 <_Bfree+0x3a>
 8005d42:	69eb      	ldr	r3, [r5, #28]
 8005d44:	6862      	ldr	r2, [r4, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d4c:	6021      	str	r1, [r4, #0]
 8005d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	0800857a 	.word	0x0800857a
 8005d58:	080085fa 	.word	0x080085fa

08005d5c <__multadd>:
 8005d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	690d      	ldr	r5, [r1, #16]
 8005d62:	4607      	mov	r7, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	461e      	mov	r6, r3
 8005d68:	f101 0c14 	add.w	ip, r1, #20
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005d72:	b299      	uxth	r1, r3
 8005d74:	fb02 6101 	mla	r1, r2, r1, r6
 8005d78:	0c1e      	lsrs	r6, r3, #16
 8005d7a:	0c0b      	lsrs	r3, r1, #16
 8005d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8005d80:	b289      	uxth	r1, r1
 8005d82:	3001      	adds	r0, #1
 8005d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d88:	4285      	cmp	r5, r0
 8005d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d92:	dcec      	bgt.n	8005d6e <__multadd+0x12>
 8005d94:	b30e      	cbz	r6, 8005dda <__multadd+0x7e>
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dc19      	bgt.n	8005dd0 <__multadd+0x74>
 8005d9c:	6861      	ldr	r1, [r4, #4]
 8005d9e:	4638      	mov	r0, r7
 8005da0:	3101      	adds	r1, #1
 8005da2:	f7ff ff79 	bl	8005c98 <_Balloc>
 8005da6:	4680      	mov	r8, r0
 8005da8:	b928      	cbnz	r0, 8005db6 <__multadd+0x5a>
 8005daa:	4602      	mov	r2, r0
 8005dac:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <__multadd+0x84>)
 8005dae:	480d      	ldr	r0, [pc, #52]	@ (8005de4 <__multadd+0x88>)
 8005db0:	21ba      	movs	r1, #186	@ 0xba
 8005db2:	f001 fecd 	bl	8007b50 <__assert_func>
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	3202      	adds	r2, #2
 8005dba:	f104 010c 	add.w	r1, r4, #12
 8005dbe:	0092      	lsls	r2, r2, #2
 8005dc0:	300c      	adds	r0, #12
 8005dc2:	f001 fead 	bl	8007b20 <memcpy>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4638      	mov	r0, r7
 8005dca:	f7ff ffa5 	bl	8005d18 <_Bfree>
 8005dce:	4644      	mov	r4, r8
 8005dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	615e      	str	r6, [r3, #20]
 8005dd8:	6125      	str	r5, [r4, #16]
 8005dda:	4620      	mov	r0, r4
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de0:	080085e9 	.word	0x080085e9
 8005de4:	080085fa 	.word	0x080085fa

08005de8 <__s2b>:
 8005de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dec:	460c      	mov	r4, r1
 8005dee:	4615      	mov	r5, r2
 8005df0:	461f      	mov	r7, r3
 8005df2:	2209      	movs	r2, #9
 8005df4:	3308      	adds	r3, #8
 8005df6:	4606      	mov	r6, r0
 8005df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2201      	movs	r2, #1
 8005e00:	429a      	cmp	r2, r3
 8005e02:	db09      	blt.n	8005e18 <__s2b+0x30>
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff ff47 	bl	8005c98 <_Balloc>
 8005e0a:	b940      	cbnz	r0, 8005e1e <__s2b+0x36>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b19      	ldr	r3, [pc, #100]	@ (8005e74 <__s2b+0x8c>)
 8005e10:	4819      	ldr	r0, [pc, #100]	@ (8005e78 <__s2b+0x90>)
 8005e12:	21d3      	movs	r1, #211	@ 0xd3
 8005e14:	f001 fe9c 	bl	8007b50 <__assert_func>
 8005e18:	0052      	lsls	r2, r2, #1
 8005e1a:	3101      	adds	r1, #1
 8005e1c:	e7f0      	b.n	8005e00 <__s2b+0x18>
 8005e1e:	9b08      	ldr	r3, [sp, #32]
 8005e20:	6143      	str	r3, [r0, #20]
 8005e22:	2d09      	cmp	r5, #9
 8005e24:	f04f 0301 	mov.w	r3, #1
 8005e28:	6103      	str	r3, [r0, #16]
 8005e2a:	dd16      	ble.n	8005e5a <__s2b+0x72>
 8005e2c:	f104 0909 	add.w	r9, r4, #9
 8005e30:	46c8      	mov	r8, r9
 8005e32:	442c      	add	r4, r5
 8005e34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e38:	4601      	mov	r1, r0
 8005e3a:	3b30      	subs	r3, #48	@ 0x30
 8005e3c:	220a      	movs	r2, #10
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7ff ff8c 	bl	8005d5c <__multadd>
 8005e44:	45a0      	cmp	r8, r4
 8005e46:	d1f5      	bne.n	8005e34 <__s2b+0x4c>
 8005e48:	f1a5 0408 	sub.w	r4, r5, #8
 8005e4c:	444c      	add	r4, r9
 8005e4e:	1b2d      	subs	r5, r5, r4
 8005e50:	1963      	adds	r3, r4, r5
 8005e52:	42bb      	cmp	r3, r7
 8005e54:	db04      	blt.n	8005e60 <__s2b+0x78>
 8005e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5a:	340a      	adds	r4, #10
 8005e5c:	2509      	movs	r5, #9
 8005e5e:	e7f6      	b.n	8005e4e <__s2b+0x66>
 8005e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e64:	4601      	mov	r1, r0
 8005e66:	3b30      	subs	r3, #48	@ 0x30
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f7ff ff76 	bl	8005d5c <__multadd>
 8005e70:	e7ee      	b.n	8005e50 <__s2b+0x68>
 8005e72:	bf00      	nop
 8005e74:	080085e9 	.word	0x080085e9
 8005e78:	080085fa 	.word	0x080085fa

08005e7c <__hi0bits>:
 8005e7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e80:	4603      	mov	r3, r0
 8005e82:	bf36      	itet	cc
 8005e84:	0403      	lslcc	r3, r0, #16
 8005e86:	2000      	movcs	r0, #0
 8005e88:	2010      	movcc	r0, #16
 8005e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e8e:	bf3c      	itt	cc
 8005e90:	021b      	lslcc	r3, r3, #8
 8005e92:	3008      	addcc	r0, #8
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e98:	bf3c      	itt	cc
 8005e9a:	011b      	lslcc	r3, r3, #4
 8005e9c:	3004      	addcc	r0, #4
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	bf3c      	itt	cc
 8005ea4:	009b      	lslcc	r3, r3, #2
 8005ea6:	3002      	addcc	r0, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db05      	blt.n	8005eb8 <__hi0bits+0x3c>
 8005eac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005eb0:	f100 0001 	add.w	r0, r0, #1
 8005eb4:	bf08      	it	eq
 8005eb6:	2020      	moveq	r0, #32
 8005eb8:	4770      	bx	lr

08005eba <__lo0bits>:
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f013 0007 	ands.w	r0, r3, #7
 8005ec2:	d00b      	beq.n	8005edc <__lo0bits+0x22>
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	d421      	bmi.n	8005f0c <__lo0bits+0x52>
 8005ec8:	0798      	lsls	r0, r3, #30
 8005eca:	bf49      	itett	mi
 8005ecc:	085b      	lsrmi	r3, r3, #1
 8005ece:	089b      	lsrpl	r3, r3, #2
 8005ed0:	2001      	movmi	r0, #1
 8005ed2:	6013      	strmi	r3, [r2, #0]
 8005ed4:	bf5c      	itt	pl
 8005ed6:	6013      	strpl	r3, [r2, #0]
 8005ed8:	2002      	movpl	r0, #2
 8005eda:	4770      	bx	lr
 8005edc:	b299      	uxth	r1, r3
 8005ede:	b909      	cbnz	r1, 8005ee4 <__lo0bits+0x2a>
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	b2d9      	uxtb	r1, r3
 8005ee6:	b909      	cbnz	r1, 8005eec <__lo0bits+0x32>
 8005ee8:	3008      	adds	r0, #8
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	0719      	lsls	r1, r3, #28
 8005eee:	bf04      	itt	eq
 8005ef0:	091b      	lsreq	r3, r3, #4
 8005ef2:	3004      	addeq	r0, #4
 8005ef4:	0799      	lsls	r1, r3, #30
 8005ef6:	bf04      	itt	eq
 8005ef8:	089b      	lsreq	r3, r3, #2
 8005efa:	3002      	addeq	r0, #2
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	d403      	bmi.n	8005f08 <__lo0bits+0x4e>
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	f100 0001 	add.w	r0, r0, #1
 8005f06:	d003      	beq.n	8005f10 <__lo0bits+0x56>
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4770      	bx	lr
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr
 8005f10:	2020      	movs	r0, #32
 8005f12:	4770      	bx	lr

08005f14 <__i2b>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	2101      	movs	r1, #1
 8005f1a:	f7ff febd 	bl	8005c98 <_Balloc>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	b928      	cbnz	r0, 8005f2e <__i2b+0x1a>
 8005f22:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <__i2b+0x24>)
 8005f24:	4805      	ldr	r0, [pc, #20]	@ (8005f3c <__i2b+0x28>)
 8005f26:	f240 1145 	movw	r1, #325	@ 0x145
 8005f2a:	f001 fe11 	bl	8007b50 <__assert_func>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	6144      	str	r4, [r0, #20]
 8005f32:	6103      	str	r3, [r0, #16]
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	080085e9 	.word	0x080085e9
 8005f3c:	080085fa 	.word	0x080085fa

08005f40 <__multiply>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4617      	mov	r7, r2
 8005f46:	690a      	ldr	r2, [r1, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bfa8      	it	ge
 8005f4e:	463b      	movge	r3, r7
 8005f50:	4689      	mov	r9, r1
 8005f52:	bfa4      	itt	ge
 8005f54:	460f      	movge	r7, r1
 8005f56:	4699      	movge	r9, r3
 8005f58:	693d      	ldr	r5, [r7, #16]
 8005f5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	eb05 060a 	add.w	r6, r5, sl
 8005f66:	42b3      	cmp	r3, r6
 8005f68:	b085      	sub	sp, #20
 8005f6a:	bfb8      	it	lt
 8005f6c:	3101      	addlt	r1, #1
 8005f6e:	f7ff fe93 	bl	8005c98 <_Balloc>
 8005f72:	b930      	cbnz	r0, 8005f82 <__multiply+0x42>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b41      	ldr	r3, [pc, #260]	@ (800607c <__multiply+0x13c>)
 8005f78:	4841      	ldr	r0, [pc, #260]	@ (8006080 <__multiply+0x140>)
 8005f7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f7e:	f001 fde7 	bl	8007b50 <__assert_func>
 8005f82:	f100 0414 	add.w	r4, r0, #20
 8005f86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4573      	cmp	r3, lr
 8005f90:	d320      	bcc.n	8005fd4 <__multiply+0x94>
 8005f92:	f107 0814 	add.w	r8, r7, #20
 8005f96:	f109 0114 	add.w	r1, r9, #20
 8005f9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005f9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005fa2:	9302      	str	r3, [sp, #8]
 8005fa4:	1beb      	subs	r3, r5, r7
 8005fa6:	3b15      	subs	r3, #21
 8005fa8:	f023 0303 	bic.w	r3, r3, #3
 8005fac:	3304      	adds	r3, #4
 8005fae:	3715      	adds	r7, #21
 8005fb0:	42bd      	cmp	r5, r7
 8005fb2:	bf38      	it	cc
 8005fb4:	2304      	movcc	r3, #4
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	9103      	str	r1, [sp, #12]
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d80c      	bhi.n	8005fda <__multiply+0x9a>
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	dd03      	ble.n	8005fcc <__multiply+0x8c>
 8005fc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d055      	beq.n	8006078 <__multiply+0x138>
 8005fcc:	6106      	str	r6, [r0, #16]
 8005fce:	b005      	add	sp, #20
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	f843 2b04 	str.w	r2, [r3], #4
 8005fd8:	e7d9      	b.n	8005f8e <__multiply+0x4e>
 8005fda:	f8b1 a000 	ldrh.w	sl, [r1]
 8005fde:	f1ba 0f00 	cmp.w	sl, #0
 8005fe2:	d01f      	beq.n	8006024 <__multiply+0xe4>
 8005fe4:	46c4      	mov	ip, r8
 8005fe6:	46a1      	mov	r9, r4
 8005fe8:	2700      	movs	r7, #0
 8005fea:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005fee:	f8d9 3000 	ldr.w	r3, [r9]
 8005ff2:	fa1f fb82 	uxth.w	fp, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ffc:	443b      	add	r3, r7
 8005ffe:	f8d9 7000 	ldr.w	r7, [r9]
 8006002:	0c12      	lsrs	r2, r2, #16
 8006004:	0c3f      	lsrs	r7, r7, #16
 8006006:	fb0a 7202 	mla	r2, sl, r2, r7
 800600a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800600e:	b29b      	uxth	r3, r3
 8006010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006014:	4565      	cmp	r5, ip
 8006016:	f849 3b04 	str.w	r3, [r9], #4
 800601a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800601e:	d8e4      	bhi.n	8005fea <__multiply+0xaa>
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	50e7      	str	r7, [r4, r3]
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800602a:	3104      	adds	r1, #4
 800602c:	f1b9 0f00 	cmp.w	r9, #0
 8006030:	d020      	beq.n	8006074 <__multiply+0x134>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	4647      	mov	r7, r8
 8006036:	46a4      	mov	ip, r4
 8006038:	f04f 0a00 	mov.w	sl, #0
 800603c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006040:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006044:	fb09 220b 	mla	r2, r9, fp, r2
 8006048:	4452      	add	r2, sl
 800604a:	b29b      	uxth	r3, r3
 800604c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006050:	f84c 3b04 	str.w	r3, [ip], #4
 8006054:	f857 3b04 	ldr.w	r3, [r7], #4
 8006058:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800605c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006060:	fb09 330a 	mla	r3, r9, sl, r3
 8006064:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006068:	42bd      	cmp	r5, r7
 800606a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800606e:	d8e5      	bhi.n	800603c <__multiply+0xfc>
 8006070:	9a01      	ldr	r2, [sp, #4]
 8006072:	50a3      	str	r3, [r4, r2]
 8006074:	3404      	adds	r4, #4
 8006076:	e79f      	b.n	8005fb8 <__multiply+0x78>
 8006078:	3e01      	subs	r6, #1
 800607a:	e7a1      	b.n	8005fc0 <__multiply+0x80>
 800607c:	080085e9 	.word	0x080085e9
 8006080:	080085fa 	.word	0x080085fa

08006084 <__pow5mult>:
 8006084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006088:	4615      	mov	r5, r2
 800608a:	f012 0203 	ands.w	r2, r2, #3
 800608e:	4607      	mov	r7, r0
 8006090:	460e      	mov	r6, r1
 8006092:	d007      	beq.n	80060a4 <__pow5mult+0x20>
 8006094:	4c25      	ldr	r4, [pc, #148]	@ (800612c <__pow5mult+0xa8>)
 8006096:	3a01      	subs	r2, #1
 8006098:	2300      	movs	r3, #0
 800609a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800609e:	f7ff fe5d 	bl	8005d5c <__multadd>
 80060a2:	4606      	mov	r6, r0
 80060a4:	10ad      	asrs	r5, r5, #2
 80060a6:	d03d      	beq.n	8006124 <__pow5mult+0xa0>
 80060a8:	69fc      	ldr	r4, [r7, #28]
 80060aa:	b97c      	cbnz	r4, 80060cc <__pow5mult+0x48>
 80060ac:	2010      	movs	r0, #16
 80060ae:	f7ff fd3d 	bl	8005b2c <malloc>
 80060b2:	4602      	mov	r2, r0
 80060b4:	61f8      	str	r0, [r7, #28]
 80060b6:	b928      	cbnz	r0, 80060c4 <__pow5mult+0x40>
 80060b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006130 <__pow5mult+0xac>)
 80060ba:	481e      	ldr	r0, [pc, #120]	@ (8006134 <__pow5mult+0xb0>)
 80060bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060c0:	f001 fd46 	bl	8007b50 <__assert_func>
 80060c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060c8:	6004      	str	r4, [r0, #0]
 80060ca:	60c4      	str	r4, [r0, #12]
 80060cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80060d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060d4:	b94c      	cbnz	r4, 80060ea <__pow5mult+0x66>
 80060d6:	f240 2171 	movw	r1, #625	@ 0x271
 80060da:	4638      	mov	r0, r7
 80060dc:	f7ff ff1a 	bl	8005f14 <__i2b>
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80060e6:	4604      	mov	r4, r0
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	f04f 0900 	mov.w	r9, #0
 80060ee:	07eb      	lsls	r3, r5, #31
 80060f0:	d50a      	bpl.n	8006108 <__pow5mult+0x84>
 80060f2:	4631      	mov	r1, r6
 80060f4:	4622      	mov	r2, r4
 80060f6:	4638      	mov	r0, r7
 80060f8:	f7ff ff22 	bl	8005f40 <__multiply>
 80060fc:	4631      	mov	r1, r6
 80060fe:	4680      	mov	r8, r0
 8006100:	4638      	mov	r0, r7
 8006102:	f7ff fe09 	bl	8005d18 <_Bfree>
 8006106:	4646      	mov	r6, r8
 8006108:	106d      	asrs	r5, r5, #1
 800610a:	d00b      	beq.n	8006124 <__pow5mult+0xa0>
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	b938      	cbnz	r0, 8006120 <__pow5mult+0x9c>
 8006110:	4622      	mov	r2, r4
 8006112:	4621      	mov	r1, r4
 8006114:	4638      	mov	r0, r7
 8006116:	f7ff ff13 	bl	8005f40 <__multiply>
 800611a:	6020      	str	r0, [r4, #0]
 800611c:	f8c0 9000 	str.w	r9, [r0]
 8006120:	4604      	mov	r4, r0
 8006122:	e7e4      	b.n	80060ee <__pow5mult+0x6a>
 8006124:	4630      	mov	r0, r6
 8006126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612a:	bf00      	nop
 800612c:	0800870c 	.word	0x0800870c
 8006130:	0800857a 	.word	0x0800857a
 8006134:	080085fa 	.word	0x080085fa

08006138 <__lshift>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	460c      	mov	r4, r1
 800613e:	6849      	ldr	r1, [r1, #4]
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	4607      	mov	r7, r0
 800614a:	4691      	mov	r9, r2
 800614c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006150:	f108 0601 	add.w	r6, r8, #1
 8006154:	42b3      	cmp	r3, r6
 8006156:	db0b      	blt.n	8006170 <__lshift+0x38>
 8006158:	4638      	mov	r0, r7
 800615a:	f7ff fd9d 	bl	8005c98 <_Balloc>
 800615e:	4605      	mov	r5, r0
 8006160:	b948      	cbnz	r0, 8006176 <__lshift+0x3e>
 8006162:	4602      	mov	r2, r0
 8006164:	4b28      	ldr	r3, [pc, #160]	@ (8006208 <__lshift+0xd0>)
 8006166:	4829      	ldr	r0, [pc, #164]	@ (800620c <__lshift+0xd4>)
 8006168:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800616c:	f001 fcf0 	bl	8007b50 <__assert_func>
 8006170:	3101      	adds	r1, #1
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	e7ee      	b.n	8006154 <__lshift+0x1c>
 8006176:	2300      	movs	r3, #0
 8006178:	f100 0114 	add.w	r1, r0, #20
 800617c:	f100 0210 	add.w	r2, r0, #16
 8006180:	4618      	mov	r0, r3
 8006182:	4553      	cmp	r3, sl
 8006184:	db33      	blt.n	80061ee <__lshift+0xb6>
 8006186:	6920      	ldr	r0, [r4, #16]
 8006188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800618c:	f104 0314 	add.w	r3, r4, #20
 8006190:	f019 091f 	ands.w	r9, r9, #31
 8006194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800619c:	d02b      	beq.n	80061f6 <__lshift+0xbe>
 800619e:	f1c9 0e20 	rsb	lr, r9, #32
 80061a2:	468a      	mov	sl, r1
 80061a4:	2200      	movs	r2, #0
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	fa00 f009 	lsl.w	r0, r0, r9
 80061ac:	4310      	orrs	r0, r2
 80061ae:	f84a 0b04 	str.w	r0, [sl], #4
 80061b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b6:	459c      	cmp	ip, r3
 80061b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80061bc:	d8f3      	bhi.n	80061a6 <__lshift+0x6e>
 80061be:	ebac 0304 	sub.w	r3, ip, r4
 80061c2:	3b15      	subs	r3, #21
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	3304      	adds	r3, #4
 80061ca:	f104 0015 	add.w	r0, r4, #21
 80061ce:	4560      	cmp	r0, ip
 80061d0:	bf88      	it	hi
 80061d2:	2304      	movhi	r3, #4
 80061d4:	50ca      	str	r2, [r1, r3]
 80061d6:	b10a      	cbz	r2, 80061dc <__lshift+0xa4>
 80061d8:	f108 0602 	add.w	r6, r8, #2
 80061dc:	3e01      	subs	r6, #1
 80061de:	4638      	mov	r0, r7
 80061e0:	612e      	str	r6, [r5, #16]
 80061e2:	4621      	mov	r1, r4
 80061e4:	f7ff fd98 	bl	8005d18 <_Bfree>
 80061e8:	4628      	mov	r0, r5
 80061ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80061f2:	3301      	adds	r3, #1
 80061f4:	e7c5      	b.n	8006182 <__lshift+0x4a>
 80061f6:	3904      	subs	r1, #4
 80061f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006200:	459c      	cmp	ip, r3
 8006202:	d8f9      	bhi.n	80061f8 <__lshift+0xc0>
 8006204:	e7ea      	b.n	80061dc <__lshift+0xa4>
 8006206:	bf00      	nop
 8006208:	080085e9 	.word	0x080085e9
 800620c:	080085fa 	.word	0x080085fa

08006210 <__mcmp>:
 8006210:	690a      	ldr	r2, [r1, #16]
 8006212:	4603      	mov	r3, r0
 8006214:	6900      	ldr	r0, [r0, #16]
 8006216:	1a80      	subs	r0, r0, r2
 8006218:	b530      	push	{r4, r5, lr}
 800621a:	d10e      	bne.n	800623a <__mcmp+0x2a>
 800621c:	3314      	adds	r3, #20
 800621e:	3114      	adds	r1, #20
 8006220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800622c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006230:	4295      	cmp	r5, r2
 8006232:	d003      	beq.n	800623c <__mcmp+0x2c>
 8006234:	d205      	bcs.n	8006242 <__mcmp+0x32>
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	bd30      	pop	{r4, r5, pc}
 800623c:	42a3      	cmp	r3, r4
 800623e:	d3f3      	bcc.n	8006228 <__mcmp+0x18>
 8006240:	e7fb      	b.n	800623a <__mcmp+0x2a>
 8006242:	2001      	movs	r0, #1
 8006244:	e7f9      	b.n	800623a <__mcmp+0x2a>
	...

08006248 <__mdiff>:
 8006248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	4689      	mov	r9, r1
 800624e:	4606      	mov	r6, r0
 8006250:	4611      	mov	r1, r2
 8006252:	4648      	mov	r0, r9
 8006254:	4614      	mov	r4, r2
 8006256:	f7ff ffdb 	bl	8006210 <__mcmp>
 800625a:	1e05      	subs	r5, r0, #0
 800625c:	d112      	bne.n	8006284 <__mdiff+0x3c>
 800625e:	4629      	mov	r1, r5
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff fd19 	bl	8005c98 <_Balloc>
 8006266:	4602      	mov	r2, r0
 8006268:	b928      	cbnz	r0, 8006276 <__mdiff+0x2e>
 800626a:	4b3f      	ldr	r3, [pc, #252]	@ (8006368 <__mdiff+0x120>)
 800626c:	f240 2137 	movw	r1, #567	@ 0x237
 8006270:	483e      	ldr	r0, [pc, #248]	@ (800636c <__mdiff+0x124>)
 8006272:	f001 fc6d 	bl	8007b50 <__assert_func>
 8006276:	2301      	movs	r3, #1
 8006278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800627c:	4610      	mov	r0, r2
 800627e:	b003      	add	sp, #12
 8006280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006284:	bfbc      	itt	lt
 8006286:	464b      	movlt	r3, r9
 8006288:	46a1      	movlt	r9, r4
 800628a:	4630      	mov	r0, r6
 800628c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006290:	bfba      	itte	lt
 8006292:	461c      	movlt	r4, r3
 8006294:	2501      	movlt	r5, #1
 8006296:	2500      	movge	r5, #0
 8006298:	f7ff fcfe 	bl	8005c98 <_Balloc>
 800629c:	4602      	mov	r2, r0
 800629e:	b918      	cbnz	r0, 80062a8 <__mdiff+0x60>
 80062a0:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <__mdiff+0x120>)
 80062a2:	f240 2145 	movw	r1, #581	@ 0x245
 80062a6:	e7e3      	b.n	8006270 <__mdiff+0x28>
 80062a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062ac:	6926      	ldr	r6, [r4, #16]
 80062ae:	60c5      	str	r5, [r0, #12]
 80062b0:	f109 0310 	add.w	r3, r9, #16
 80062b4:	f109 0514 	add.w	r5, r9, #20
 80062b8:	f104 0e14 	add.w	lr, r4, #20
 80062bc:	f100 0b14 	add.w	fp, r0, #20
 80062c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80062c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	46d9      	mov	r9, fp
 80062cc:	f04f 0c00 	mov.w	ip, #0
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80062d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	fa1f f38a 	uxth.w	r3, sl
 80062e0:	4619      	mov	r1, r3
 80062e2:	b283      	uxth	r3, r0
 80062e4:	1acb      	subs	r3, r1, r3
 80062e6:	0c00      	lsrs	r0, r0, #16
 80062e8:	4463      	add	r3, ip
 80062ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80062ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80062f8:	4576      	cmp	r6, lr
 80062fa:	f849 3b04 	str.w	r3, [r9], #4
 80062fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006302:	d8e5      	bhi.n	80062d0 <__mdiff+0x88>
 8006304:	1b33      	subs	r3, r6, r4
 8006306:	3b15      	subs	r3, #21
 8006308:	f023 0303 	bic.w	r3, r3, #3
 800630c:	3415      	adds	r4, #21
 800630e:	3304      	adds	r3, #4
 8006310:	42a6      	cmp	r6, r4
 8006312:	bf38      	it	cc
 8006314:	2304      	movcc	r3, #4
 8006316:	441d      	add	r5, r3
 8006318:	445b      	add	r3, fp
 800631a:	461e      	mov	r6, r3
 800631c:	462c      	mov	r4, r5
 800631e:	4544      	cmp	r4, r8
 8006320:	d30e      	bcc.n	8006340 <__mdiff+0xf8>
 8006322:	f108 0103 	add.w	r1, r8, #3
 8006326:	1b49      	subs	r1, r1, r5
 8006328:	f021 0103 	bic.w	r1, r1, #3
 800632c:	3d03      	subs	r5, #3
 800632e:	45a8      	cmp	r8, r5
 8006330:	bf38      	it	cc
 8006332:	2100      	movcc	r1, #0
 8006334:	440b      	add	r3, r1
 8006336:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800633a:	b191      	cbz	r1, 8006362 <__mdiff+0x11a>
 800633c:	6117      	str	r7, [r2, #16]
 800633e:	e79d      	b.n	800627c <__mdiff+0x34>
 8006340:	f854 1b04 	ldr.w	r1, [r4], #4
 8006344:	46e6      	mov	lr, ip
 8006346:	0c08      	lsrs	r0, r1, #16
 8006348:	fa1c fc81 	uxtah	ip, ip, r1
 800634c:	4471      	add	r1, lr
 800634e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006352:	b289      	uxth	r1, r1
 8006354:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006358:	f846 1b04 	str.w	r1, [r6], #4
 800635c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006360:	e7dd      	b.n	800631e <__mdiff+0xd6>
 8006362:	3f01      	subs	r7, #1
 8006364:	e7e7      	b.n	8006336 <__mdiff+0xee>
 8006366:	bf00      	nop
 8006368:	080085e9 	.word	0x080085e9
 800636c:	080085fa 	.word	0x080085fa

08006370 <__ulp>:
 8006370:	b082      	sub	sp, #8
 8006372:	ed8d 0b00 	vstr	d0, [sp]
 8006376:	9a01      	ldr	r2, [sp, #4]
 8006378:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <__ulp+0x48>)
 800637a:	4013      	ands	r3, r2
 800637c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006380:	2b00      	cmp	r3, #0
 8006382:	dc08      	bgt.n	8006396 <__ulp+0x26>
 8006384:	425b      	negs	r3, r3
 8006386:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800638a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800638e:	da04      	bge.n	800639a <__ulp+0x2a>
 8006390:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006394:	4113      	asrs	r3, r2
 8006396:	2200      	movs	r2, #0
 8006398:	e008      	b.n	80063ac <__ulp+0x3c>
 800639a:	f1a2 0314 	sub.w	r3, r2, #20
 800639e:	2b1e      	cmp	r3, #30
 80063a0:	bfda      	itte	le
 80063a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80063a6:	40da      	lsrle	r2, r3
 80063a8:	2201      	movgt	r2, #1
 80063aa:	2300      	movs	r3, #0
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	ec41 0b10 	vmov	d0, r0, r1
 80063b4:	b002      	add	sp, #8
 80063b6:	4770      	bx	lr
 80063b8:	7ff00000 	.word	0x7ff00000

080063bc <__b2d>:
 80063bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c0:	6906      	ldr	r6, [r0, #16]
 80063c2:	f100 0814 	add.w	r8, r0, #20
 80063c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80063ca:	1f37      	subs	r7, r6, #4
 80063cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7ff fd53 	bl	8005e7c <__hi0bits>
 80063d6:	f1c0 0320 	rsb	r3, r0, #32
 80063da:	280a      	cmp	r0, #10
 80063dc:	600b      	str	r3, [r1, #0]
 80063de:	491b      	ldr	r1, [pc, #108]	@ (800644c <__b2d+0x90>)
 80063e0:	dc15      	bgt.n	800640e <__b2d+0x52>
 80063e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80063e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80063ea:	45b8      	cmp	r8, r7
 80063ec:	ea43 0501 	orr.w	r5, r3, r1
 80063f0:	bf34      	ite	cc
 80063f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80063f6:	2300      	movcs	r3, #0
 80063f8:	3015      	adds	r0, #21
 80063fa:	fa02 f000 	lsl.w	r0, r2, r0
 80063fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8006402:	4303      	orrs	r3, r0
 8006404:	461c      	mov	r4, r3
 8006406:	ec45 4b10 	vmov	d0, r4, r5
 800640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640e:	45b8      	cmp	r8, r7
 8006410:	bf3a      	itte	cc
 8006412:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006416:	f1a6 0708 	subcc.w	r7, r6, #8
 800641a:	2300      	movcs	r3, #0
 800641c:	380b      	subs	r0, #11
 800641e:	d012      	beq.n	8006446 <__b2d+0x8a>
 8006420:	f1c0 0120 	rsb	r1, r0, #32
 8006424:	fa23 f401 	lsr.w	r4, r3, r1
 8006428:	4082      	lsls	r2, r0
 800642a:	4322      	orrs	r2, r4
 800642c:	4547      	cmp	r7, r8
 800642e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006432:	bf8c      	ite	hi
 8006434:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006438:	2200      	movls	r2, #0
 800643a:	4083      	lsls	r3, r0
 800643c:	40ca      	lsrs	r2, r1
 800643e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006442:	4313      	orrs	r3, r2
 8006444:	e7de      	b.n	8006404 <__b2d+0x48>
 8006446:	ea42 0501 	orr.w	r5, r2, r1
 800644a:	e7db      	b.n	8006404 <__b2d+0x48>
 800644c:	3ff00000 	.word	0x3ff00000

08006450 <__d2b>:
 8006450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006454:	460f      	mov	r7, r1
 8006456:	2101      	movs	r1, #1
 8006458:	ec59 8b10 	vmov	r8, r9, d0
 800645c:	4616      	mov	r6, r2
 800645e:	f7ff fc1b 	bl	8005c98 <_Balloc>
 8006462:	4604      	mov	r4, r0
 8006464:	b930      	cbnz	r0, 8006474 <__d2b+0x24>
 8006466:	4602      	mov	r2, r0
 8006468:	4b23      	ldr	r3, [pc, #140]	@ (80064f8 <__d2b+0xa8>)
 800646a:	4824      	ldr	r0, [pc, #144]	@ (80064fc <__d2b+0xac>)
 800646c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006470:	f001 fb6e 	bl	8007b50 <__assert_func>
 8006474:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800647c:	b10d      	cbz	r5, 8006482 <__d2b+0x32>
 800647e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	f1b8 0300 	subs.w	r3, r8, #0
 8006488:	d023      	beq.n	80064d2 <__d2b+0x82>
 800648a:	4668      	mov	r0, sp
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f7ff fd14 	bl	8005eba <__lo0bits>
 8006492:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006496:	b1d0      	cbz	r0, 80064ce <__d2b+0x7e>
 8006498:	f1c0 0320 	rsb	r3, r0, #32
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	430b      	orrs	r3, r1
 80064a2:	40c2      	lsrs	r2, r0
 80064a4:	6163      	str	r3, [r4, #20]
 80064a6:	9201      	str	r2, [sp, #4]
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	61a3      	str	r3, [r4, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2201      	moveq	r2, #1
 80064b2:	2202      	movne	r2, #2
 80064b4:	6122      	str	r2, [r4, #16]
 80064b6:	b1a5      	cbz	r5, 80064e2 <__d2b+0x92>
 80064b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80064bc:	4405      	add	r5, r0
 80064be:	603d      	str	r5, [r7, #0]
 80064c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80064c4:	6030      	str	r0, [r6, #0]
 80064c6:	4620      	mov	r0, r4
 80064c8:	b003      	add	sp, #12
 80064ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064ce:	6161      	str	r1, [r4, #20]
 80064d0:	e7ea      	b.n	80064a8 <__d2b+0x58>
 80064d2:	a801      	add	r0, sp, #4
 80064d4:	f7ff fcf1 	bl	8005eba <__lo0bits>
 80064d8:	9b01      	ldr	r3, [sp, #4]
 80064da:	6163      	str	r3, [r4, #20]
 80064dc:	3020      	adds	r0, #32
 80064de:	2201      	movs	r2, #1
 80064e0:	e7e8      	b.n	80064b4 <__d2b+0x64>
 80064e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80064ea:	6038      	str	r0, [r7, #0]
 80064ec:	6918      	ldr	r0, [r3, #16]
 80064ee:	f7ff fcc5 	bl	8005e7c <__hi0bits>
 80064f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064f6:	e7e5      	b.n	80064c4 <__d2b+0x74>
 80064f8:	080085e9 	.word	0x080085e9
 80064fc:	080085fa 	.word	0x080085fa

08006500 <__ratio>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	b085      	sub	sp, #20
 8006506:	e9cd 1000 	strd	r1, r0, [sp]
 800650a:	a902      	add	r1, sp, #8
 800650c:	f7ff ff56 	bl	80063bc <__b2d>
 8006510:	9800      	ldr	r0, [sp, #0]
 8006512:	a903      	add	r1, sp, #12
 8006514:	ec55 4b10 	vmov	r4, r5, d0
 8006518:	f7ff ff50 	bl	80063bc <__b2d>
 800651c:	9b01      	ldr	r3, [sp, #4]
 800651e:	6919      	ldr	r1, [r3, #16]
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	1ac9      	subs	r1, r1, r3
 8006526:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	ec5b ab10 	vmov	sl, fp, d0
 8006530:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006534:	2b00      	cmp	r3, #0
 8006536:	bfce      	itee	gt
 8006538:	462a      	movgt	r2, r5
 800653a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800653e:	465a      	movle	r2, fp
 8006540:	462f      	mov	r7, r5
 8006542:	46d9      	mov	r9, fp
 8006544:	bfcc      	ite	gt
 8006546:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800654a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800654e:	464b      	mov	r3, r9
 8006550:	4652      	mov	r2, sl
 8006552:	4620      	mov	r0, r4
 8006554:	4639      	mov	r1, r7
 8006556:	f7fa f999 	bl	800088c <__aeabi_ddiv>
 800655a:	ec41 0b10 	vmov	d0, r0, r1
 800655e:	b005      	add	sp, #20
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006564 <__copybits>:
 8006564:	3901      	subs	r1, #1
 8006566:	b570      	push	{r4, r5, r6, lr}
 8006568:	1149      	asrs	r1, r1, #5
 800656a:	6914      	ldr	r4, [r2, #16]
 800656c:	3101      	adds	r1, #1
 800656e:	f102 0314 	add.w	r3, r2, #20
 8006572:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800657a:	1f05      	subs	r5, r0, #4
 800657c:	42a3      	cmp	r3, r4
 800657e:	d30c      	bcc.n	800659a <__copybits+0x36>
 8006580:	1aa3      	subs	r3, r4, r2
 8006582:	3b11      	subs	r3, #17
 8006584:	f023 0303 	bic.w	r3, r3, #3
 8006588:	3211      	adds	r2, #17
 800658a:	42a2      	cmp	r2, r4
 800658c:	bf88      	it	hi
 800658e:	2300      	movhi	r3, #0
 8006590:	4418      	add	r0, r3
 8006592:	2300      	movs	r3, #0
 8006594:	4288      	cmp	r0, r1
 8006596:	d305      	bcc.n	80065a4 <__copybits+0x40>
 8006598:	bd70      	pop	{r4, r5, r6, pc}
 800659a:	f853 6b04 	ldr.w	r6, [r3], #4
 800659e:	f845 6f04 	str.w	r6, [r5, #4]!
 80065a2:	e7eb      	b.n	800657c <__copybits+0x18>
 80065a4:	f840 3b04 	str.w	r3, [r0], #4
 80065a8:	e7f4      	b.n	8006594 <__copybits+0x30>

080065aa <__any_on>:
 80065aa:	f100 0214 	add.w	r2, r0, #20
 80065ae:	6900      	ldr	r0, [r0, #16]
 80065b0:	114b      	asrs	r3, r1, #5
 80065b2:	4298      	cmp	r0, r3
 80065b4:	b510      	push	{r4, lr}
 80065b6:	db11      	blt.n	80065dc <__any_on+0x32>
 80065b8:	dd0a      	ble.n	80065d0 <__any_on+0x26>
 80065ba:	f011 011f 	ands.w	r1, r1, #31
 80065be:	d007      	beq.n	80065d0 <__any_on+0x26>
 80065c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065c4:	fa24 f001 	lsr.w	r0, r4, r1
 80065c8:	fa00 f101 	lsl.w	r1, r0, r1
 80065cc:	428c      	cmp	r4, r1
 80065ce:	d10b      	bne.n	80065e8 <__any_on+0x3e>
 80065d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d803      	bhi.n	80065e0 <__any_on+0x36>
 80065d8:	2000      	movs	r0, #0
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	4603      	mov	r3, r0
 80065de:	e7f7      	b.n	80065d0 <__any_on+0x26>
 80065e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065e4:	2900      	cmp	r1, #0
 80065e6:	d0f5      	beq.n	80065d4 <__any_on+0x2a>
 80065e8:	2001      	movs	r0, #1
 80065ea:	e7f6      	b.n	80065da <__any_on+0x30>

080065ec <sulp>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	ec45 4b10 	vmov	d0, r4, r5
 80065f6:	4616      	mov	r6, r2
 80065f8:	f7ff feba 	bl	8006370 <__ulp>
 80065fc:	ec51 0b10 	vmov	r0, r1, d0
 8006600:	b17e      	cbz	r6, 8006622 <sulp+0x36>
 8006602:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006606:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800660a:	2b00      	cmp	r3, #0
 800660c:	dd09      	ble.n	8006622 <sulp+0x36>
 800660e:	051b      	lsls	r3, r3, #20
 8006610:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006614:	2400      	movs	r4, #0
 8006616:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800661a:	4622      	mov	r2, r4
 800661c:	462b      	mov	r3, r5
 800661e:	f7fa f80b 	bl	8000638 <__aeabi_dmul>
 8006622:	ec41 0b10 	vmov	d0, r0, r1
 8006626:	bd70      	pop	{r4, r5, r6, pc}

08006628 <_strtod_l>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	b09f      	sub	sp, #124	@ 0x7c
 800662e:	460c      	mov	r4, r1
 8006630:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006632:	2200      	movs	r2, #0
 8006634:	921a      	str	r2, [sp, #104]	@ 0x68
 8006636:	9005      	str	r0, [sp, #20]
 8006638:	f04f 0a00 	mov.w	sl, #0
 800663c:	f04f 0b00 	mov.w	fp, #0
 8006640:	460a      	mov	r2, r1
 8006642:	9219      	str	r2, [sp, #100]	@ 0x64
 8006644:	7811      	ldrb	r1, [r2, #0]
 8006646:	292b      	cmp	r1, #43	@ 0x2b
 8006648:	d04a      	beq.n	80066e0 <_strtod_l+0xb8>
 800664a:	d838      	bhi.n	80066be <_strtod_l+0x96>
 800664c:	290d      	cmp	r1, #13
 800664e:	d832      	bhi.n	80066b6 <_strtod_l+0x8e>
 8006650:	2908      	cmp	r1, #8
 8006652:	d832      	bhi.n	80066ba <_strtod_l+0x92>
 8006654:	2900      	cmp	r1, #0
 8006656:	d03b      	beq.n	80066d0 <_strtod_l+0xa8>
 8006658:	2200      	movs	r2, #0
 800665a:	920e      	str	r2, [sp, #56]	@ 0x38
 800665c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800665e:	782a      	ldrb	r2, [r5, #0]
 8006660:	2a30      	cmp	r2, #48	@ 0x30
 8006662:	f040 80b2 	bne.w	80067ca <_strtod_l+0x1a2>
 8006666:	786a      	ldrb	r2, [r5, #1]
 8006668:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800666c:	2a58      	cmp	r2, #88	@ 0x58
 800666e:	d16e      	bne.n	800674e <_strtod_l+0x126>
 8006670:	9302      	str	r3, [sp, #8]
 8006672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	ab1a      	add	r3, sp, #104	@ 0x68
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	4a8f      	ldr	r2, [pc, #572]	@ (80068b8 <_strtod_l+0x290>)
 800667c:	9805      	ldr	r0, [sp, #20]
 800667e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006680:	a919      	add	r1, sp, #100	@ 0x64
 8006682:	f001 faff 	bl	8007c84 <__gethex>
 8006686:	f010 060f 	ands.w	r6, r0, #15
 800668a:	4604      	mov	r4, r0
 800668c:	d005      	beq.n	800669a <_strtod_l+0x72>
 800668e:	2e06      	cmp	r6, #6
 8006690:	d128      	bne.n	80066e4 <_strtod_l+0xbc>
 8006692:	3501      	adds	r5, #1
 8006694:	2300      	movs	r3, #0
 8006696:	9519      	str	r5, [sp, #100]	@ 0x64
 8006698:	930e      	str	r3, [sp, #56]	@ 0x38
 800669a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 858e 	bne.w	80071be <_strtod_l+0xb96>
 80066a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066a4:	b1cb      	cbz	r3, 80066da <_strtod_l+0xb2>
 80066a6:	4652      	mov	r2, sl
 80066a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80066ac:	ec43 2b10 	vmov	d0, r2, r3
 80066b0:	b01f      	add	sp, #124	@ 0x7c
 80066b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b6:	2920      	cmp	r1, #32
 80066b8:	d1ce      	bne.n	8006658 <_strtod_l+0x30>
 80066ba:	3201      	adds	r2, #1
 80066bc:	e7c1      	b.n	8006642 <_strtod_l+0x1a>
 80066be:	292d      	cmp	r1, #45	@ 0x2d
 80066c0:	d1ca      	bne.n	8006658 <_strtod_l+0x30>
 80066c2:	2101      	movs	r1, #1
 80066c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80066c6:	1c51      	adds	r1, r2, #1
 80066c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80066ca:	7852      	ldrb	r2, [r2, #1]
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	d1c5      	bne.n	800665c <_strtod_l+0x34>
 80066d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80066d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 8570 	bne.w	80071ba <_strtod_l+0xb92>
 80066da:	4652      	mov	r2, sl
 80066dc:	465b      	mov	r3, fp
 80066de:	e7e5      	b.n	80066ac <_strtod_l+0x84>
 80066e0:	2100      	movs	r1, #0
 80066e2:	e7ef      	b.n	80066c4 <_strtod_l+0x9c>
 80066e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80066e6:	b13a      	cbz	r2, 80066f8 <_strtod_l+0xd0>
 80066e8:	2135      	movs	r1, #53	@ 0x35
 80066ea:	a81c      	add	r0, sp, #112	@ 0x70
 80066ec:	f7ff ff3a 	bl	8006564 <__copybits>
 80066f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066f2:	9805      	ldr	r0, [sp, #20]
 80066f4:	f7ff fb10 	bl	8005d18 <_Bfree>
 80066f8:	3e01      	subs	r6, #1
 80066fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80066fc:	2e04      	cmp	r6, #4
 80066fe:	d806      	bhi.n	800670e <_strtod_l+0xe6>
 8006700:	e8df f006 	tbb	[pc, r6]
 8006704:	201d0314 	.word	0x201d0314
 8006708:	14          	.byte	0x14
 8006709:	00          	.byte	0x00
 800670a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800670e:	05e1      	lsls	r1, r4, #23
 8006710:	bf48      	it	mi
 8006712:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006716:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800671a:	0d1b      	lsrs	r3, r3, #20
 800671c:	051b      	lsls	r3, r3, #20
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1bb      	bne.n	800669a <_strtod_l+0x72>
 8006722:	f7fe fb2d 	bl	8004d80 <__errno>
 8006726:	2322      	movs	r3, #34	@ 0x22
 8006728:	6003      	str	r3, [r0, #0]
 800672a:	e7b6      	b.n	800669a <_strtod_l+0x72>
 800672c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006730:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006734:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006738:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800673c:	e7e7      	b.n	800670e <_strtod_l+0xe6>
 800673e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80068c0 <_strtod_l+0x298>
 8006742:	e7e4      	b.n	800670e <_strtod_l+0xe6>
 8006744:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006748:	f04f 3aff 	mov.w	sl, #4294967295
 800674c:	e7df      	b.n	800670e <_strtod_l+0xe6>
 800674e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	9219      	str	r2, [sp, #100]	@ 0x64
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b30      	cmp	r3, #48	@ 0x30
 8006758:	d0f9      	beq.n	800674e <_strtod_l+0x126>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d09d      	beq.n	800669a <_strtod_l+0x72>
 800675e:	2301      	movs	r3, #1
 8006760:	2700      	movs	r7, #0
 8006762:	9308      	str	r3, [sp, #32]
 8006764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006766:	930c      	str	r3, [sp, #48]	@ 0x30
 8006768:	970b      	str	r7, [sp, #44]	@ 0x2c
 800676a:	46b9      	mov	r9, r7
 800676c:	220a      	movs	r2, #10
 800676e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006770:	7805      	ldrb	r5, [r0, #0]
 8006772:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006776:	b2d9      	uxtb	r1, r3
 8006778:	2909      	cmp	r1, #9
 800677a:	d928      	bls.n	80067ce <_strtod_l+0x1a6>
 800677c:	494f      	ldr	r1, [pc, #316]	@ (80068bc <_strtod_l+0x294>)
 800677e:	2201      	movs	r2, #1
 8006780:	f001 f9ac 	bl	8007adc <strncmp>
 8006784:	2800      	cmp	r0, #0
 8006786:	d032      	beq.n	80067ee <_strtod_l+0x1c6>
 8006788:	2000      	movs	r0, #0
 800678a:	462a      	mov	r2, r5
 800678c:	900a      	str	r0, [sp, #40]	@ 0x28
 800678e:	464d      	mov	r5, r9
 8006790:	4603      	mov	r3, r0
 8006792:	2a65      	cmp	r2, #101	@ 0x65
 8006794:	d001      	beq.n	800679a <_strtod_l+0x172>
 8006796:	2a45      	cmp	r2, #69	@ 0x45
 8006798:	d114      	bne.n	80067c4 <_strtod_l+0x19c>
 800679a:	b91d      	cbnz	r5, 80067a4 <_strtod_l+0x17c>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	4302      	orrs	r2, r0
 80067a0:	d096      	beq.n	80066d0 <_strtod_l+0xa8>
 80067a2:	2500      	movs	r5, #0
 80067a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80067a6:	1c62      	adds	r2, r4, #1
 80067a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80067aa:	7862      	ldrb	r2, [r4, #1]
 80067ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80067ae:	d07a      	beq.n	80068a6 <_strtod_l+0x27e>
 80067b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80067b2:	d07e      	beq.n	80068b2 <_strtod_l+0x28a>
 80067b4:	f04f 0c00 	mov.w	ip, #0
 80067b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80067bc:	2909      	cmp	r1, #9
 80067be:	f240 8085 	bls.w	80068cc <_strtod_l+0x2a4>
 80067c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	e0a5      	b.n	8006916 <_strtod_l+0x2ee>
 80067ca:	2300      	movs	r3, #0
 80067cc:	e7c8      	b.n	8006760 <_strtod_l+0x138>
 80067ce:	f1b9 0f08 	cmp.w	r9, #8
 80067d2:	bfd8      	it	le
 80067d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80067d6:	f100 0001 	add.w	r0, r0, #1
 80067da:	bfda      	itte	le
 80067dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80067e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80067e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80067e6:	f109 0901 	add.w	r9, r9, #1
 80067ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80067ec:	e7bf      	b.n	800676e <_strtod_l+0x146>
 80067ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80067f4:	785a      	ldrb	r2, [r3, #1]
 80067f6:	f1b9 0f00 	cmp.w	r9, #0
 80067fa:	d03b      	beq.n	8006874 <_strtod_l+0x24c>
 80067fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80067fe:	464d      	mov	r5, r9
 8006800:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006804:	2b09      	cmp	r3, #9
 8006806:	d912      	bls.n	800682e <_strtod_l+0x206>
 8006808:	2301      	movs	r3, #1
 800680a:	e7c2      	b.n	8006792 <_strtod_l+0x16a>
 800680c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	9219      	str	r2, [sp, #100]	@ 0x64
 8006812:	785a      	ldrb	r2, [r3, #1]
 8006814:	3001      	adds	r0, #1
 8006816:	2a30      	cmp	r2, #48	@ 0x30
 8006818:	d0f8      	beq.n	800680c <_strtod_l+0x1e4>
 800681a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800681e:	2b08      	cmp	r3, #8
 8006820:	f200 84d2 	bhi.w	80071c8 <_strtod_l+0xba0>
 8006824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006826:	900a      	str	r0, [sp, #40]	@ 0x28
 8006828:	2000      	movs	r0, #0
 800682a:	930c      	str	r3, [sp, #48]	@ 0x30
 800682c:	4605      	mov	r5, r0
 800682e:	3a30      	subs	r2, #48	@ 0x30
 8006830:	f100 0301 	add.w	r3, r0, #1
 8006834:	d018      	beq.n	8006868 <_strtod_l+0x240>
 8006836:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006838:	4419      	add	r1, r3
 800683a:	910a      	str	r1, [sp, #40]	@ 0x28
 800683c:	462e      	mov	r6, r5
 800683e:	f04f 0e0a 	mov.w	lr, #10
 8006842:	1c71      	adds	r1, r6, #1
 8006844:	eba1 0c05 	sub.w	ip, r1, r5
 8006848:	4563      	cmp	r3, ip
 800684a:	dc15      	bgt.n	8006878 <_strtod_l+0x250>
 800684c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006850:	182b      	adds	r3, r5, r0
 8006852:	2b08      	cmp	r3, #8
 8006854:	f105 0501 	add.w	r5, r5, #1
 8006858:	4405      	add	r5, r0
 800685a:	dc1a      	bgt.n	8006892 <_strtod_l+0x26a>
 800685c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800685e:	230a      	movs	r3, #10
 8006860:	fb03 2301 	mla	r3, r3, r1, r2
 8006864:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006866:	2300      	movs	r3, #0
 8006868:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800686a:	1c51      	adds	r1, r2, #1
 800686c:	9119      	str	r1, [sp, #100]	@ 0x64
 800686e:	7852      	ldrb	r2, [r2, #1]
 8006870:	4618      	mov	r0, r3
 8006872:	e7c5      	b.n	8006800 <_strtod_l+0x1d8>
 8006874:	4648      	mov	r0, r9
 8006876:	e7ce      	b.n	8006816 <_strtod_l+0x1ee>
 8006878:	2e08      	cmp	r6, #8
 800687a:	dc05      	bgt.n	8006888 <_strtod_l+0x260>
 800687c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800687e:	fb0e f606 	mul.w	r6, lr, r6
 8006882:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006884:	460e      	mov	r6, r1
 8006886:	e7dc      	b.n	8006842 <_strtod_l+0x21a>
 8006888:	2910      	cmp	r1, #16
 800688a:	bfd8      	it	le
 800688c:	fb0e f707 	mulle.w	r7, lr, r7
 8006890:	e7f8      	b.n	8006884 <_strtod_l+0x25c>
 8006892:	2b0f      	cmp	r3, #15
 8006894:	bfdc      	itt	le
 8006896:	230a      	movle	r3, #10
 8006898:	fb03 2707 	mlale	r7, r3, r7, r2
 800689c:	e7e3      	b.n	8006866 <_strtod_l+0x23e>
 800689e:	2300      	movs	r3, #0
 80068a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80068a2:	2301      	movs	r3, #1
 80068a4:	e77a      	b.n	800679c <_strtod_l+0x174>
 80068a6:	f04f 0c00 	mov.w	ip, #0
 80068aa:	1ca2      	adds	r2, r4, #2
 80068ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80068ae:	78a2      	ldrb	r2, [r4, #2]
 80068b0:	e782      	b.n	80067b8 <_strtod_l+0x190>
 80068b2:	f04f 0c01 	mov.w	ip, #1
 80068b6:	e7f8      	b.n	80068aa <_strtod_l+0x282>
 80068b8:	0800881c 	.word	0x0800881c
 80068bc:	08008653 	.word	0x08008653
 80068c0:	7ff00000 	.word	0x7ff00000
 80068c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068c6:	1c51      	adds	r1, r2, #1
 80068c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80068ca:	7852      	ldrb	r2, [r2, #1]
 80068cc:	2a30      	cmp	r2, #48	@ 0x30
 80068ce:	d0f9      	beq.n	80068c4 <_strtod_l+0x29c>
 80068d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80068d4:	2908      	cmp	r1, #8
 80068d6:	f63f af75 	bhi.w	80067c4 <_strtod_l+0x19c>
 80068da:	3a30      	subs	r2, #48	@ 0x30
 80068dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80068de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80068e2:	f04f 080a 	mov.w	r8, #10
 80068e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068e8:	1c56      	adds	r6, r2, #1
 80068ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80068ec:	7852      	ldrb	r2, [r2, #1]
 80068ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80068f2:	f1be 0f09 	cmp.w	lr, #9
 80068f6:	d939      	bls.n	800696c <_strtod_l+0x344>
 80068f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80068fa:	1a76      	subs	r6, r6, r1
 80068fc:	2e08      	cmp	r6, #8
 80068fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006902:	dc03      	bgt.n	800690c <_strtod_l+0x2e4>
 8006904:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006906:	4588      	cmp	r8, r1
 8006908:	bfa8      	it	ge
 800690a:	4688      	movge	r8, r1
 800690c:	f1bc 0f00 	cmp.w	ip, #0
 8006910:	d001      	beq.n	8006916 <_strtod_l+0x2ee>
 8006912:	f1c8 0800 	rsb	r8, r8, #0
 8006916:	2d00      	cmp	r5, #0
 8006918:	d14e      	bne.n	80069b8 <_strtod_l+0x390>
 800691a:	9908      	ldr	r1, [sp, #32]
 800691c:	4308      	orrs	r0, r1
 800691e:	f47f aebc 	bne.w	800669a <_strtod_l+0x72>
 8006922:	2b00      	cmp	r3, #0
 8006924:	f47f aed4 	bne.w	80066d0 <_strtod_l+0xa8>
 8006928:	2a69      	cmp	r2, #105	@ 0x69
 800692a:	d028      	beq.n	800697e <_strtod_l+0x356>
 800692c:	dc25      	bgt.n	800697a <_strtod_l+0x352>
 800692e:	2a49      	cmp	r2, #73	@ 0x49
 8006930:	d025      	beq.n	800697e <_strtod_l+0x356>
 8006932:	2a4e      	cmp	r2, #78	@ 0x4e
 8006934:	f47f aecc 	bne.w	80066d0 <_strtod_l+0xa8>
 8006938:	499a      	ldr	r1, [pc, #616]	@ (8006ba4 <_strtod_l+0x57c>)
 800693a:	a819      	add	r0, sp, #100	@ 0x64
 800693c:	f001 fbc4 	bl	80080c8 <__match>
 8006940:	2800      	cmp	r0, #0
 8006942:	f43f aec5 	beq.w	80066d0 <_strtod_l+0xa8>
 8006946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b28      	cmp	r3, #40	@ 0x28
 800694c:	d12e      	bne.n	80069ac <_strtod_l+0x384>
 800694e:	4996      	ldr	r1, [pc, #600]	@ (8006ba8 <_strtod_l+0x580>)
 8006950:	aa1c      	add	r2, sp, #112	@ 0x70
 8006952:	a819      	add	r0, sp, #100	@ 0x64
 8006954:	f001 fbcc 	bl	80080f0 <__hexnan>
 8006958:	2805      	cmp	r0, #5
 800695a:	d127      	bne.n	80069ac <_strtod_l+0x384>
 800695c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800695e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006962:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006966:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800696a:	e696      	b.n	800669a <_strtod_l+0x72>
 800696c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800696e:	fb08 2101 	mla	r1, r8, r1, r2
 8006972:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006976:	9209      	str	r2, [sp, #36]	@ 0x24
 8006978:	e7b5      	b.n	80068e6 <_strtod_l+0x2be>
 800697a:	2a6e      	cmp	r2, #110	@ 0x6e
 800697c:	e7da      	b.n	8006934 <_strtod_l+0x30c>
 800697e:	498b      	ldr	r1, [pc, #556]	@ (8006bac <_strtod_l+0x584>)
 8006980:	a819      	add	r0, sp, #100	@ 0x64
 8006982:	f001 fba1 	bl	80080c8 <__match>
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aea2 	beq.w	80066d0 <_strtod_l+0xa8>
 800698c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800698e:	4988      	ldr	r1, [pc, #544]	@ (8006bb0 <_strtod_l+0x588>)
 8006990:	3b01      	subs	r3, #1
 8006992:	a819      	add	r0, sp, #100	@ 0x64
 8006994:	9319      	str	r3, [sp, #100]	@ 0x64
 8006996:	f001 fb97 	bl	80080c8 <__match>
 800699a:	b910      	cbnz	r0, 80069a2 <_strtod_l+0x37a>
 800699c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800699e:	3301      	adds	r3, #1
 80069a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80069a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006bc0 <_strtod_l+0x598>
 80069a6:	f04f 0a00 	mov.w	sl, #0
 80069aa:	e676      	b.n	800669a <_strtod_l+0x72>
 80069ac:	4881      	ldr	r0, [pc, #516]	@ (8006bb4 <_strtod_l+0x58c>)
 80069ae:	f001 f8c7 	bl	8007b40 <nan>
 80069b2:	ec5b ab10 	vmov	sl, fp, d0
 80069b6:	e670      	b.n	800669a <_strtod_l+0x72>
 80069b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80069bc:	eba8 0303 	sub.w	r3, r8, r3
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	bf08      	it	eq
 80069c6:	46a9      	moveq	r9, r5
 80069c8:	2d10      	cmp	r5, #16
 80069ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80069cc:	462c      	mov	r4, r5
 80069ce:	bfa8      	it	ge
 80069d0:	2410      	movge	r4, #16
 80069d2:	f7f9 fdb7 	bl	8000544 <__aeabi_ui2d>
 80069d6:	2d09      	cmp	r5, #9
 80069d8:	4682      	mov	sl, r0
 80069da:	468b      	mov	fp, r1
 80069dc:	dc13      	bgt.n	8006a06 <_strtod_l+0x3de>
 80069de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f43f ae5a 	beq.w	800669a <_strtod_l+0x72>
 80069e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e8:	dd78      	ble.n	8006adc <_strtod_l+0x4b4>
 80069ea:	2b16      	cmp	r3, #22
 80069ec:	dc5f      	bgt.n	8006aae <_strtod_l+0x486>
 80069ee:	4972      	ldr	r1, [pc, #456]	@ (8006bb8 <_strtod_l+0x590>)
 80069f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f8:	4652      	mov	r2, sl
 80069fa:	465b      	mov	r3, fp
 80069fc:	f7f9 fe1c 	bl	8000638 <__aeabi_dmul>
 8006a00:	4682      	mov	sl, r0
 8006a02:	468b      	mov	fp, r1
 8006a04:	e649      	b.n	800669a <_strtod_l+0x72>
 8006a06:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb8 <_strtod_l+0x590>)
 8006a08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a10:	f7f9 fe12 	bl	8000638 <__aeabi_dmul>
 8006a14:	4682      	mov	sl, r0
 8006a16:	4638      	mov	r0, r7
 8006a18:	468b      	mov	fp, r1
 8006a1a:	f7f9 fd93 	bl	8000544 <__aeabi_ui2d>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4650      	mov	r0, sl
 8006a24:	4659      	mov	r1, fp
 8006a26:	f7f9 fc51 	bl	80002cc <__adddf3>
 8006a2a:	2d0f      	cmp	r5, #15
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	468b      	mov	fp, r1
 8006a30:	ddd5      	ble.n	80069de <_strtod_l+0x3b6>
 8006a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a34:	1b2c      	subs	r4, r5, r4
 8006a36:	441c      	add	r4, r3
 8006a38:	2c00      	cmp	r4, #0
 8006a3a:	f340 8093 	ble.w	8006b64 <_strtod_l+0x53c>
 8006a3e:	f014 030f 	ands.w	r3, r4, #15
 8006a42:	d00a      	beq.n	8006a5a <_strtod_l+0x432>
 8006a44:	495c      	ldr	r1, [pc, #368]	@ (8006bb8 <_strtod_l+0x590>)
 8006a46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a4a:	4652      	mov	r2, sl
 8006a4c:	465b      	mov	r3, fp
 8006a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a52:	f7f9 fdf1 	bl	8000638 <__aeabi_dmul>
 8006a56:	4682      	mov	sl, r0
 8006a58:	468b      	mov	fp, r1
 8006a5a:	f034 040f 	bics.w	r4, r4, #15
 8006a5e:	d073      	beq.n	8006b48 <_strtod_l+0x520>
 8006a60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006a64:	dd49      	ble.n	8006afa <_strtod_l+0x4d2>
 8006a66:	2400      	movs	r4, #0
 8006a68:	46a0      	mov	r8, r4
 8006a6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a6c:	46a1      	mov	r9, r4
 8006a6e:	9a05      	ldr	r2, [sp, #20]
 8006a70:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006bc0 <_strtod_l+0x598>
 8006a74:	2322      	movs	r3, #34	@ 0x22
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	f04f 0a00 	mov.w	sl, #0
 8006a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f43f ae0b 	beq.w	800669a <_strtod_l+0x72>
 8006a84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a86:	9805      	ldr	r0, [sp, #20]
 8006a88:	f7ff f946 	bl	8005d18 <_Bfree>
 8006a8c:	9805      	ldr	r0, [sp, #20]
 8006a8e:	4649      	mov	r1, r9
 8006a90:	f7ff f942 	bl	8005d18 <_Bfree>
 8006a94:	9805      	ldr	r0, [sp, #20]
 8006a96:	4641      	mov	r1, r8
 8006a98:	f7ff f93e 	bl	8005d18 <_Bfree>
 8006a9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a9e:	9805      	ldr	r0, [sp, #20]
 8006aa0:	f7ff f93a 	bl	8005d18 <_Bfree>
 8006aa4:	9805      	ldr	r0, [sp, #20]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	f7ff f936 	bl	8005d18 <_Bfree>
 8006aac:	e5f5      	b.n	800669a <_strtod_l+0x72>
 8006aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ab0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	dbbc      	blt.n	8006a32 <_strtod_l+0x40a>
 8006ab8:	4c3f      	ldr	r4, [pc, #252]	@ (8006bb8 <_strtod_l+0x590>)
 8006aba:	f1c5 050f 	rsb	r5, r5, #15
 8006abe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	465b      	mov	r3, fp
 8006ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aca:	f7f9 fdb5 	bl	8000638 <__aeabi_dmul>
 8006ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad0:	1b5d      	subs	r5, r3, r5
 8006ad2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ada:	e78f      	b.n	80069fc <_strtod_l+0x3d4>
 8006adc:	3316      	adds	r3, #22
 8006ade:	dba8      	blt.n	8006a32 <_strtod_l+0x40a>
 8006ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae2:	eba3 0808 	sub.w	r8, r3, r8
 8006ae6:	4b34      	ldr	r3, [pc, #208]	@ (8006bb8 <_strtod_l+0x590>)
 8006ae8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006aec:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006af0:	4650      	mov	r0, sl
 8006af2:	4659      	mov	r1, fp
 8006af4:	f7f9 feca 	bl	800088c <__aeabi_ddiv>
 8006af8:	e782      	b.n	8006a00 <_strtod_l+0x3d8>
 8006afa:	2300      	movs	r3, #0
 8006afc:	4f2f      	ldr	r7, [pc, #188]	@ (8006bbc <_strtod_l+0x594>)
 8006afe:	1124      	asrs	r4, r4, #4
 8006b00:	4650      	mov	r0, sl
 8006b02:	4659      	mov	r1, fp
 8006b04:	461e      	mov	r6, r3
 8006b06:	2c01      	cmp	r4, #1
 8006b08:	dc21      	bgt.n	8006b4e <_strtod_l+0x526>
 8006b0a:	b10b      	cbz	r3, 8006b10 <_strtod_l+0x4e8>
 8006b0c:	4682      	mov	sl, r0
 8006b0e:	468b      	mov	fp, r1
 8006b10:	492a      	ldr	r1, [pc, #168]	@ (8006bbc <_strtod_l+0x594>)
 8006b12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b22:	f7f9 fd89 	bl	8000638 <__aeabi_dmul>
 8006b26:	4b26      	ldr	r3, [pc, #152]	@ (8006bc0 <_strtod_l+0x598>)
 8006b28:	460a      	mov	r2, r1
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	4925      	ldr	r1, [pc, #148]	@ (8006bc4 <_strtod_l+0x59c>)
 8006b2e:	428b      	cmp	r3, r1
 8006b30:	4682      	mov	sl, r0
 8006b32:	d898      	bhi.n	8006a66 <_strtod_l+0x43e>
 8006b34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	bf86      	itte	hi
 8006b3c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006bc8 <_strtod_l+0x5a0>
 8006b40:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9308      	str	r3, [sp, #32]
 8006b4c:	e076      	b.n	8006c3c <_strtod_l+0x614>
 8006b4e:	07e2      	lsls	r2, r4, #31
 8006b50:	d504      	bpl.n	8006b5c <_strtod_l+0x534>
 8006b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b56:	f7f9 fd6f 	bl	8000638 <__aeabi_dmul>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	1064      	asrs	r4, r4, #1
 8006b60:	3708      	adds	r7, #8
 8006b62:	e7d0      	b.n	8006b06 <_strtod_l+0x4de>
 8006b64:	d0f0      	beq.n	8006b48 <_strtod_l+0x520>
 8006b66:	4264      	negs	r4, r4
 8006b68:	f014 020f 	ands.w	r2, r4, #15
 8006b6c:	d00a      	beq.n	8006b84 <_strtod_l+0x55c>
 8006b6e:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <_strtod_l+0x590>)
 8006b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b74:	4650      	mov	r0, sl
 8006b76:	4659      	mov	r1, fp
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f7f9 fe86 	bl	800088c <__aeabi_ddiv>
 8006b80:	4682      	mov	sl, r0
 8006b82:	468b      	mov	fp, r1
 8006b84:	1124      	asrs	r4, r4, #4
 8006b86:	d0df      	beq.n	8006b48 <_strtod_l+0x520>
 8006b88:	2c1f      	cmp	r4, #31
 8006b8a:	dd1f      	ble.n	8006bcc <_strtod_l+0x5a4>
 8006b8c:	2400      	movs	r4, #0
 8006b8e:	46a0      	mov	r8, r4
 8006b90:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b92:	46a1      	mov	r9, r4
 8006b94:	9a05      	ldr	r2, [sp, #20]
 8006b96:	2322      	movs	r3, #34	@ 0x22
 8006b98:	f04f 0a00 	mov.w	sl, #0
 8006b9c:	f04f 0b00 	mov.w	fp, #0
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e76b      	b.n	8006a7c <_strtod_l+0x454>
 8006ba4:	08008541 	.word	0x08008541
 8006ba8:	08008808 	.word	0x08008808
 8006bac:	08008539 	.word	0x08008539
 8006bb0:	08008570 	.word	0x08008570
 8006bb4:	080086a9 	.word	0x080086a9
 8006bb8:	08008740 	.word	0x08008740
 8006bbc:	08008718 	.word	0x08008718
 8006bc0:	7ff00000 	.word	0x7ff00000
 8006bc4:	7ca00000 	.word	0x7ca00000
 8006bc8:	7fefffff 	.word	0x7fefffff
 8006bcc:	f014 0310 	ands.w	r3, r4, #16
 8006bd0:	bf18      	it	ne
 8006bd2:	236a      	movne	r3, #106	@ 0x6a
 8006bd4:	4ea9      	ldr	r6, [pc, #676]	@ (8006e7c <_strtod_l+0x854>)
 8006bd6:	9308      	str	r3, [sp, #32]
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4659      	mov	r1, fp
 8006bdc:	2300      	movs	r3, #0
 8006bde:	07e7      	lsls	r7, r4, #31
 8006be0:	d504      	bpl.n	8006bec <_strtod_l+0x5c4>
 8006be2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006be6:	f7f9 fd27 	bl	8000638 <__aeabi_dmul>
 8006bea:	2301      	movs	r3, #1
 8006bec:	1064      	asrs	r4, r4, #1
 8006bee:	f106 0608 	add.w	r6, r6, #8
 8006bf2:	d1f4      	bne.n	8006bde <_strtod_l+0x5b6>
 8006bf4:	b10b      	cbz	r3, 8006bfa <_strtod_l+0x5d2>
 8006bf6:	4682      	mov	sl, r0
 8006bf8:	468b      	mov	fp, r1
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	b1b3      	cbz	r3, 8006c2c <_strtod_l+0x604>
 8006bfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	4659      	mov	r1, fp
 8006c0a:	dd0f      	ble.n	8006c2c <_strtod_l+0x604>
 8006c0c:	2b1f      	cmp	r3, #31
 8006c0e:	dd56      	ble.n	8006cbe <_strtod_l+0x696>
 8006c10:	2b34      	cmp	r3, #52	@ 0x34
 8006c12:	bfde      	ittt	le
 8006c14:	f04f 33ff 	movle.w	r3, #4294967295
 8006c18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006c1c:	4093      	lslle	r3, r2
 8006c1e:	f04f 0a00 	mov.w	sl, #0
 8006c22:	bfcc      	ite	gt
 8006c24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006c28:	ea03 0b01 	andle.w	fp, r3, r1
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4650      	mov	r0, sl
 8006c32:	4659      	mov	r1, fp
 8006c34:	f7f9 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1a7      	bne.n	8006b8c <_strtod_l+0x564>
 8006c3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006c42:	9805      	ldr	r0, [sp, #20]
 8006c44:	462b      	mov	r3, r5
 8006c46:	464a      	mov	r2, r9
 8006c48:	f7ff f8ce 	bl	8005de8 <__s2b>
 8006c4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f43f af09 	beq.w	8006a66 <_strtod_l+0x43e>
 8006c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	eba3 0308 	sub.w	r3, r3, r8
 8006c5e:	bfa8      	it	ge
 8006c60:	2300      	movge	r3, #0
 8006c62:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c64:	2400      	movs	r4, #0
 8006c66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006c6c:	46a0      	mov	r8, r4
 8006c6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c70:	9805      	ldr	r0, [sp, #20]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	f7ff f810 	bl	8005c98 <_Balloc>
 8006c78:	4681      	mov	r9, r0
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f43f aef7 	beq.w	8006a6e <_strtod_l+0x446>
 8006c80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	3202      	adds	r2, #2
 8006c86:	f103 010c 	add.w	r1, r3, #12
 8006c8a:	0092      	lsls	r2, r2, #2
 8006c8c:	300c      	adds	r0, #12
 8006c8e:	f000 ff47 	bl	8007b20 <memcpy>
 8006c92:	ec4b ab10 	vmov	d0, sl, fp
 8006c96:	9805      	ldr	r0, [sp, #20]
 8006c98:	aa1c      	add	r2, sp, #112	@ 0x70
 8006c9a:	a91b      	add	r1, sp, #108	@ 0x6c
 8006c9c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006ca0:	f7ff fbd6 	bl	8006450 <__d2b>
 8006ca4:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f43f aee1 	beq.w	8006a6e <_strtod_l+0x446>
 8006cac:	9805      	ldr	r0, [sp, #20]
 8006cae:	2101      	movs	r1, #1
 8006cb0:	f7ff f930 	bl	8005f14 <__i2b>
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	b948      	cbnz	r0, 8006ccc <_strtod_l+0x6a4>
 8006cb8:	f04f 0800 	mov.w	r8, #0
 8006cbc:	e6d7      	b.n	8006a6e <_strtod_l+0x446>
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc6:	ea03 0a0a 	and.w	sl, r3, sl
 8006cca:	e7af      	b.n	8006c2c <_strtod_l+0x604>
 8006ccc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006cce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006cd0:	2d00      	cmp	r5, #0
 8006cd2:	bfab      	itete	ge
 8006cd4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006cd6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006cd8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006cda:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006cdc:	bfac      	ite	ge
 8006cde:	18ef      	addge	r7, r5, r3
 8006ce0:	1b5e      	sublt	r6, r3, r5
 8006ce2:	9b08      	ldr	r3, [sp, #32]
 8006ce4:	1aed      	subs	r5, r5, r3
 8006ce6:	4415      	add	r5, r2
 8006ce8:	4b65      	ldr	r3, [pc, #404]	@ (8006e80 <_strtod_l+0x858>)
 8006cea:	3d01      	subs	r5, #1
 8006cec:	429d      	cmp	r5, r3
 8006cee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006cf2:	da50      	bge.n	8006d96 <_strtod_l+0x76e>
 8006cf4:	1b5b      	subs	r3, r3, r5
 8006cf6:	2b1f      	cmp	r3, #31
 8006cf8:	eba2 0203 	sub.w	r2, r2, r3
 8006cfc:	f04f 0101 	mov.w	r1, #1
 8006d00:	dc3d      	bgt.n	8006d7e <_strtod_l+0x756>
 8006d02:	fa01 f303 	lsl.w	r3, r1, r3
 8006d06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d0c:	18bd      	adds	r5, r7, r2
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	42af      	cmp	r7, r5
 8006d12:	4416      	add	r6, r2
 8006d14:	441e      	add	r6, r3
 8006d16:	463b      	mov	r3, r7
 8006d18:	bfa8      	it	ge
 8006d1a:	462b      	movge	r3, r5
 8006d1c:	42b3      	cmp	r3, r6
 8006d1e:	bfa8      	it	ge
 8006d20:	4633      	movge	r3, r6
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bfc2      	ittt	gt
 8006d26:	1aed      	subgt	r5, r5, r3
 8006d28:	1af6      	subgt	r6, r6, r3
 8006d2a:	1aff      	subgt	r7, r7, r3
 8006d2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd16      	ble.n	8006d60 <_strtod_l+0x738>
 8006d32:	4641      	mov	r1, r8
 8006d34:	9805      	ldr	r0, [sp, #20]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f7ff f9a4 	bl	8006084 <__pow5mult>
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d0ba      	beq.n	8006cb8 <_strtod_l+0x690>
 8006d42:	4601      	mov	r1, r0
 8006d44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d46:	9805      	ldr	r0, [sp, #20]
 8006d48:	f7ff f8fa 	bl	8005f40 <__multiply>
 8006d4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f ae8d 	beq.w	8006a6e <_strtod_l+0x446>
 8006d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d56:	9805      	ldr	r0, [sp, #20]
 8006d58:	f7fe ffde 	bl	8005d18 <_Bfree>
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	dc1d      	bgt.n	8006da0 <_strtod_l+0x778>
 8006d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	dd23      	ble.n	8006db2 <_strtod_l+0x78a>
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006d6e:	9805      	ldr	r0, [sp, #20]
 8006d70:	f7ff f988 	bl	8006084 <__pow5mult>
 8006d74:	4681      	mov	r9, r0
 8006d76:	b9e0      	cbnz	r0, 8006db2 <_strtod_l+0x78a>
 8006d78:	f04f 0900 	mov.w	r9, #0
 8006d7c:	e677      	b.n	8006a6e <_strtod_l+0x446>
 8006d7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006d82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006d86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006d8a:	35e2      	adds	r5, #226	@ 0xe2
 8006d8c:	fa01 f305 	lsl.w	r3, r1, r5
 8006d90:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006d94:	e7ba      	b.n	8006d0c <_strtod_l+0x6e4>
 8006d96:	2300      	movs	r3, #0
 8006d98:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d9e:	e7b5      	b.n	8006d0c <_strtod_l+0x6e4>
 8006da0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	462a      	mov	r2, r5
 8006da6:	f7ff f9c7 	bl	8006138 <__lshift>
 8006daa:	901a      	str	r0, [sp, #104]	@ 0x68
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d1d9      	bne.n	8006d64 <_strtod_l+0x73c>
 8006db0:	e65d      	b.n	8006a6e <_strtod_l+0x446>
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	dd07      	ble.n	8006dc6 <_strtod_l+0x79e>
 8006db6:	4649      	mov	r1, r9
 8006db8:	9805      	ldr	r0, [sp, #20]
 8006dba:	4632      	mov	r2, r6
 8006dbc:	f7ff f9bc 	bl	8006138 <__lshift>
 8006dc0:	4681      	mov	r9, r0
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d0d8      	beq.n	8006d78 <_strtod_l+0x750>
 8006dc6:	2f00      	cmp	r7, #0
 8006dc8:	dd08      	ble.n	8006ddc <_strtod_l+0x7b4>
 8006dca:	4641      	mov	r1, r8
 8006dcc:	9805      	ldr	r0, [sp, #20]
 8006dce:	463a      	mov	r2, r7
 8006dd0:	f7ff f9b2 	bl	8006138 <__lshift>
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f43f ae49 	beq.w	8006a6e <_strtod_l+0x446>
 8006ddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dde:	9805      	ldr	r0, [sp, #20]
 8006de0:	464a      	mov	r2, r9
 8006de2:	f7ff fa31 	bl	8006248 <__mdiff>
 8006de6:	4604      	mov	r4, r0
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f43f ae40 	beq.w	8006a6e <_strtod_l+0x446>
 8006dee:	68c3      	ldr	r3, [r0, #12]
 8006df0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006df2:	2300      	movs	r3, #0
 8006df4:	60c3      	str	r3, [r0, #12]
 8006df6:	4641      	mov	r1, r8
 8006df8:	f7ff fa0a 	bl	8006210 <__mcmp>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	da45      	bge.n	8006e8c <_strtod_l+0x864>
 8006e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e02:	ea53 030a 	orrs.w	r3, r3, sl
 8006e06:	d16b      	bne.n	8006ee0 <_strtod_l+0x8b8>
 8006e08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d167      	bne.n	8006ee0 <_strtod_l+0x8b8>
 8006e10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e14:	0d1b      	lsrs	r3, r3, #20
 8006e16:	051b      	lsls	r3, r3, #20
 8006e18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e1c:	d960      	bls.n	8006ee0 <_strtod_l+0x8b8>
 8006e1e:	6963      	ldr	r3, [r4, #20]
 8006e20:	b913      	cbnz	r3, 8006e28 <_strtod_l+0x800>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	dd5b      	ble.n	8006ee0 <_strtod_l+0x8b8>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	9805      	ldr	r0, [sp, #20]
 8006e2e:	f7ff f983 	bl	8006138 <__lshift>
 8006e32:	4641      	mov	r1, r8
 8006e34:	4604      	mov	r4, r0
 8006e36:	f7ff f9eb 	bl	8006210 <__mcmp>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	dd50      	ble.n	8006ee0 <_strtod_l+0x8b8>
 8006e3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e42:	9a08      	ldr	r2, [sp, #32]
 8006e44:	0d1b      	lsrs	r3, r3, #20
 8006e46:	051b      	lsls	r3, r3, #20
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d06a      	beq.n	8006f22 <_strtod_l+0x8fa>
 8006e4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e50:	d867      	bhi.n	8006f22 <_strtod_l+0x8fa>
 8006e52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006e56:	f67f ae9d 	bls.w	8006b94 <_strtod_l+0x56c>
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <_strtod_l+0x85c>)
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	4659      	mov	r1, fp
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 fbe9 	bl	8000638 <__aeabi_dmul>
 8006e66:	4b08      	ldr	r3, [pc, #32]	@ (8006e88 <_strtod_l+0x860>)
 8006e68:	400b      	ands	r3, r1
 8006e6a:	4682      	mov	sl, r0
 8006e6c:	468b      	mov	fp, r1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f47f ae08 	bne.w	8006a84 <_strtod_l+0x45c>
 8006e74:	9a05      	ldr	r2, [sp, #20]
 8006e76:	2322      	movs	r3, #34	@ 0x22
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	e603      	b.n	8006a84 <_strtod_l+0x45c>
 8006e7c:	08008830 	.word	0x08008830
 8006e80:	fffffc02 	.word	0xfffffc02
 8006e84:	39500000 	.word	0x39500000
 8006e88:	7ff00000 	.word	0x7ff00000
 8006e8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006e90:	d165      	bne.n	8006f5e <_strtod_l+0x936>
 8006e92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e98:	b35a      	cbz	r2, 8006ef2 <_strtod_l+0x8ca>
 8006e9a:	4a9f      	ldr	r2, [pc, #636]	@ (8007118 <_strtod_l+0xaf0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d12b      	bne.n	8006ef8 <_strtod_l+0x8d0>
 8006ea0:	9b08      	ldr	r3, [sp, #32]
 8006ea2:	4651      	mov	r1, sl
 8006ea4:	b303      	cbz	r3, 8006ee8 <_strtod_l+0x8c0>
 8006ea6:	4b9d      	ldr	r3, [pc, #628]	@ (800711c <_strtod_l+0xaf4>)
 8006ea8:	465a      	mov	r2, fp
 8006eaa:	4013      	ands	r3, r2
 8006eac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb4:	d81b      	bhi.n	8006eee <_strtod_l+0x8c6>
 8006eb6:	0d1b      	lsrs	r3, r3, #20
 8006eb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	d119      	bne.n	8006ef8 <_strtod_l+0x8d0>
 8006ec4:	4b96      	ldr	r3, [pc, #600]	@ (8007120 <_strtod_l+0xaf8>)
 8006ec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d102      	bne.n	8006ed2 <_strtod_l+0x8aa>
 8006ecc:	3101      	adds	r1, #1
 8006ece:	f43f adce 	beq.w	8006a6e <_strtod_l+0x446>
 8006ed2:	4b92      	ldr	r3, [pc, #584]	@ (800711c <_strtod_l+0xaf4>)
 8006ed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006edc:	f04f 0a00 	mov.w	sl, #0
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1b9      	bne.n	8006e5a <_strtod_l+0x832>
 8006ee6:	e5cd      	b.n	8006a84 <_strtod_l+0x45c>
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	e7e8      	b.n	8006ec0 <_strtod_l+0x898>
 8006eee:	4613      	mov	r3, r2
 8006ef0:	e7e6      	b.n	8006ec0 <_strtod_l+0x898>
 8006ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8006ef6:	d0a2      	beq.n	8006e3e <_strtod_l+0x816>
 8006ef8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006efa:	b1db      	cbz	r3, 8006f34 <_strtod_l+0x90c>
 8006efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006efe:	4213      	tst	r3, r2
 8006f00:	d0ee      	beq.n	8006ee0 <_strtod_l+0x8b8>
 8006f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f04:	9a08      	ldr	r2, [sp, #32]
 8006f06:	4650      	mov	r0, sl
 8006f08:	4659      	mov	r1, fp
 8006f0a:	b1bb      	cbz	r3, 8006f3c <_strtod_l+0x914>
 8006f0c:	f7ff fb6e 	bl	80065ec <sulp>
 8006f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f14:	ec53 2b10 	vmov	r2, r3, d0
 8006f18:	f7f9 f9d8 	bl	80002cc <__adddf3>
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	468b      	mov	fp, r1
 8006f20:	e7de      	b.n	8006ee0 <_strtod_l+0x8b8>
 8006f22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006f26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f2e:	f04f 3aff 	mov.w	sl, #4294967295
 8006f32:	e7d5      	b.n	8006ee0 <_strtod_l+0x8b8>
 8006f34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f36:	ea13 0f0a 	tst.w	r3, sl
 8006f3a:	e7e1      	b.n	8006f00 <_strtod_l+0x8d8>
 8006f3c:	f7ff fb56 	bl	80065ec <sulp>
 8006f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f44:	ec53 2b10 	vmov	r2, r3, d0
 8006f48:	f7f9 f9be 	bl	80002c8 <__aeabi_dsub>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	4682      	mov	sl, r0
 8006f52:	468b      	mov	fp, r1
 8006f54:	f7f9 fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d0c1      	beq.n	8006ee0 <_strtod_l+0x8b8>
 8006f5c:	e61a      	b.n	8006b94 <_strtod_l+0x56c>
 8006f5e:	4641      	mov	r1, r8
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7ff facd 	bl	8006500 <__ratio>
 8006f66:	ec57 6b10 	vmov	r6, r7, d0
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 fddc 	bl	8000b30 <__aeabi_dcmple>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d06f      	beq.n	800705c <_strtod_l+0xa34>
 8006f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d17a      	bne.n	8007078 <_strtod_l+0xa50>
 8006f82:	f1ba 0f00 	cmp.w	sl, #0
 8006f86:	d158      	bne.n	800703a <_strtod_l+0xa12>
 8006f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d15a      	bne.n	8007048 <_strtod_l+0xa20>
 8006f92:	4b64      	ldr	r3, [pc, #400]	@ (8007124 <_strtod_l+0xafc>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	4630      	mov	r0, r6
 8006f98:	4639      	mov	r1, r7
 8006f9a:	f7f9 fdbf 	bl	8000b1c <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d159      	bne.n	8007056 <_strtod_l+0xa2e>
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4b60      	ldr	r3, [pc, #384]	@ (8007128 <_strtod_l+0xb00>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f7f9 fb45 	bl	8000638 <__aeabi_dmul>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	460f      	mov	r7, r1
 8006fb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006fb6:	9606      	str	r6, [sp, #24]
 8006fb8:	9307      	str	r3, [sp, #28]
 8006fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fbe:	4d57      	ldr	r5, [pc, #348]	@ (800711c <_strtod_l+0xaf4>)
 8006fc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fc6:	401d      	ands	r5, r3
 8006fc8:	4b58      	ldr	r3, [pc, #352]	@ (800712c <_strtod_l+0xb04>)
 8006fca:	429d      	cmp	r5, r3
 8006fcc:	f040 80b2 	bne.w	8007134 <_strtod_l+0xb0c>
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006fd6:	ec4b ab10 	vmov	d0, sl, fp
 8006fda:	f7ff f9c9 	bl	8006370 <__ulp>
 8006fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fe2:	ec51 0b10 	vmov	r0, r1, d0
 8006fe6:	f7f9 fb27 	bl	8000638 <__aeabi_dmul>
 8006fea:	4652      	mov	r2, sl
 8006fec:	465b      	mov	r3, fp
 8006fee:	f7f9 f96d 	bl	80002cc <__adddf3>
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4949      	ldr	r1, [pc, #292]	@ (800711c <_strtod_l+0xaf4>)
 8006ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8007130 <_strtod_l+0xb08>)
 8006ff8:	4019      	ands	r1, r3
 8006ffa:	4291      	cmp	r1, r2
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	d942      	bls.n	8007086 <_strtod_l+0xa5e>
 8007000:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007002:	4b47      	ldr	r3, [pc, #284]	@ (8007120 <_strtod_l+0xaf8>)
 8007004:	429a      	cmp	r2, r3
 8007006:	d103      	bne.n	8007010 <_strtod_l+0x9e8>
 8007008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800700a:	3301      	adds	r3, #1
 800700c:	f43f ad2f 	beq.w	8006a6e <_strtod_l+0x446>
 8007010:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007120 <_strtod_l+0xaf8>
 8007014:	f04f 3aff 	mov.w	sl, #4294967295
 8007018:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800701a:	9805      	ldr	r0, [sp, #20]
 800701c:	f7fe fe7c 	bl	8005d18 <_Bfree>
 8007020:	9805      	ldr	r0, [sp, #20]
 8007022:	4649      	mov	r1, r9
 8007024:	f7fe fe78 	bl	8005d18 <_Bfree>
 8007028:	9805      	ldr	r0, [sp, #20]
 800702a:	4641      	mov	r1, r8
 800702c:	f7fe fe74 	bl	8005d18 <_Bfree>
 8007030:	9805      	ldr	r0, [sp, #20]
 8007032:	4621      	mov	r1, r4
 8007034:	f7fe fe70 	bl	8005d18 <_Bfree>
 8007038:	e619      	b.n	8006c6e <_strtod_l+0x646>
 800703a:	f1ba 0f01 	cmp.w	sl, #1
 800703e:	d103      	bne.n	8007048 <_strtod_l+0xa20>
 8007040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	f43f ada6 	beq.w	8006b94 <_strtod_l+0x56c>
 8007048:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80070f8 <_strtod_l+0xad0>
 800704c:	4f35      	ldr	r7, [pc, #212]	@ (8007124 <_strtod_l+0xafc>)
 800704e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007052:	2600      	movs	r6, #0
 8007054:	e7b1      	b.n	8006fba <_strtod_l+0x992>
 8007056:	4f34      	ldr	r7, [pc, #208]	@ (8007128 <_strtod_l+0xb00>)
 8007058:	2600      	movs	r6, #0
 800705a:	e7aa      	b.n	8006fb2 <_strtod_l+0x98a>
 800705c:	4b32      	ldr	r3, [pc, #200]	@ (8007128 <_strtod_l+0xb00>)
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	2200      	movs	r2, #0
 8007064:	f7f9 fae8 	bl	8000638 <__aeabi_dmul>
 8007068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d09f      	beq.n	8006fb2 <_strtod_l+0x98a>
 8007072:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007076:	e7a0      	b.n	8006fba <_strtod_l+0x992>
 8007078:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007100 <_strtod_l+0xad8>
 800707c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007080:	ec57 6b17 	vmov	r6, r7, d7
 8007084:	e799      	b.n	8006fba <_strtod_l+0x992>
 8007086:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1c1      	bne.n	8007018 <_strtod_l+0x9f0>
 8007094:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007098:	0d1b      	lsrs	r3, r3, #20
 800709a:	051b      	lsls	r3, r3, #20
 800709c:	429d      	cmp	r5, r3
 800709e:	d1bb      	bne.n	8007018 <_strtod_l+0x9f0>
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 fe28 	bl	8000cf8 <__aeabi_d2lz>
 80070a8:	f7f9 fa98 	bl	80005dc <__aeabi_l2d>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 f908 	bl	80002c8 <__aeabi_dsub>
 80070b8:	460b      	mov	r3, r1
 80070ba:	4602      	mov	r2, r0
 80070bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80070c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80070c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070c6:	ea46 060a 	orr.w	r6, r6, sl
 80070ca:	431e      	orrs	r6, r3
 80070cc:	d06f      	beq.n	80071ae <_strtod_l+0xb86>
 80070ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007108 <_strtod_l+0xae0>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 fd22 	bl	8000b1c <__aeabi_dcmplt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f47f acd3 	bne.w	8006a84 <_strtod_l+0x45c>
 80070de:	a30c      	add	r3, pc, #48	@ (adr r3, 8007110 <_strtod_l+0xae8>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070e8:	f7f9 fd36 	bl	8000b58 <__aeabi_dcmpgt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d093      	beq.n	8007018 <_strtod_l+0x9f0>
 80070f0:	e4c8      	b.n	8006a84 <_strtod_l+0x45c>
 80070f2:	bf00      	nop
 80070f4:	f3af 8000 	nop.w
 80070f8:	00000000 	.word	0x00000000
 80070fc:	bff00000 	.word	0xbff00000
 8007100:	00000000 	.word	0x00000000
 8007104:	3ff00000 	.word	0x3ff00000
 8007108:	94a03595 	.word	0x94a03595
 800710c:	3fdfffff 	.word	0x3fdfffff
 8007110:	35afe535 	.word	0x35afe535
 8007114:	3fe00000 	.word	0x3fe00000
 8007118:	000fffff 	.word	0x000fffff
 800711c:	7ff00000 	.word	0x7ff00000
 8007120:	7fefffff 	.word	0x7fefffff
 8007124:	3ff00000 	.word	0x3ff00000
 8007128:	3fe00000 	.word	0x3fe00000
 800712c:	7fe00000 	.word	0x7fe00000
 8007130:	7c9fffff 	.word	0x7c9fffff
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	b323      	cbz	r3, 8007182 <_strtod_l+0xb5a>
 8007138:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800713c:	d821      	bhi.n	8007182 <_strtod_l+0xb5a>
 800713e:	a328      	add	r3, pc, #160	@ (adr r3, 80071e0 <_strtod_l+0xbb8>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	4630      	mov	r0, r6
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 fcf2 	bl	8000b30 <__aeabi_dcmple>
 800714c:	b1a0      	cbz	r0, 8007178 <_strtod_l+0xb50>
 800714e:	4639      	mov	r1, r7
 8007150:	4630      	mov	r0, r6
 8007152:	f7f9 fd49 	bl	8000be8 <__aeabi_d2uiz>
 8007156:	2801      	cmp	r0, #1
 8007158:	bf38      	it	cc
 800715a:	2001      	movcc	r0, #1
 800715c:	f7f9 f9f2 	bl	8000544 <__aeabi_ui2d>
 8007160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	b9fb      	cbnz	r3, 80071a8 <_strtod_l+0xb80>
 8007168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800716c:	9014      	str	r0, [sp, #80]	@ 0x50
 800716e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007170:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007174:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007178:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800717a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800717e:	1b5b      	subs	r3, r3, r5
 8007180:	9311      	str	r3, [sp, #68]	@ 0x44
 8007182:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007186:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800718a:	f7ff f8f1 	bl	8006370 <__ulp>
 800718e:	4650      	mov	r0, sl
 8007190:	ec53 2b10 	vmov	r2, r3, d0
 8007194:	4659      	mov	r1, fp
 8007196:	f7f9 fa4f 	bl	8000638 <__aeabi_dmul>
 800719a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800719e:	f7f9 f895 	bl	80002cc <__adddf3>
 80071a2:	4682      	mov	sl, r0
 80071a4:	468b      	mov	fp, r1
 80071a6:	e770      	b.n	800708a <_strtod_l+0xa62>
 80071a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80071ac:	e7e0      	b.n	8007170 <_strtod_l+0xb48>
 80071ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80071e8 <_strtod_l+0xbc0>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f7f9 fcb2 	bl	8000b1c <__aeabi_dcmplt>
 80071b8:	e798      	b.n	80070ec <_strtod_l+0xac4>
 80071ba:	2300      	movs	r3, #0
 80071bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80071be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80071c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	f7ff ba6d 	b.w	80066a2 <_strtod_l+0x7a>
 80071c8:	2a65      	cmp	r2, #101	@ 0x65
 80071ca:	f43f ab68 	beq.w	800689e <_strtod_l+0x276>
 80071ce:	2a45      	cmp	r2, #69	@ 0x45
 80071d0:	f43f ab65 	beq.w	800689e <_strtod_l+0x276>
 80071d4:	2301      	movs	r3, #1
 80071d6:	f7ff bba0 	b.w	800691a <_strtod_l+0x2f2>
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w
 80071e0:	ffc00000 	.word	0xffc00000
 80071e4:	41dfffff 	.word	0x41dfffff
 80071e8:	94a03595 	.word	0x94a03595
 80071ec:	3fcfffff 	.word	0x3fcfffff

080071f0 <_strtod_r>:
 80071f0:	4b01      	ldr	r3, [pc, #4]	@ (80071f8 <_strtod_r+0x8>)
 80071f2:	f7ff ba19 	b.w	8006628 <_strtod_l>
 80071f6:	bf00      	nop
 80071f8:	20000068 	.word	0x20000068

080071fc <_strtol_l.isra.0>:
 80071fc:	2b24      	cmp	r3, #36	@ 0x24
 80071fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007202:	4686      	mov	lr, r0
 8007204:	4690      	mov	r8, r2
 8007206:	d801      	bhi.n	800720c <_strtol_l.isra.0+0x10>
 8007208:	2b01      	cmp	r3, #1
 800720a:	d106      	bne.n	800721a <_strtol_l.isra.0+0x1e>
 800720c:	f7fd fdb8 	bl	8004d80 <__errno>
 8007210:	2316      	movs	r3, #22
 8007212:	6003      	str	r3, [r0, #0]
 8007214:	2000      	movs	r0, #0
 8007216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721a:	4834      	ldr	r0, [pc, #208]	@ (80072ec <_strtol_l.isra.0+0xf0>)
 800721c:	460d      	mov	r5, r1
 800721e:	462a      	mov	r2, r5
 8007220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007224:	5d06      	ldrb	r6, [r0, r4]
 8007226:	f016 0608 	ands.w	r6, r6, #8
 800722a:	d1f8      	bne.n	800721e <_strtol_l.isra.0+0x22>
 800722c:	2c2d      	cmp	r4, #45	@ 0x2d
 800722e:	d110      	bne.n	8007252 <_strtol_l.isra.0+0x56>
 8007230:	782c      	ldrb	r4, [r5, #0]
 8007232:	2601      	movs	r6, #1
 8007234:	1c95      	adds	r5, r2, #2
 8007236:	f033 0210 	bics.w	r2, r3, #16
 800723a:	d115      	bne.n	8007268 <_strtol_l.isra.0+0x6c>
 800723c:	2c30      	cmp	r4, #48	@ 0x30
 800723e:	d10d      	bne.n	800725c <_strtol_l.isra.0+0x60>
 8007240:	782a      	ldrb	r2, [r5, #0]
 8007242:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007246:	2a58      	cmp	r2, #88	@ 0x58
 8007248:	d108      	bne.n	800725c <_strtol_l.isra.0+0x60>
 800724a:	786c      	ldrb	r4, [r5, #1]
 800724c:	3502      	adds	r5, #2
 800724e:	2310      	movs	r3, #16
 8007250:	e00a      	b.n	8007268 <_strtol_l.isra.0+0x6c>
 8007252:	2c2b      	cmp	r4, #43	@ 0x2b
 8007254:	bf04      	itt	eq
 8007256:	782c      	ldrbeq	r4, [r5, #0]
 8007258:	1c95      	addeq	r5, r2, #2
 800725a:	e7ec      	b.n	8007236 <_strtol_l.isra.0+0x3a>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f6      	bne.n	800724e <_strtol_l.isra.0+0x52>
 8007260:	2c30      	cmp	r4, #48	@ 0x30
 8007262:	bf14      	ite	ne
 8007264:	230a      	movne	r3, #10
 8007266:	2308      	moveq	r3, #8
 8007268:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800726c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007270:	2200      	movs	r2, #0
 8007272:	fbbc f9f3 	udiv	r9, ip, r3
 8007276:	4610      	mov	r0, r2
 8007278:	fb03 ca19 	mls	sl, r3, r9, ip
 800727c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007280:	2f09      	cmp	r7, #9
 8007282:	d80f      	bhi.n	80072a4 <_strtol_l.isra.0+0xa8>
 8007284:	463c      	mov	r4, r7
 8007286:	42a3      	cmp	r3, r4
 8007288:	dd1b      	ble.n	80072c2 <_strtol_l.isra.0+0xc6>
 800728a:	1c57      	adds	r7, r2, #1
 800728c:	d007      	beq.n	800729e <_strtol_l.isra.0+0xa2>
 800728e:	4581      	cmp	r9, r0
 8007290:	d314      	bcc.n	80072bc <_strtol_l.isra.0+0xc0>
 8007292:	d101      	bne.n	8007298 <_strtol_l.isra.0+0x9c>
 8007294:	45a2      	cmp	sl, r4
 8007296:	db11      	blt.n	80072bc <_strtol_l.isra.0+0xc0>
 8007298:	fb00 4003 	mla	r0, r0, r3, r4
 800729c:	2201      	movs	r2, #1
 800729e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072a2:	e7eb      	b.n	800727c <_strtol_l.isra.0+0x80>
 80072a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072a8:	2f19      	cmp	r7, #25
 80072aa:	d801      	bhi.n	80072b0 <_strtol_l.isra.0+0xb4>
 80072ac:	3c37      	subs	r4, #55	@ 0x37
 80072ae:	e7ea      	b.n	8007286 <_strtol_l.isra.0+0x8a>
 80072b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80072b4:	2f19      	cmp	r7, #25
 80072b6:	d804      	bhi.n	80072c2 <_strtol_l.isra.0+0xc6>
 80072b8:	3c57      	subs	r4, #87	@ 0x57
 80072ba:	e7e4      	b.n	8007286 <_strtol_l.isra.0+0x8a>
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	e7ed      	b.n	800729e <_strtol_l.isra.0+0xa2>
 80072c2:	1c53      	adds	r3, r2, #1
 80072c4:	d108      	bne.n	80072d8 <_strtol_l.isra.0+0xdc>
 80072c6:	2322      	movs	r3, #34	@ 0x22
 80072c8:	f8ce 3000 	str.w	r3, [lr]
 80072cc:	4660      	mov	r0, ip
 80072ce:	f1b8 0f00 	cmp.w	r8, #0
 80072d2:	d0a0      	beq.n	8007216 <_strtol_l.isra.0+0x1a>
 80072d4:	1e69      	subs	r1, r5, #1
 80072d6:	e006      	b.n	80072e6 <_strtol_l.isra.0+0xea>
 80072d8:	b106      	cbz	r6, 80072dc <_strtol_l.isra.0+0xe0>
 80072da:	4240      	negs	r0, r0
 80072dc:	f1b8 0f00 	cmp.w	r8, #0
 80072e0:	d099      	beq.n	8007216 <_strtol_l.isra.0+0x1a>
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	d1f6      	bne.n	80072d4 <_strtol_l.isra.0+0xd8>
 80072e6:	f8c8 1000 	str.w	r1, [r8]
 80072ea:	e794      	b.n	8007216 <_strtol_l.isra.0+0x1a>
 80072ec:	08008859 	.word	0x08008859

080072f0 <_strtol_r>:
 80072f0:	f7ff bf84 	b.w	80071fc <_strtol_l.isra.0>

080072f4 <__ssputs_r>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	688e      	ldr	r6, [r1, #8]
 80072fa:	461f      	mov	r7, r3
 80072fc:	42be      	cmp	r6, r7
 80072fe:	680b      	ldr	r3, [r1, #0]
 8007300:	4682      	mov	sl, r0
 8007302:	460c      	mov	r4, r1
 8007304:	4690      	mov	r8, r2
 8007306:	d82d      	bhi.n	8007364 <__ssputs_r+0x70>
 8007308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800730c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007310:	d026      	beq.n	8007360 <__ssputs_r+0x6c>
 8007312:	6965      	ldr	r5, [r4, #20]
 8007314:	6909      	ldr	r1, [r1, #16]
 8007316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731a:	eba3 0901 	sub.w	r9, r3, r1
 800731e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007322:	1c7b      	adds	r3, r7, #1
 8007324:	444b      	add	r3, r9
 8007326:	106d      	asrs	r5, r5, #1
 8007328:	429d      	cmp	r5, r3
 800732a:	bf38      	it	cc
 800732c:	461d      	movcc	r5, r3
 800732e:	0553      	lsls	r3, r2, #21
 8007330:	d527      	bpl.n	8007382 <__ssputs_r+0x8e>
 8007332:	4629      	mov	r1, r5
 8007334:	f7fe fc24 	bl	8005b80 <_malloc_r>
 8007338:	4606      	mov	r6, r0
 800733a:	b360      	cbz	r0, 8007396 <__ssputs_r+0xa2>
 800733c:	6921      	ldr	r1, [r4, #16]
 800733e:	464a      	mov	r2, r9
 8007340:	f000 fbee 	bl	8007b20 <memcpy>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800734a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	6126      	str	r6, [r4, #16]
 8007352:	6165      	str	r5, [r4, #20]
 8007354:	444e      	add	r6, r9
 8007356:	eba5 0509 	sub.w	r5, r5, r9
 800735a:	6026      	str	r6, [r4, #0]
 800735c:	60a5      	str	r5, [r4, #8]
 800735e:	463e      	mov	r6, r7
 8007360:	42be      	cmp	r6, r7
 8007362:	d900      	bls.n	8007366 <__ssputs_r+0x72>
 8007364:	463e      	mov	r6, r7
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	4632      	mov	r2, r6
 800736a:	4641      	mov	r1, r8
 800736c:	f000 fb9c 	bl	8007aa8 <memmove>
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	1b9b      	subs	r3, r3, r6
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	4433      	add	r3, r6
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	462a      	mov	r2, r5
 8007384:	f000 ff61 	bl	800824a <_realloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	2800      	cmp	r0, #0
 800738c:	d1e0      	bne.n	8007350 <__ssputs_r+0x5c>
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	4650      	mov	r0, sl
 8007392:	f7fe fb81 	bl	8005a98 <_free_r>
 8007396:	230c      	movs	r3, #12
 8007398:	f8ca 3000 	str.w	r3, [sl]
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e7e9      	b.n	800737e <__ssputs_r+0x8a>
	...

080073ac <_svfiprintf_r>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4698      	mov	r8, r3
 80073b2:	898b      	ldrh	r3, [r1, #12]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	b09d      	sub	sp, #116	@ 0x74
 80073b8:	4607      	mov	r7, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	d510      	bpl.n	80073e2 <_svfiprintf_r+0x36>
 80073c0:	690b      	ldr	r3, [r1, #16]
 80073c2:	b973      	cbnz	r3, 80073e2 <_svfiprintf_r+0x36>
 80073c4:	2140      	movs	r1, #64	@ 0x40
 80073c6:	f7fe fbdb 	bl	8005b80 <_malloc_r>
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	6128      	str	r0, [r5, #16]
 80073ce:	b930      	cbnz	r0, 80073de <_svfiprintf_r+0x32>
 80073d0:	230c      	movs	r3, #12
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b01d      	add	sp, #116	@ 0x74
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	2340      	movs	r3, #64	@ 0x40
 80073e0:	616b      	str	r3, [r5, #20]
 80073e2:	2300      	movs	r3, #0
 80073e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e6:	2320      	movs	r3, #32
 80073e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f0:	2330      	movs	r3, #48	@ 0x30
 80073f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007590 <_svfiprintf_r+0x1e4>
 80073f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073fa:	f04f 0901 	mov.w	r9, #1
 80073fe:	4623      	mov	r3, r4
 8007400:	469a      	mov	sl, r3
 8007402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007406:	b10a      	cbz	r2, 800740c <_svfiprintf_r+0x60>
 8007408:	2a25      	cmp	r2, #37	@ 0x25
 800740a:	d1f9      	bne.n	8007400 <_svfiprintf_r+0x54>
 800740c:	ebba 0b04 	subs.w	fp, sl, r4
 8007410:	d00b      	beq.n	800742a <_svfiprintf_r+0x7e>
 8007412:	465b      	mov	r3, fp
 8007414:	4622      	mov	r2, r4
 8007416:	4629      	mov	r1, r5
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ff6b 	bl	80072f4 <__ssputs_r>
 800741e:	3001      	adds	r0, #1
 8007420:	f000 80a7 	beq.w	8007572 <_svfiprintf_r+0x1c6>
 8007424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007426:	445a      	add	r2, fp
 8007428:	9209      	str	r2, [sp, #36]	@ 0x24
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 809f 	beq.w	8007572 <_svfiprintf_r+0x1c6>
 8007434:	2300      	movs	r3, #0
 8007436:	f04f 32ff 	mov.w	r2, #4294967295
 800743a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743e:	f10a 0a01 	add.w	sl, sl, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	9307      	str	r3, [sp, #28]
 8007446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800744a:	931a      	str	r3, [sp, #104]	@ 0x68
 800744c:	4654      	mov	r4, sl
 800744e:	2205      	movs	r2, #5
 8007450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007454:	484e      	ldr	r0, [pc, #312]	@ (8007590 <_svfiprintf_r+0x1e4>)
 8007456:	f7f8 fedb 	bl	8000210 <memchr>
 800745a:	9a04      	ldr	r2, [sp, #16]
 800745c:	b9d8      	cbnz	r0, 8007496 <_svfiprintf_r+0xea>
 800745e:	06d0      	lsls	r0, r2, #27
 8007460:	bf44      	itt	mi
 8007462:	2320      	movmi	r3, #32
 8007464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007468:	0711      	lsls	r1, r2, #28
 800746a:	bf44      	itt	mi
 800746c:	232b      	movmi	r3, #43	@ 0x2b
 800746e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007472:	f89a 3000 	ldrb.w	r3, [sl]
 8007476:	2b2a      	cmp	r3, #42	@ 0x2a
 8007478:	d015      	beq.n	80074a6 <_svfiprintf_r+0xfa>
 800747a:	9a07      	ldr	r2, [sp, #28]
 800747c:	4654      	mov	r4, sl
 800747e:	2000      	movs	r0, #0
 8007480:	f04f 0c0a 	mov.w	ip, #10
 8007484:	4621      	mov	r1, r4
 8007486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800748a:	3b30      	subs	r3, #48	@ 0x30
 800748c:	2b09      	cmp	r3, #9
 800748e:	d94b      	bls.n	8007528 <_svfiprintf_r+0x17c>
 8007490:	b1b0      	cbz	r0, 80074c0 <_svfiprintf_r+0x114>
 8007492:	9207      	str	r2, [sp, #28]
 8007494:	e014      	b.n	80074c0 <_svfiprintf_r+0x114>
 8007496:	eba0 0308 	sub.w	r3, r0, r8
 800749a:	fa09 f303 	lsl.w	r3, r9, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	46a2      	mov	sl, r4
 80074a4:	e7d2      	b.n	800744c <_svfiprintf_r+0xa0>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	1d19      	adds	r1, r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	9103      	str	r1, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfbb      	ittet	lt
 80074b2:	425b      	neglt	r3, r3
 80074b4:	f042 0202 	orrlt.w	r2, r2, #2
 80074b8:	9307      	strge	r3, [sp, #28]
 80074ba:	9307      	strlt	r3, [sp, #28]
 80074bc:	bfb8      	it	lt
 80074be:	9204      	strlt	r2, [sp, #16]
 80074c0:	7823      	ldrb	r3, [r4, #0]
 80074c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074c4:	d10a      	bne.n	80074dc <_svfiprintf_r+0x130>
 80074c6:	7863      	ldrb	r3, [r4, #1]
 80074c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ca:	d132      	bne.n	8007532 <_svfiprintf_r+0x186>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	9203      	str	r2, [sp, #12]
 80074d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074d8:	3402      	adds	r4, #2
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075a0 <_svfiprintf_r+0x1f4>
 80074e0:	7821      	ldrb	r1, [r4, #0]
 80074e2:	2203      	movs	r2, #3
 80074e4:	4650      	mov	r0, sl
 80074e6:	f7f8 fe93 	bl	8000210 <memchr>
 80074ea:	b138      	cbz	r0, 80074fc <_svfiprintf_r+0x150>
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	eba0 000a 	sub.w	r0, r0, sl
 80074f2:	2240      	movs	r2, #64	@ 0x40
 80074f4:	4082      	lsls	r2, r0
 80074f6:	4313      	orrs	r3, r2
 80074f8:	3401      	adds	r4, #1
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007500:	4824      	ldr	r0, [pc, #144]	@ (8007594 <_svfiprintf_r+0x1e8>)
 8007502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007506:	2206      	movs	r2, #6
 8007508:	f7f8 fe82 	bl	8000210 <memchr>
 800750c:	2800      	cmp	r0, #0
 800750e:	d036      	beq.n	800757e <_svfiprintf_r+0x1d2>
 8007510:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <_svfiprintf_r+0x1ec>)
 8007512:	bb1b      	cbnz	r3, 800755c <_svfiprintf_r+0x1b0>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	3307      	adds	r3, #7
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	3308      	adds	r3, #8
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007522:	4433      	add	r3, r6
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	e76a      	b.n	80073fe <_svfiprintf_r+0x52>
 8007528:	fb0c 3202 	mla	r2, ip, r2, r3
 800752c:	460c      	mov	r4, r1
 800752e:	2001      	movs	r0, #1
 8007530:	e7a8      	b.n	8007484 <_svfiprintf_r+0xd8>
 8007532:	2300      	movs	r3, #0
 8007534:	3401      	adds	r4, #1
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	4619      	mov	r1, r3
 800753a:	f04f 0c0a 	mov.w	ip, #10
 800753e:	4620      	mov	r0, r4
 8007540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007544:	3a30      	subs	r2, #48	@ 0x30
 8007546:	2a09      	cmp	r2, #9
 8007548:	d903      	bls.n	8007552 <_svfiprintf_r+0x1a6>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0c6      	beq.n	80074dc <_svfiprintf_r+0x130>
 800754e:	9105      	str	r1, [sp, #20]
 8007550:	e7c4      	b.n	80074dc <_svfiprintf_r+0x130>
 8007552:	fb0c 2101 	mla	r1, ip, r1, r2
 8007556:	4604      	mov	r4, r0
 8007558:	2301      	movs	r3, #1
 800755a:	e7f0      	b.n	800753e <_svfiprintf_r+0x192>
 800755c:	ab03      	add	r3, sp, #12
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	462a      	mov	r2, r5
 8007562:	4b0e      	ldr	r3, [pc, #56]	@ (800759c <_svfiprintf_r+0x1f0>)
 8007564:	a904      	add	r1, sp, #16
 8007566:	4638      	mov	r0, r7
 8007568:	f7fc fcba 	bl	8003ee0 <_printf_float>
 800756c:	1c42      	adds	r2, r0, #1
 800756e:	4606      	mov	r6, r0
 8007570:	d1d6      	bne.n	8007520 <_svfiprintf_r+0x174>
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	065b      	lsls	r3, r3, #25
 8007576:	f53f af2d 	bmi.w	80073d4 <_svfiprintf_r+0x28>
 800757a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800757c:	e72c      	b.n	80073d8 <_svfiprintf_r+0x2c>
 800757e:	ab03      	add	r3, sp, #12
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	462a      	mov	r2, r5
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <_svfiprintf_r+0x1f0>)
 8007586:	a904      	add	r1, sp, #16
 8007588:	4638      	mov	r0, r7
 800758a:	f7fc ff41 	bl	8004410 <_printf_i>
 800758e:	e7ed      	b.n	800756c <_svfiprintf_r+0x1c0>
 8007590:	08008655 	.word	0x08008655
 8007594:	0800865f 	.word	0x0800865f
 8007598:	08003ee1 	.word	0x08003ee1
 800759c:	080072f5 	.word	0x080072f5
 80075a0:	0800865b 	.word	0x0800865b

080075a4 <__sfputc_r>:
 80075a4:	6893      	ldr	r3, [r2, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	b410      	push	{r4}
 80075ac:	6093      	str	r3, [r2, #8]
 80075ae:	da08      	bge.n	80075c2 <__sfputc_r+0x1e>
 80075b0:	6994      	ldr	r4, [r2, #24]
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	db01      	blt.n	80075ba <__sfputc_r+0x16>
 80075b6:	290a      	cmp	r1, #10
 80075b8:	d103      	bne.n	80075c2 <__sfputc_r+0x1e>
 80075ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075be:	f000 b9df 	b.w	8007980 <__swbuf_r>
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	1c58      	adds	r0, r3, #1
 80075c6:	6010      	str	r0, [r2, #0]
 80075c8:	7019      	strb	r1, [r3, #0]
 80075ca:	4608      	mov	r0, r1
 80075cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <__sfputs_r>:
 80075d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	4614      	mov	r4, r2
 80075da:	18d5      	adds	r5, r2, r3
 80075dc:	42ac      	cmp	r4, r5
 80075de:	d101      	bne.n	80075e4 <__sfputs_r+0x12>
 80075e0:	2000      	movs	r0, #0
 80075e2:	e007      	b.n	80075f4 <__sfputs_r+0x22>
 80075e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e8:	463a      	mov	r2, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ffda 	bl	80075a4 <__sfputc_r>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d1f3      	bne.n	80075dc <__sfputs_r+0xa>
 80075f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075f8 <_vfiprintf_r>:
 80075f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fc:	460d      	mov	r5, r1
 80075fe:	b09d      	sub	sp, #116	@ 0x74
 8007600:	4614      	mov	r4, r2
 8007602:	4698      	mov	r8, r3
 8007604:	4606      	mov	r6, r0
 8007606:	b118      	cbz	r0, 8007610 <_vfiprintf_r+0x18>
 8007608:	6a03      	ldr	r3, [r0, #32]
 800760a:	b90b      	cbnz	r3, 8007610 <_vfiprintf_r+0x18>
 800760c:	f7fd fab8 	bl	8004b80 <__sinit>
 8007610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007612:	07d9      	lsls	r1, r3, #31
 8007614:	d405      	bmi.n	8007622 <_vfiprintf_r+0x2a>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d402      	bmi.n	8007622 <_vfiprintf_r+0x2a>
 800761c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800761e:	f7fd fbda 	bl	8004dd6 <__retarget_lock_acquire_recursive>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	071b      	lsls	r3, r3, #28
 8007626:	d501      	bpl.n	800762c <_vfiprintf_r+0x34>
 8007628:	692b      	ldr	r3, [r5, #16]
 800762a:	b99b      	cbnz	r3, 8007654 <_vfiprintf_r+0x5c>
 800762c:	4629      	mov	r1, r5
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f9e4 	bl	80079fc <__swsetup_r>
 8007634:	b170      	cbz	r0, 8007654 <_vfiprintf_r+0x5c>
 8007636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007638:	07dc      	lsls	r4, r3, #31
 800763a:	d504      	bpl.n	8007646 <_vfiprintf_r+0x4e>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b01d      	add	sp, #116	@ 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	0598      	lsls	r0, r3, #22
 800764a:	d4f7      	bmi.n	800763c <_vfiprintf_r+0x44>
 800764c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800764e:	f7fd fbc3 	bl	8004dd8 <__retarget_lock_release_recursive>
 8007652:	e7f3      	b.n	800763c <_vfiprintf_r+0x44>
 8007654:	2300      	movs	r3, #0
 8007656:	9309      	str	r3, [sp, #36]	@ 0x24
 8007658:	2320      	movs	r3, #32
 800765a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800765e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007662:	2330      	movs	r3, #48	@ 0x30
 8007664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007814 <_vfiprintf_r+0x21c>
 8007668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800766c:	f04f 0901 	mov.w	r9, #1
 8007670:	4623      	mov	r3, r4
 8007672:	469a      	mov	sl, r3
 8007674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007678:	b10a      	cbz	r2, 800767e <_vfiprintf_r+0x86>
 800767a:	2a25      	cmp	r2, #37	@ 0x25
 800767c:	d1f9      	bne.n	8007672 <_vfiprintf_r+0x7a>
 800767e:	ebba 0b04 	subs.w	fp, sl, r4
 8007682:	d00b      	beq.n	800769c <_vfiprintf_r+0xa4>
 8007684:	465b      	mov	r3, fp
 8007686:	4622      	mov	r2, r4
 8007688:	4629      	mov	r1, r5
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff ffa1 	bl	80075d2 <__sfputs_r>
 8007690:	3001      	adds	r0, #1
 8007692:	f000 80a7 	beq.w	80077e4 <_vfiprintf_r+0x1ec>
 8007696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007698:	445a      	add	r2, fp
 800769a:	9209      	str	r2, [sp, #36]	@ 0x24
 800769c:	f89a 3000 	ldrb.w	r3, [sl]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 809f 	beq.w	80077e4 <_vfiprintf_r+0x1ec>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b0:	f10a 0a01 	add.w	sl, sl, #1
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80076be:	4654      	mov	r4, sl
 80076c0:	2205      	movs	r2, #5
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	4853      	ldr	r0, [pc, #332]	@ (8007814 <_vfiprintf_r+0x21c>)
 80076c8:	f7f8 fda2 	bl	8000210 <memchr>
 80076cc:	9a04      	ldr	r2, [sp, #16]
 80076ce:	b9d8      	cbnz	r0, 8007708 <_vfiprintf_r+0x110>
 80076d0:	06d1      	lsls	r1, r2, #27
 80076d2:	bf44      	itt	mi
 80076d4:	2320      	movmi	r3, #32
 80076d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076da:	0713      	lsls	r3, r2, #28
 80076dc:	bf44      	itt	mi
 80076de:	232b      	movmi	r3, #43	@ 0x2b
 80076e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e4:	f89a 3000 	ldrb.w	r3, [sl]
 80076e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ea:	d015      	beq.n	8007718 <_vfiprintf_r+0x120>
 80076ec:	9a07      	ldr	r2, [sp, #28]
 80076ee:	4654      	mov	r4, sl
 80076f0:	2000      	movs	r0, #0
 80076f2:	f04f 0c0a 	mov.w	ip, #10
 80076f6:	4621      	mov	r1, r4
 80076f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076fc:	3b30      	subs	r3, #48	@ 0x30
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d94b      	bls.n	800779a <_vfiprintf_r+0x1a2>
 8007702:	b1b0      	cbz	r0, 8007732 <_vfiprintf_r+0x13a>
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	e014      	b.n	8007732 <_vfiprintf_r+0x13a>
 8007708:	eba0 0308 	sub.w	r3, r0, r8
 800770c:	fa09 f303 	lsl.w	r3, r9, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	46a2      	mov	sl, r4
 8007716:	e7d2      	b.n	80076be <_vfiprintf_r+0xc6>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	1d19      	adds	r1, r3, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	9103      	str	r1, [sp, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbb      	ittet	lt
 8007724:	425b      	neglt	r3, r3
 8007726:	f042 0202 	orrlt.w	r2, r2, #2
 800772a:	9307      	strge	r3, [sp, #28]
 800772c:	9307      	strlt	r3, [sp, #28]
 800772e:	bfb8      	it	lt
 8007730:	9204      	strlt	r2, [sp, #16]
 8007732:	7823      	ldrb	r3, [r4, #0]
 8007734:	2b2e      	cmp	r3, #46	@ 0x2e
 8007736:	d10a      	bne.n	800774e <_vfiprintf_r+0x156>
 8007738:	7863      	ldrb	r3, [r4, #1]
 800773a:	2b2a      	cmp	r3, #42	@ 0x2a
 800773c:	d132      	bne.n	80077a4 <_vfiprintf_r+0x1ac>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	1d1a      	adds	r2, r3, #4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	9203      	str	r2, [sp, #12]
 8007746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800774a:	3402      	adds	r4, #2
 800774c:	9305      	str	r3, [sp, #20]
 800774e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007824 <_vfiprintf_r+0x22c>
 8007752:	7821      	ldrb	r1, [r4, #0]
 8007754:	2203      	movs	r2, #3
 8007756:	4650      	mov	r0, sl
 8007758:	f7f8 fd5a 	bl	8000210 <memchr>
 800775c:	b138      	cbz	r0, 800776e <_vfiprintf_r+0x176>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	eba0 000a 	sub.w	r0, r0, sl
 8007764:	2240      	movs	r2, #64	@ 0x40
 8007766:	4082      	lsls	r2, r0
 8007768:	4313      	orrs	r3, r2
 800776a:	3401      	adds	r4, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007772:	4829      	ldr	r0, [pc, #164]	@ (8007818 <_vfiprintf_r+0x220>)
 8007774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007778:	2206      	movs	r2, #6
 800777a:	f7f8 fd49 	bl	8000210 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	d03f      	beq.n	8007802 <_vfiprintf_r+0x20a>
 8007782:	4b26      	ldr	r3, [pc, #152]	@ (800781c <_vfiprintf_r+0x224>)
 8007784:	bb1b      	cbnz	r3, 80077ce <_vfiprintf_r+0x1d6>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	3308      	adds	r3, #8
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007794:	443b      	add	r3, r7
 8007796:	9309      	str	r3, [sp, #36]	@ 0x24
 8007798:	e76a      	b.n	8007670 <_vfiprintf_r+0x78>
 800779a:	fb0c 3202 	mla	r2, ip, r2, r3
 800779e:	460c      	mov	r4, r1
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7a8      	b.n	80076f6 <_vfiprintf_r+0xfe>
 80077a4:	2300      	movs	r3, #0
 80077a6:	3401      	adds	r4, #1
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	4619      	mov	r1, r3
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4620      	mov	r0, r4
 80077b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b6:	3a30      	subs	r2, #48	@ 0x30
 80077b8:	2a09      	cmp	r2, #9
 80077ba:	d903      	bls.n	80077c4 <_vfiprintf_r+0x1cc>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0c6      	beq.n	800774e <_vfiprintf_r+0x156>
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	e7c4      	b.n	800774e <_vfiprintf_r+0x156>
 80077c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c8:	4604      	mov	r4, r0
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7f0      	b.n	80077b0 <_vfiprintf_r+0x1b8>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b12      	ldr	r3, [pc, #72]	@ (8007820 <_vfiprintf_r+0x228>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4630      	mov	r0, r6
 80077da:	f7fc fb81 	bl	8003ee0 <_printf_float>
 80077de:	4607      	mov	r7, r0
 80077e0:	1c78      	adds	r0, r7, #1
 80077e2:	d1d6      	bne.n	8007792 <_vfiprintf_r+0x19a>
 80077e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077e6:	07d9      	lsls	r1, r3, #31
 80077e8:	d405      	bmi.n	80077f6 <_vfiprintf_r+0x1fe>
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	059a      	lsls	r2, r3, #22
 80077ee:	d402      	bmi.n	80077f6 <_vfiprintf_r+0x1fe>
 80077f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077f2:	f7fd faf1 	bl	8004dd8 <__retarget_lock_release_recursive>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	065b      	lsls	r3, r3, #25
 80077fa:	f53f af1f 	bmi.w	800763c <_vfiprintf_r+0x44>
 80077fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007800:	e71e      	b.n	8007640 <_vfiprintf_r+0x48>
 8007802:	ab03      	add	r3, sp, #12
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	462a      	mov	r2, r5
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <_vfiprintf_r+0x228>)
 800780a:	a904      	add	r1, sp, #16
 800780c:	4630      	mov	r0, r6
 800780e:	f7fc fdff 	bl	8004410 <_printf_i>
 8007812:	e7e4      	b.n	80077de <_vfiprintf_r+0x1e6>
 8007814:	08008655 	.word	0x08008655
 8007818:	0800865f 	.word	0x0800865f
 800781c:	08003ee1 	.word	0x08003ee1
 8007820:	080075d3 	.word	0x080075d3
 8007824:	0800865b 	.word	0x0800865b

08007828 <__sflush_r>:
 8007828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	0716      	lsls	r6, r2, #28
 8007832:	4605      	mov	r5, r0
 8007834:	460c      	mov	r4, r1
 8007836:	d454      	bmi.n	80078e2 <__sflush_r+0xba>
 8007838:	684b      	ldr	r3, [r1, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dc02      	bgt.n	8007844 <__sflush_r+0x1c>
 800783e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	dd48      	ble.n	80078d6 <__sflush_r+0xae>
 8007844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007846:	2e00      	cmp	r6, #0
 8007848:	d045      	beq.n	80078d6 <__sflush_r+0xae>
 800784a:	2300      	movs	r3, #0
 800784c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007850:	682f      	ldr	r7, [r5, #0]
 8007852:	6a21      	ldr	r1, [r4, #32]
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	d030      	beq.n	80078ba <__sflush_r+0x92>
 8007858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	0759      	lsls	r1, r3, #29
 800785e:	d505      	bpl.n	800786c <__sflush_r+0x44>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007866:	b10b      	cbz	r3, 800786c <__sflush_r+0x44>
 8007868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	2300      	movs	r3, #0
 800786e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007870:	6a21      	ldr	r1, [r4, #32]
 8007872:	4628      	mov	r0, r5
 8007874:	47b0      	blx	r6
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	d106      	bne.n	800788a <__sflush_r+0x62>
 800787c:	6829      	ldr	r1, [r5, #0]
 800787e:	291d      	cmp	r1, #29
 8007880:	d82b      	bhi.n	80078da <__sflush_r+0xb2>
 8007882:	4a2a      	ldr	r2, [pc, #168]	@ (800792c <__sflush_r+0x104>)
 8007884:	40ca      	lsrs	r2, r1
 8007886:	07d6      	lsls	r6, r2, #31
 8007888:	d527      	bpl.n	80078da <__sflush_r+0xb2>
 800788a:	2200      	movs	r2, #0
 800788c:	6062      	str	r2, [r4, #4]
 800788e:	04d9      	lsls	r1, r3, #19
 8007890:	6922      	ldr	r2, [r4, #16]
 8007892:	6022      	str	r2, [r4, #0]
 8007894:	d504      	bpl.n	80078a0 <__sflush_r+0x78>
 8007896:	1c42      	adds	r2, r0, #1
 8007898:	d101      	bne.n	800789e <__sflush_r+0x76>
 800789a:	682b      	ldr	r3, [r5, #0]
 800789c:	b903      	cbnz	r3, 80078a0 <__sflush_r+0x78>
 800789e:	6560      	str	r0, [r4, #84]	@ 0x54
 80078a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078a2:	602f      	str	r7, [r5, #0]
 80078a4:	b1b9      	cbz	r1, 80078d6 <__sflush_r+0xae>
 80078a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d002      	beq.n	80078b4 <__sflush_r+0x8c>
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7fe f8f2 	bl	8005a98 <_free_r>
 80078b4:	2300      	movs	r3, #0
 80078b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078b8:	e00d      	b.n	80078d6 <__sflush_r+0xae>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4628      	mov	r0, r5
 80078be:	47b0      	blx	r6
 80078c0:	4602      	mov	r2, r0
 80078c2:	1c50      	adds	r0, r2, #1
 80078c4:	d1c9      	bne.n	800785a <__sflush_r+0x32>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0c6      	beq.n	800785a <__sflush_r+0x32>
 80078cc:	2b1d      	cmp	r3, #29
 80078ce:	d001      	beq.n	80078d4 <__sflush_r+0xac>
 80078d0:	2b16      	cmp	r3, #22
 80078d2:	d11e      	bne.n	8007912 <__sflush_r+0xea>
 80078d4:	602f      	str	r7, [r5, #0]
 80078d6:	2000      	movs	r0, #0
 80078d8:	e022      	b.n	8007920 <__sflush_r+0xf8>
 80078da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078de:	b21b      	sxth	r3, r3
 80078e0:	e01b      	b.n	800791a <__sflush_r+0xf2>
 80078e2:	690f      	ldr	r7, [r1, #16]
 80078e4:	2f00      	cmp	r7, #0
 80078e6:	d0f6      	beq.n	80078d6 <__sflush_r+0xae>
 80078e8:	0793      	lsls	r3, r2, #30
 80078ea:	680e      	ldr	r6, [r1, #0]
 80078ec:	bf08      	it	eq
 80078ee:	694b      	ldreq	r3, [r1, #20]
 80078f0:	600f      	str	r7, [r1, #0]
 80078f2:	bf18      	it	ne
 80078f4:	2300      	movne	r3, #0
 80078f6:	eba6 0807 	sub.w	r8, r6, r7
 80078fa:	608b      	str	r3, [r1, #8]
 80078fc:	f1b8 0f00 	cmp.w	r8, #0
 8007900:	dde9      	ble.n	80078d6 <__sflush_r+0xae>
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007906:	4643      	mov	r3, r8
 8007908:	463a      	mov	r2, r7
 800790a:	4628      	mov	r0, r5
 800790c:	47b0      	blx	r6
 800790e:	2800      	cmp	r0, #0
 8007910:	dc08      	bgt.n	8007924 <__sflush_r+0xfc>
 8007912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	4407      	add	r7, r0
 8007926:	eba8 0800 	sub.w	r8, r8, r0
 800792a:	e7e7      	b.n	80078fc <__sflush_r+0xd4>
 800792c:	20400001 	.word	0x20400001

08007930 <_fflush_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	690b      	ldr	r3, [r1, #16]
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	b913      	cbnz	r3, 8007940 <_fflush_r+0x10>
 800793a:	2500      	movs	r5, #0
 800793c:	4628      	mov	r0, r5
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	b118      	cbz	r0, 800794a <_fflush_r+0x1a>
 8007942:	6a03      	ldr	r3, [r0, #32]
 8007944:	b90b      	cbnz	r3, 800794a <_fflush_r+0x1a>
 8007946:	f7fd f91b 	bl	8004b80 <__sinit>
 800794a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f3      	beq.n	800793a <_fflush_r+0xa>
 8007952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007954:	07d0      	lsls	r0, r2, #31
 8007956:	d404      	bmi.n	8007962 <_fflush_r+0x32>
 8007958:	0599      	lsls	r1, r3, #22
 800795a:	d402      	bmi.n	8007962 <_fflush_r+0x32>
 800795c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795e:	f7fd fa3a 	bl	8004dd6 <__retarget_lock_acquire_recursive>
 8007962:	4628      	mov	r0, r5
 8007964:	4621      	mov	r1, r4
 8007966:	f7ff ff5f 	bl	8007828 <__sflush_r>
 800796a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800796c:	07da      	lsls	r2, r3, #31
 800796e:	4605      	mov	r5, r0
 8007970:	d4e4      	bmi.n	800793c <_fflush_r+0xc>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	059b      	lsls	r3, r3, #22
 8007976:	d4e1      	bmi.n	800793c <_fflush_r+0xc>
 8007978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797a:	f7fd fa2d 	bl	8004dd8 <__retarget_lock_release_recursive>
 800797e:	e7dd      	b.n	800793c <_fflush_r+0xc>

08007980 <__swbuf_r>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	460e      	mov	r6, r1
 8007984:	4614      	mov	r4, r2
 8007986:	4605      	mov	r5, r0
 8007988:	b118      	cbz	r0, 8007992 <__swbuf_r+0x12>
 800798a:	6a03      	ldr	r3, [r0, #32]
 800798c:	b90b      	cbnz	r3, 8007992 <__swbuf_r+0x12>
 800798e:	f7fd f8f7 	bl	8004b80 <__sinit>
 8007992:	69a3      	ldr	r3, [r4, #24]
 8007994:	60a3      	str	r3, [r4, #8]
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	071a      	lsls	r2, r3, #28
 800799a:	d501      	bpl.n	80079a0 <__swbuf_r+0x20>
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	b943      	cbnz	r3, 80079b2 <__swbuf_r+0x32>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f82a 	bl	80079fc <__swsetup_r>
 80079a8:	b118      	cbz	r0, 80079b2 <__swbuf_r+0x32>
 80079aa:	f04f 37ff 	mov.w	r7, #4294967295
 80079ae:	4638      	mov	r0, r7
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	6922      	ldr	r2, [r4, #16]
 80079b6:	1a98      	subs	r0, r3, r2
 80079b8:	6963      	ldr	r3, [r4, #20]
 80079ba:	b2f6      	uxtb	r6, r6
 80079bc:	4283      	cmp	r3, r0
 80079be:	4637      	mov	r7, r6
 80079c0:	dc05      	bgt.n	80079ce <__swbuf_r+0x4e>
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f7ff ffb3 	bl	8007930 <_fflush_r>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d1ed      	bne.n	80079aa <__swbuf_r+0x2a>
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	60a3      	str	r3, [r4, #8]
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	701e      	strb	r6, [r3, #0]
 80079dc:	6962      	ldr	r2, [r4, #20]
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d004      	beq.n	80079ee <__swbuf_r+0x6e>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	07db      	lsls	r3, r3, #31
 80079e8:	d5e1      	bpl.n	80079ae <__swbuf_r+0x2e>
 80079ea:	2e0a      	cmp	r6, #10
 80079ec:	d1df      	bne.n	80079ae <__swbuf_r+0x2e>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	f7ff ff9d 	bl	8007930 <_fflush_r>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0d9      	beq.n	80079ae <__swbuf_r+0x2e>
 80079fa:	e7d6      	b.n	80079aa <__swbuf_r+0x2a>

080079fc <__swsetup_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4b29      	ldr	r3, [pc, #164]	@ (8007aa4 <__swsetup_r+0xa8>)
 8007a00:	4605      	mov	r5, r0
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	460c      	mov	r4, r1
 8007a06:	b118      	cbz	r0, 8007a10 <__swsetup_r+0x14>
 8007a08:	6a03      	ldr	r3, [r0, #32]
 8007a0a:	b90b      	cbnz	r3, 8007a10 <__swsetup_r+0x14>
 8007a0c:	f7fd f8b8 	bl	8004b80 <__sinit>
 8007a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a14:	0719      	lsls	r1, r3, #28
 8007a16:	d422      	bmi.n	8007a5e <__swsetup_r+0x62>
 8007a18:	06da      	lsls	r2, r3, #27
 8007a1a:	d407      	bmi.n	8007a2c <__swsetup_r+0x30>
 8007a1c:	2209      	movs	r2, #9
 8007a1e:	602a      	str	r2, [r5, #0]
 8007a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	e033      	b.n	8007a94 <__swsetup_r+0x98>
 8007a2c:	0758      	lsls	r0, r3, #29
 8007a2e:	d512      	bpl.n	8007a56 <__swsetup_r+0x5a>
 8007a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a32:	b141      	cbz	r1, 8007a46 <__swsetup_r+0x4a>
 8007a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a38:	4299      	cmp	r1, r3
 8007a3a:	d002      	beq.n	8007a42 <__swsetup_r+0x46>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f7fe f82b 	bl	8005a98 <_free_r>
 8007a42:	2300      	movs	r3, #0
 8007a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	6063      	str	r3, [r4, #4]
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f043 0308 	orr.w	r3, r3, #8
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	b94b      	cbnz	r3, 8007a76 <__swsetup_r+0x7a>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a6c:	d003      	beq.n	8007a76 <__swsetup_r+0x7a>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 fc5d 	bl	8008330 <__smakebuf_r>
 8007a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7a:	f013 0201 	ands.w	r2, r3, #1
 8007a7e:	d00a      	beq.n	8007a96 <__swsetup_r+0x9a>
 8007a80:	2200      	movs	r2, #0
 8007a82:	60a2      	str	r2, [r4, #8]
 8007a84:	6962      	ldr	r2, [r4, #20]
 8007a86:	4252      	negs	r2, r2
 8007a88:	61a2      	str	r2, [r4, #24]
 8007a8a:	6922      	ldr	r2, [r4, #16]
 8007a8c:	b942      	cbnz	r2, 8007aa0 <__swsetup_r+0xa4>
 8007a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a92:	d1c5      	bne.n	8007a20 <__swsetup_r+0x24>
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
 8007a96:	0799      	lsls	r1, r3, #30
 8007a98:	bf58      	it	pl
 8007a9a:	6962      	ldrpl	r2, [r4, #20]
 8007a9c:	60a2      	str	r2, [r4, #8]
 8007a9e:	e7f4      	b.n	8007a8a <__swsetup_r+0x8e>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e7f7      	b.n	8007a94 <__swsetup_r+0x98>
 8007aa4:	20000018 	.word	0x20000018

08007aa8 <memmove>:
 8007aa8:	4288      	cmp	r0, r1
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	eb01 0402 	add.w	r4, r1, r2
 8007ab0:	d902      	bls.n	8007ab8 <memmove+0x10>
 8007ab2:	4284      	cmp	r4, r0
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	d807      	bhi.n	8007ac8 <memmove+0x20>
 8007ab8:	1e43      	subs	r3, r0, #1
 8007aba:	42a1      	cmp	r1, r4
 8007abc:	d008      	beq.n	8007ad0 <memmove+0x28>
 8007abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ac6:	e7f8      	b.n	8007aba <memmove+0x12>
 8007ac8:	4402      	add	r2, r0
 8007aca:	4601      	mov	r1, r0
 8007acc:	428a      	cmp	r2, r1
 8007ace:	d100      	bne.n	8007ad2 <memmove+0x2a>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ada:	e7f7      	b.n	8007acc <memmove+0x24>

08007adc <strncmp>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	b16a      	cbz	r2, 8007afc <strncmp+0x20>
 8007ae0:	3901      	subs	r1, #1
 8007ae2:	1884      	adds	r4, r0, r2
 8007ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d103      	bne.n	8007af8 <strncmp+0x1c>
 8007af0:	42a0      	cmp	r0, r4
 8007af2:	d001      	beq.n	8007af8 <strncmp+0x1c>
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d1f5      	bne.n	8007ae4 <strncmp+0x8>
 8007af8:	1ad0      	subs	r0, r2, r3
 8007afa:	bd10      	pop	{r4, pc}
 8007afc:	4610      	mov	r0, r2
 8007afe:	e7fc      	b.n	8007afa <strncmp+0x1e>

08007b00 <_sbrk_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	@ (8007b1c <_sbrk_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 fe98 	bl	8001840 <_sbrk>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_sbrk_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_sbrk_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000430 	.word	0x20000430

08007b20 <memcpy>:
 8007b20:	440a      	add	r2, r1
 8007b22:	4291      	cmp	r1, r2
 8007b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b28:	d100      	bne.n	8007b2c <memcpy+0xc>
 8007b2a:	4770      	bx	lr
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b36:	4291      	cmp	r1, r2
 8007b38:	d1f9      	bne.n	8007b2e <memcpy+0xe>
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	0000      	movs	r0, r0
	...

08007b40 <nan>:
 8007b40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b48 <nan+0x8>
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	7ff80000 	.word	0x7ff80000

08007b50 <__assert_func>:
 8007b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b52:	4614      	mov	r4, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b09      	ldr	r3, [pc, #36]	@ (8007b7c <__assert_func+0x2c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	68d8      	ldr	r0, [r3, #12]
 8007b5e:	b14c      	cbz	r4, 8007b74 <__assert_func+0x24>
 8007b60:	4b07      	ldr	r3, [pc, #28]	@ (8007b80 <__assert_func+0x30>)
 8007b62:	9100      	str	r1, [sp, #0]
 8007b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b68:	4906      	ldr	r1, [pc, #24]	@ (8007b84 <__assert_func+0x34>)
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	f000 fba8 	bl	80082c0 <fiprintf>
 8007b70:	f000 fc3c 	bl	80083ec <abort>
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <__assert_func+0x38>)
 8007b76:	461c      	mov	r4, r3
 8007b78:	e7f3      	b.n	8007b62 <__assert_func+0x12>
 8007b7a:	bf00      	nop
 8007b7c:	20000018 	.word	0x20000018
 8007b80:	0800866e 	.word	0x0800866e
 8007b84:	0800867b 	.word	0x0800867b
 8007b88:	080086a9 	.word	0x080086a9

08007b8c <_calloc_r>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	fba1 5402 	umull	r5, r4, r1, r2
 8007b92:	b934      	cbnz	r4, 8007ba2 <_calloc_r+0x16>
 8007b94:	4629      	mov	r1, r5
 8007b96:	f7fd fff3 	bl	8005b80 <_malloc_r>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	b928      	cbnz	r0, 8007baa <_calloc_r+0x1e>
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
 8007ba2:	220c      	movs	r2, #12
 8007ba4:	6002      	str	r2, [r0, #0]
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	e7f9      	b.n	8007b9e <_calloc_r+0x12>
 8007baa:	462a      	mov	r2, r5
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7fd f894 	bl	8004cda <memset>
 8007bb2:	e7f4      	b.n	8007b9e <_calloc_r+0x12>

08007bb4 <rshift>:
 8007bb4:	6903      	ldr	r3, [r0, #16]
 8007bb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007bba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007bc2:	f100 0414 	add.w	r4, r0, #20
 8007bc6:	dd45      	ble.n	8007c54 <rshift+0xa0>
 8007bc8:	f011 011f 	ands.w	r1, r1, #31
 8007bcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007bd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007bd4:	d10c      	bne.n	8007bf0 <rshift+0x3c>
 8007bd6:	f100 0710 	add.w	r7, r0, #16
 8007bda:	4629      	mov	r1, r5
 8007bdc:	42b1      	cmp	r1, r6
 8007bde:	d334      	bcc.n	8007c4a <rshift+0x96>
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	1eea      	subs	r2, r5, #3
 8007be6:	4296      	cmp	r6, r2
 8007be8:	bf38      	it	cc
 8007bea:	2300      	movcc	r3, #0
 8007bec:	4423      	add	r3, r4
 8007bee:	e015      	b.n	8007c1c <rshift+0x68>
 8007bf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bf4:	f1c1 0820 	rsb	r8, r1, #32
 8007bf8:	40cf      	lsrs	r7, r1
 8007bfa:	f105 0e04 	add.w	lr, r5, #4
 8007bfe:	46a1      	mov	r9, r4
 8007c00:	4576      	cmp	r6, lr
 8007c02:	46f4      	mov	ip, lr
 8007c04:	d815      	bhi.n	8007c32 <rshift+0x7e>
 8007c06:	1a9a      	subs	r2, r3, r2
 8007c08:	0092      	lsls	r2, r2, #2
 8007c0a:	3a04      	subs	r2, #4
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	42ae      	cmp	r6, r5
 8007c10:	bf38      	it	cc
 8007c12:	2200      	movcc	r2, #0
 8007c14:	18a3      	adds	r3, r4, r2
 8007c16:	50a7      	str	r7, [r4, r2]
 8007c18:	b107      	cbz	r7, 8007c1c <rshift+0x68>
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	1b1a      	subs	r2, r3, r4
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c24:	bf08      	it	eq
 8007c26:	2300      	moveq	r3, #0
 8007c28:	6102      	str	r2, [r0, #16]
 8007c2a:	bf08      	it	eq
 8007c2c:	6143      	streq	r3, [r0, #20]
 8007c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c32:	f8dc c000 	ldr.w	ip, [ip]
 8007c36:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c3a:	ea4c 0707 	orr.w	r7, ip, r7
 8007c3e:	f849 7b04 	str.w	r7, [r9], #4
 8007c42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c46:	40cf      	lsrs	r7, r1
 8007c48:	e7da      	b.n	8007c00 <rshift+0x4c>
 8007c4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c52:	e7c3      	b.n	8007bdc <rshift+0x28>
 8007c54:	4623      	mov	r3, r4
 8007c56:	e7e1      	b.n	8007c1c <rshift+0x68>

08007c58 <__hexdig_fun>:
 8007c58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d802      	bhi.n	8007c66 <__hexdig_fun+0xe>
 8007c60:	3820      	subs	r0, #32
 8007c62:	b2c0      	uxtb	r0, r0
 8007c64:	4770      	bx	lr
 8007c66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d801      	bhi.n	8007c72 <__hexdig_fun+0x1a>
 8007c6e:	3847      	subs	r0, #71	@ 0x47
 8007c70:	e7f7      	b.n	8007c62 <__hexdig_fun+0xa>
 8007c72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	d801      	bhi.n	8007c7e <__hexdig_fun+0x26>
 8007c7a:	3827      	subs	r0, #39	@ 0x27
 8007c7c:	e7f1      	b.n	8007c62 <__hexdig_fun+0xa>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	4770      	bx	lr
	...

08007c84 <__gethex>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	468a      	mov	sl, r1
 8007c8c:	9302      	str	r3, [sp, #8]
 8007c8e:	680b      	ldr	r3, [r1, #0]
 8007c90:	9001      	str	r0, [sp, #4]
 8007c92:	4690      	mov	r8, r2
 8007c94:	1c9c      	adds	r4, r3, #2
 8007c96:	46a1      	mov	r9, r4
 8007c98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c9c:	2830      	cmp	r0, #48	@ 0x30
 8007c9e:	d0fa      	beq.n	8007c96 <__gethex+0x12>
 8007ca0:	eba9 0303 	sub.w	r3, r9, r3
 8007ca4:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ca8:	f7ff ffd6 	bl	8007c58 <__hexdig_fun>
 8007cac:	4605      	mov	r5, r0
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d168      	bne.n	8007d84 <__gethex+0x100>
 8007cb2:	49a0      	ldr	r1, [pc, #640]	@ (8007f34 <__gethex+0x2b0>)
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4648      	mov	r0, r9
 8007cb8:	f7ff ff10 	bl	8007adc <strncmp>
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d167      	bne.n	8007d92 <__gethex+0x10e>
 8007cc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007cc6:	4626      	mov	r6, r4
 8007cc8:	f7ff ffc6 	bl	8007c58 <__hexdig_fun>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d062      	beq.n	8007d96 <__gethex+0x112>
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	7818      	ldrb	r0, [r3, #0]
 8007cd4:	2830      	cmp	r0, #48	@ 0x30
 8007cd6:	4699      	mov	r9, r3
 8007cd8:	f103 0301 	add.w	r3, r3, #1
 8007cdc:	d0f9      	beq.n	8007cd2 <__gethex+0x4e>
 8007cde:	f7ff ffbb 	bl	8007c58 <__hexdig_fun>
 8007ce2:	fab0 f580 	clz	r5, r0
 8007ce6:	096d      	lsrs	r5, r5, #5
 8007ce8:	f04f 0b01 	mov.w	fp, #1
 8007cec:	464a      	mov	r2, r9
 8007cee:	4616      	mov	r6, r2
 8007cf0:	3201      	adds	r2, #1
 8007cf2:	7830      	ldrb	r0, [r6, #0]
 8007cf4:	f7ff ffb0 	bl	8007c58 <__hexdig_fun>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d1f8      	bne.n	8007cee <__gethex+0x6a>
 8007cfc:	498d      	ldr	r1, [pc, #564]	@ (8007f34 <__gethex+0x2b0>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7ff feeb 	bl	8007adc <strncmp>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d13f      	bne.n	8007d8a <__gethex+0x106>
 8007d0a:	b944      	cbnz	r4, 8007d1e <__gethex+0x9a>
 8007d0c:	1c74      	adds	r4, r6, #1
 8007d0e:	4622      	mov	r2, r4
 8007d10:	4616      	mov	r6, r2
 8007d12:	3201      	adds	r2, #1
 8007d14:	7830      	ldrb	r0, [r6, #0]
 8007d16:	f7ff ff9f 	bl	8007c58 <__hexdig_fun>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d1f8      	bne.n	8007d10 <__gethex+0x8c>
 8007d1e:	1ba4      	subs	r4, r4, r6
 8007d20:	00a7      	lsls	r7, r4, #2
 8007d22:	7833      	ldrb	r3, [r6, #0]
 8007d24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007d28:	2b50      	cmp	r3, #80	@ 0x50
 8007d2a:	d13e      	bne.n	8007daa <__gethex+0x126>
 8007d2c:	7873      	ldrb	r3, [r6, #1]
 8007d2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d30:	d033      	beq.n	8007d9a <__gethex+0x116>
 8007d32:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d34:	d034      	beq.n	8007da0 <__gethex+0x11c>
 8007d36:	1c71      	adds	r1, r6, #1
 8007d38:	2400      	movs	r4, #0
 8007d3a:	7808      	ldrb	r0, [r1, #0]
 8007d3c:	f7ff ff8c 	bl	8007c58 <__hexdig_fun>
 8007d40:	1e43      	subs	r3, r0, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b18      	cmp	r3, #24
 8007d46:	d830      	bhi.n	8007daa <__gethex+0x126>
 8007d48:	f1a0 0210 	sub.w	r2, r0, #16
 8007d4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d50:	f7ff ff82 	bl	8007c58 <__hexdig_fun>
 8007d54:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d58:	fa5f fc8c 	uxtb.w	ip, ip
 8007d5c:	f1bc 0f18 	cmp.w	ip, #24
 8007d60:	f04f 030a 	mov.w	r3, #10
 8007d64:	d91e      	bls.n	8007da4 <__gethex+0x120>
 8007d66:	b104      	cbz	r4, 8007d6a <__gethex+0xe6>
 8007d68:	4252      	negs	r2, r2
 8007d6a:	4417      	add	r7, r2
 8007d6c:	f8ca 1000 	str.w	r1, [sl]
 8007d70:	b1ed      	cbz	r5, 8007dae <__gethex+0x12a>
 8007d72:	f1bb 0f00 	cmp.w	fp, #0
 8007d76:	bf0c      	ite	eq
 8007d78:	2506      	moveq	r5, #6
 8007d7a:	2500      	movne	r5, #0
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	b005      	add	sp, #20
 8007d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d84:	2500      	movs	r5, #0
 8007d86:	462c      	mov	r4, r5
 8007d88:	e7b0      	b.n	8007cec <__gethex+0x68>
 8007d8a:	2c00      	cmp	r4, #0
 8007d8c:	d1c7      	bne.n	8007d1e <__gethex+0x9a>
 8007d8e:	4627      	mov	r7, r4
 8007d90:	e7c7      	b.n	8007d22 <__gethex+0x9e>
 8007d92:	464e      	mov	r6, r9
 8007d94:	462f      	mov	r7, r5
 8007d96:	2501      	movs	r5, #1
 8007d98:	e7c3      	b.n	8007d22 <__gethex+0x9e>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	1cb1      	adds	r1, r6, #2
 8007d9e:	e7cc      	b.n	8007d3a <__gethex+0xb6>
 8007da0:	2401      	movs	r4, #1
 8007da2:	e7fb      	b.n	8007d9c <__gethex+0x118>
 8007da4:	fb03 0002 	mla	r0, r3, r2, r0
 8007da8:	e7ce      	b.n	8007d48 <__gethex+0xc4>
 8007daa:	4631      	mov	r1, r6
 8007dac:	e7de      	b.n	8007d6c <__gethex+0xe8>
 8007dae:	eba6 0309 	sub.w	r3, r6, r9
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4629      	mov	r1, r5
 8007db6:	2b07      	cmp	r3, #7
 8007db8:	dc0a      	bgt.n	8007dd0 <__gethex+0x14c>
 8007dba:	9801      	ldr	r0, [sp, #4]
 8007dbc:	f7fd ff6c 	bl	8005c98 <_Balloc>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	b940      	cbnz	r0, 8007dd6 <__gethex+0x152>
 8007dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8007f38 <__gethex+0x2b4>)
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	21e4      	movs	r1, #228	@ 0xe4
 8007dca:	485c      	ldr	r0, [pc, #368]	@ (8007f3c <__gethex+0x2b8>)
 8007dcc:	f7ff fec0 	bl	8007b50 <__assert_func>
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	105b      	asrs	r3, r3, #1
 8007dd4:	e7ef      	b.n	8007db6 <__gethex+0x132>
 8007dd6:	f100 0a14 	add.w	sl, r0, #20
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4655      	mov	r5, sl
 8007dde:	469b      	mov	fp, r3
 8007de0:	45b1      	cmp	r9, r6
 8007de2:	d337      	bcc.n	8007e54 <__gethex+0x1d0>
 8007de4:	f845 bb04 	str.w	fp, [r5], #4
 8007de8:	eba5 050a 	sub.w	r5, r5, sl
 8007dec:	10ad      	asrs	r5, r5, #2
 8007dee:	6125      	str	r5, [r4, #16]
 8007df0:	4658      	mov	r0, fp
 8007df2:	f7fe f843 	bl	8005e7c <__hi0bits>
 8007df6:	016d      	lsls	r5, r5, #5
 8007df8:	f8d8 6000 	ldr.w	r6, [r8]
 8007dfc:	1a2d      	subs	r5, r5, r0
 8007dfe:	42b5      	cmp	r5, r6
 8007e00:	dd54      	ble.n	8007eac <__gethex+0x228>
 8007e02:	1bad      	subs	r5, r5, r6
 8007e04:	4629      	mov	r1, r5
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7fe fbcf 	bl	80065aa <__any_on>
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	b178      	cbz	r0, 8007e30 <__gethex+0x1ac>
 8007e10:	1e6b      	subs	r3, r5, #1
 8007e12:	1159      	asrs	r1, r3, #5
 8007e14:	f003 021f 	and.w	r2, r3, #31
 8007e18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e1c:	f04f 0901 	mov.w	r9, #1
 8007e20:	fa09 f202 	lsl.w	r2, r9, r2
 8007e24:	420a      	tst	r2, r1
 8007e26:	d003      	beq.n	8007e30 <__gethex+0x1ac>
 8007e28:	454b      	cmp	r3, r9
 8007e2a:	dc36      	bgt.n	8007e9a <__gethex+0x216>
 8007e2c:	f04f 0902 	mov.w	r9, #2
 8007e30:	4629      	mov	r1, r5
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff febe 	bl	8007bb4 <rshift>
 8007e38:	442f      	add	r7, r5
 8007e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e3e:	42bb      	cmp	r3, r7
 8007e40:	da42      	bge.n	8007ec8 <__gethex+0x244>
 8007e42:	9801      	ldr	r0, [sp, #4]
 8007e44:	4621      	mov	r1, r4
 8007e46:	f7fd ff67 	bl	8005d18 <_Bfree>
 8007e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	25a3      	movs	r5, #163	@ 0xa3
 8007e52:	e793      	b.n	8007d7c <__gethex+0xf8>
 8007e54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007e58:	2a2e      	cmp	r2, #46	@ 0x2e
 8007e5a:	d012      	beq.n	8007e82 <__gethex+0x1fe>
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d104      	bne.n	8007e6a <__gethex+0x1e6>
 8007e60:	f845 bb04 	str.w	fp, [r5], #4
 8007e64:	f04f 0b00 	mov.w	fp, #0
 8007e68:	465b      	mov	r3, fp
 8007e6a:	7830      	ldrb	r0, [r6, #0]
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	f7ff fef3 	bl	8007c58 <__hexdig_fun>
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	f000 000f 	and.w	r0, r0, #15
 8007e78:	4098      	lsls	r0, r3
 8007e7a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e7e:	3304      	adds	r3, #4
 8007e80:	e7ae      	b.n	8007de0 <__gethex+0x15c>
 8007e82:	45b1      	cmp	r9, r6
 8007e84:	d8ea      	bhi.n	8007e5c <__gethex+0x1d8>
 8007e86:	492b      	ldr	r1, [pc, #172]	@ (8007f34 <__gethex+0x2b0>)
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff fe25 	bl	8007adc <strncmp>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d1e1      	bne.n	8007e5c <__gethex+0x1d8>
 8007e98:	e7a2      	b.n	8007de0 <__gethex+0x15c>
 8007e9a:	1ea9      	subs	r1, r5, #2
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f7fe fb84 	bl	80065aa <__any_on>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d0c2      	beq.n	8007e2c <__gethex+0x1a8>
 8007ea6:	f04f 0903 	mov.w	r9, #3
 8007eaa:	e7c1      	b.n	8007e30 <__gethex+0x1ac>
 8007eac:	da09      	bge.n	8007ec2 <__gethex+0x23e>
 8007eae:	1b75      	subs	r5, r6, r5
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	9801      	ldr	r0, [sp, #4]
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	f7fe f93f 	bl	8006138 <__lshift>
 8007eba:	1b7f      	subs	r7, r7, r5
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	f100 0a14 	add.w	sl, r0, #20
 8007ec2:	f04f 0900 	mov.w	r9, #0
 8007ec6:	e7b8      	b.n	8007e3a <__gethex+0x1b6>
 8007ec8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ecc:	42bd      	cmp	r5, r7
 8007ece:	dd6f      	ble.n	8007fb0 <__gethex+0x32c>
 8007ed0:	1bed      	subs	r5, r5, r7
 8007ed2:	42ae      	cmp	r6, r5
 8007ed4:	dc34      	bgt.n	8007f40 <__gethex+0x2bc>
 8007ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d022      	beq.n	8007f24 <__gethex+0x2a0>
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d024      	beq.n	8007f2c <__gethex+0x2a8>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d115      	bne.n	8007f12 <__gethex+0x28e>
 8007ee6:	42ae      	cmp	r6, r5
 8007ee8:	d113      	bne.n	8007f12 <__gethex+0x28e>
 8007eea:	2e01      	cmp	r6, #1
 8007eec:	d10b      	bne.n	8007f06 <__gethex+0x282>
 8007eee:	9a02      	ldr	r2, [sp, #8]
 8007ef0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	f8ca 3000 	str.w	r3, [sl]
 8007efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f00:	2562      	movs	r5, #98	@ 0x62
 8007f02:	601c      	str	r4, [r3, #0]
 8007f04:	e73a      	b.n	8007d7c <__gethex+0xf8>
 8007f06:	1e71      	subs	r1, r6, #1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7fe fb4e 	bl	80065aa <__any_on>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1ed      	bne.n	8007eee <__gethex+0x26a>
 8007f12:	9801      	ldr	r0, [sp, #4]
 8007f14:	4621      	mov	r1, r4
 8007f16:	f7fd feff 	bl	8005d18 <_Bfree>
 8007f1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	2550      	movs	r5, #80	@ 0x50
 8007f22:	e72b      	b.n	8007d7c <__gethex+0xf8>
 8007f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f3      	bne.n	8007f12 <__gethex+0x28e>
 8007f2a:	e7e0      	b.n	8007eee <__gethex+0x26a>
 8007f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1dd      	bne.n	8007eee <__gethex+0x26a>
 8007f32:	e7ee      	b.n	8007f12 <__gethex+0x28e>
 8007f34:	08008653 	.word	0x08008653
 8007f38:	080085e9 	.word	0x080085e9
 8007f3c:	080086aa 	.word	0x080086aa
 8007f40:	1e6f      	subs	r7, r5, #1
 8007f42:	f1b9 0f00 	cmp.w	r9, #0
 8007f46:	d130      	bne.n	8007faa <__gethex+0x326>
 8007f48:	b127      	cbz	r7, 8007f54 <__gethex+0x2d0>
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7fe fb2c 	bl	80065aa <__any_on>
 8007f52:	4681      	mov	r9, r0
 8007f54:	117a      	asrs	r2, r7, #5
 8007f56:	2301      	movs	r3, #1
 8007f58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f5c:	f007 071f 	and.w	r7, r7, #31
 8007f60:	40bb      	lsls	r3, r7
 8007f62:	4213      	tst	r3, r2
 8007f64:	4629      	mov	r1, r5
 8007f66:	4620      	mov	r0, r4
 8007f68:	bf18      	it	ne
 8007f6a:	f049 0902 	orrne.w	r9, r9, #2
 8007f6e:	f7ff fe21 	bl	8007bb4 <rshift>
 8007f72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f76:	1b76      	subs	r6, r6, r5
 8007f78:	2502      	movs	r5, #2
 8007f7a:	f1b9 0f00 	cmp.w	r9, #0
 8007f7e:	d047      	beq.n	8008010 <__gethex+0x38c>
 8007f80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d015      	beq.n	8007fb4 <__gethex+0x330>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d017      	beq.n	8007fbc <__gethex+0x338>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d109      	bne.n	8007fa4 <__gethex+0x320>
 8007f90:	f019 0f02 	tst.w	r9, #2
 8007f94:	d006      	beq.n	8007fa4 <__gethex+0x320>
 8007f96:	f8da 3000 	ldr.w	r3, [sl]
 8007f9a:	ea49 0903 	orr.w	r9, r9, r3
 8007f9e:	f019 0f01 	tst.w	r9, #1
 8007fa2:	d10e      	bne.n	8007fc2 <__gethex+0x33e>
 8007fa4:	f045 0510 	orr.w	r5, r5, #16
 8007fa8:	e032      	b.n	8008010 <__gethex+0x38c>
 8007faa:	f04f 0901 	mov.w	r9, #1
 8007fae:	e7d1      	b.n	8007f54 <__gethex+0x2d0>
 8007fb0:	2501      	movs	r5, #1
 8007fb2:	e7e2      	b.n	8007f7a <__gethex+0x2f6>
 8007fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fb6:	f1c3 0301 	rsb	r3, r3, #1
 8007fba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f0      	beq.n	8007fa4 <__gethex+0x320>
 8007fc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007fc6:	f104 0314 	add.w	r3, r4, #20
 8007fca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007fce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007fd2:	f04f 0c00 	mov.w	ip, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fdc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007fe0:	d01b      	beq.n	800801a <__gethex+0x396>
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	6002      	str	r2, [r0, #0]
 8007fe6:	2d02      	cmp	r5, #2
 8007fe8:	f104 0314 	add.w	r3, r4, #20
 8007fec:	d13c      	bne.n	8008068 <__gethex+0x3e4>
 8007fee:	f8d8 2000 	ldr.w	r2, [r8]
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	42b2      	cmp	r2, r6
 8007ff6:	d109      	bne.n	800800c <__gethex+0x388>
 8007ff8:	1171      	asrs	r1, r6, #5
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008000:	f006 061f 	and.w	r6, r6, #31
 8008004:	fa02 f606 	lsl.w	r6, r2, r6
 8008008:	421e      	tst	r6, r3
 800800a:	d13a      	bne.n	8008082 <__gethex+0x3fe>
 800800c:	f045 0520 	orr.w	r5, r5, #32
 8008010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008012:	601c      	str	r4, [r3, #0]
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	601f      	str	r7, [r3, #0]
 8008018:	e6b0      	b.n	8007d7c <__gethex+0xf8>
 800801a:	4299      	cmp	r1, r3
 800801c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008020:	d8d9      	bhi.n	8007fd6 <__gethex+0x352>
 8008022:	68a3      	ldr	r3, [r4, #8]
 8008024:	459b      	cmp	fp, r3
 8008026:	db17      	blt.n	8008058 <__gethex+0x3d4>
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	9801      	ldr	r0, [sp, #4]
 800802c:	3101      	adds	r1, #1
 800802e:	f7fd fe33 	bl	8005c98 <_Balloc>
 8008032:	4681      	mov	r9, r0
 8008034:	b918      	cbnz	r0, 800803e <__gethex+0x3ba>
 8008036:	4b1a      	ldr	r3, [pc, #104]	@ (80080a0 <__gethex+0x41c>)
 8008038:	4602      	mov	r2, r0
 800803a:	2184      	movs	r1, #132	@ 0x84
 800803c:	e6c5      	b.n	8007dca <__gethex+0x146>
 800803e:	6922      	ldr	r2, [r4, #16]
 8008040:	3202      	adds	r2, #2
 8008042:	f104 010c 	add.w	r1, r4, #12
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	300c      	adds	r0, #12
 800804a:	f7ff fd69 	bl	8007b20 <memcpy>
 800804e:	4621      	mov	r1, r4
 8008050:	9801      	ldr	r0, [sp, #4]
 8008052:	f7fd fe61 	bl	8005d18 <_Bfree>
 8008056:	464c      	mov	r4, r9
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008060:	6122      	str	r2, [r4, #16]
 8008062:	2201      	movs	r2, #1
 8008064:	615a      	str	r2, [r3, #20]
 8008066:	e7be      	b.n	8007fe6 <__gethex+0x362>
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	455a      	cmp	r2, fp
 800806c:	dd0b      	ble.n	8008086 <__gethex+0x402>
 800806e:	2101      	movs	r1, #1
 8008070:	4620      	mov	r0, r4
 8008072:	f7ff fd9f 	bl	8007bb4 <rshift>
 8008076:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800807a:	3701      	adds	r7, #1
 800807c:	42bb      	cmp	r3, r7
 800807e:	f6ff aee0 	blt.w	8007e42 <__gethex+0x1be>
 8008082:	2501      	movs	r5, #1
 8008084:	e7c2      	b.n	800800c <__gethex+0x388>
 8008086:	f016 061f 	ands.w	r6, r6, #31
 800808a:	d0fa      	beq.n	8008082 <__gethex+0x3fe>
 800808c:	4453      	add	r3, sl
 800808e:	f1c6 0620 	rsb	r6, r6, #32
 8008092:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008096:	f7fd fef1 	bl	8005e7c <__hi0bits>
 800809a:	42b0      	cmp	r0, r6
 800809c:	dbe7      	blt.n	800806e <__gethex+0x3ea>
 800809e:	e7f0      	b.n	8008082 <__gethex+0x3fe>
 80080a0:	080085e9 	.word	0x080085e9

080080a4 <L_shift>:
 80080a4:	f1c2 0208 	rsb	r2, r2, #8
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	f1c2 0620 	rsb	r6, r2, #32
 80080b0:	6843      	ldr	r3, [r0, #4]
 80080b2:	6804      	ldr	r4, [r0, #0]
 80080b4:	fa03 f506 	lsl.w	r5, r3, r6
 80080b8:	432c      	orrs	r4, r5
 80080ba:	40d3      	lsrs	r3, r2
 80080bc:	6004      	str	r4, [r0, #0]
 80080be:	f840 3f04 	str.w	r3, [r0, #4]!
 80080c2:	4288      	cmp	r0, r1
 80080c4:	d3f4      	bcc.n	80080b0 <L_shift+0xc>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}

080080c8 <__match>:
 80080c8:	b530      	push	{r4, r5, lr}
 80080ca:	6803      	ldr	r3, [r0, #0]
 80080cc:	3301      	adds	r3, #1
 80080ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d2:	b914      	cbnz	r4, 80080da <__match+0x12>
 80080d4:	6003      	str	r3, [r0, #0]
 80080d6:	2001      	movs	r0, #1
 80080d8:	bd30      	pop	{r4, r5, pc}
 80080da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80080e2:	2d19      	cmp	r5, #25
 80080e4:	bf98      	it	ls
 80080e6:	3220      	addls	r2, #32
 80080e8:	42a2      	cmp	r2, r4
 80080ea:	d0f0      	beq.n	80080ce <__match+0x6>
 80080ec:	2000      	movs	r0, #0
 80080ee:	e7f3      	b.n	80080d8 <__match+0x10>

080080f0 <__hexnan>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	680b      	ldr	r3, [r1, #0]
 80080f6:	6801      	ldr	r1, [r0, #0]
 80080f8:	115e      	asrs	r6, r3, #5
 80080fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080fe:	f013 031f 	ands.w	r3, r3, #31
 8008102:	b087      	sub	sp, #28
 8008104:	bf18      	it	ne
 8008106:	3604      	addne	r6, #4
 8008108:	2500      	movs	r5, #0
 800810a:	1f37      	subs	r7, r6, #4
 800810c:	4682      	mov	sl, r0
 800810e:	4690      	mov	r8, r2
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	f846 5c04 	str.w	r5, [r6, #-4]
 8008116:	46b9      	mov	r9, r7
 8008118:	463c      	mov	r4, r7
 800811a:	9502      	str	r5, [sp, #8]
 800811c:	46ab      	mov	fp, r5
 800811e:	784a      	ldrb	r2, [r1, #1]
 8008120:	1c4b      	adds	r3, r1, #1
 8008122:	9303      	str	r3, [sp, #12]
 8008124:	b342      	cbz	r2, 8008178 <__hexnan+0x88>
 8008126:	4610      	mov	r0, r2
 8008128:	9105      	str	r1, [sp, #20]
 800812a:	9204      	str	r2, [sp, #16]
 800812c:	f7ff fd94 	bl	8007c58 <__hexdig_fun>
 8008130:	2800      	cmp	r0, #0
 8008132:	d151      	bne.n	80081d8 <__hexnan+0xe8>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	9905      	ldr	r1, [sp, #20]
 8008138:	2a20      	cmp	r2, #32
 800813a:	d818      	bhi.n	800816e <__hexnan+0x7e>
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	459b      	cmp	fp, r3
 8008140:	dd13      	ble.n	800816a <__hexnan+0x7a>
 8008142:	454c      	cmp	r4, r9
 8008144:	d206      	bcs.n	8008154 <__hexnan+0x64>
 8008146:	2d07      	cmp	r5, #7
 8008148:	dc04      	bgt.n	8008154 <__hexnan+0x64>
 800814a:	462a      	mov	r2, r5
 800814c:	4649      	mov	r1, r9
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff ffa8 	bl	80080a4 <L_shift>
 8008154:	4544      	cmp	r4, r8
 8008156:	d952      	bls.n	80081fe <__hexnan+0x10e>
 8008158:	2300      	movs	r3, #0
 800815a:	f1a4 0904 	sub.w	r9, r4, #4
 800815e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008162:	f8cd b008 	str.w	fp, [sp, #8]
 8008166:	464c      	mov	r4, r9
 8008168:	461d      	mov	r5, r3
 800816a:	9903      	ldr	r1, [sp, #12]
 800816c:	e7d7      	b.n	800811e <__hexnan+0x2e>
 800816e:	2a29      	cmp	r2, #41	@ 0x29
 8008170:	d157      	bne.n	8008222 <__hexnan+0x132>
 8008172:	3102      	adds	r1, #2
 8008174:	f8ca 1000 	str.w	r1, [sl]
 8008178:	f1bb 0f00 	cmp.w	fp, #0
 800817c:	d051      	beq.n	8008222 <__hexnan+0x132>
 800817e:	454c      	cmp	r4, r9
 8008180:	d206      	bcs.n	8008190 <__hexnan+0xa0>
 8008182:	2d07      	cmp	r5, #7
 8008184:	dc04      	bgt.n	8008190 <__hexnan+0xa0>
 8008186:	462a      	mov	r2, r5
 8008188:	4649      	mov	r1, r9
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff ff8a 	bl	80080a4 <L_shift>
 8008190:	4544      	cmp	r4, r8
 8008192:	d936      	bls.n	8008202 <__hexnan+0x112>
 8008194:	f1a8 0204 	sub.w	r2, r8, #4
 8008198:	4623      	mov	r3, r4
 800819a:	f853 1b04 	ldr.w	r1, [r3], #4
 800819e:	f842 1f04 	str.w	r1, [r2, #4]!
 80081a2:	429f      	cmp	r7, r3
 80081a4:	d2f9      	bcs.n	800819a <__hexnan+0xaa>
 80081a6:	1b3b      	subs	r3, r7, r4
 80081a8:	f023 0303 	bic.w	r3, r3, #3
 80081ac:	3304      	adds	r3, #4
 80081ae:	3401      	adds	r4, #1
 80081b0:	3e03      	subs	r6, #3
 80081b2:	42b4      	cmp	r4, r6
 80081b4:	bf88      	it	hi
 80081b6:	2304      	movhi	r3, #4
 80081b8:	4443      	add	r3, r8
 80081ba:	2200      	movs	r2, #0
 80081bc:	f843 2b04 	str.w	r2, [r3], #4
 80081c0:	429f      	cmp	r7, r3
 80081c2:	d2fb      	bcs.n	80081bc <__hexnan+0xcc>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	b91b      	cbnz	r3, 80081d0 <__hexnan+0xe0>
 80081c8:	4547      	cmp	r7, r8
 80081ca:	d128      	bne.n	800821e <__hexnan+0x12e>
 80081cc:	2301      	movs	r3, #1
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	2005      	movs	r0, #5
 80081d2:	b007      	add	sp, #28
 80081d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d8:	3501      	adds	r5, #1
 80081da:	2d08      	cmp	r5, #8
 80081dc:	f10b 0b01 	add.w	fp, fp, #1
 80081e0:	dd06      	ble.n	80081f0 <__hexnan+0x100>
 80081e2:	4544      	cmp	r4, r8
 80081e4:	d9c1      	bls.n	800816a <__hexnan+0x7a>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ec:	2501      	movs	r5, #1
 80081ee:	3c04      	subs	r4, #4
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	f000 000f 	and.w	r0, r0, #15
 80081f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081fa:	6020      	str	r0, [r4, #0]
 80081fc:	e7b5      	b.n	800816a <__hexnan+0x7a>
 80081fe:	2508      	movs	r5, #8
 8008200:	e7b3      	b.n	800816a <__hexnan+0x7a>
 8008202:	9b01      	ldr	r3, [sp, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0dd      	beq.n	80081c4 <__hexnan+0xd4>
 8008208:	f1c3 0320 	rsb	r3, r3, #32
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	40da      	lsrs	r2, r3
 8008212:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008216:	4013      	ands	r3, r2
 8008218:	f846 3c04 	str.w	r3, [r6, #-4]
 800821c:	e7d2      	b.n	80081c4 <__hexnan+0xd4>
 800821e:	3f04      	subs	r7, #4
 8008220:	e7d0      	b.n	80081c4 <__hexnan+0xd4>
 8008222:	2004      	movs	r0, #4
 8008224:	e7d5      	b.n	80081d2 <__hexnan+0xe2>

08008226 <__ascii_mbtowc>:
 8008226:	b082      	sub	sp, #8
 8008228:	b901      	cbnz	r1, 800822c <__ascii_mbtowc+0x6>
 800822a:	a901      	add	r1, sp, #4
 800822c:	b142      	cbz	r2, 8008240 <__ascii_mbtowc+0x1a>
 800822e:	b14b      	cbz	r3, 8008244 <__ascii_mbtowc+0x1e>
 8008230:	7813      	ldrb	r3, [r2, #0]
 8008232:	600b      	str	r3, [r1, #0]
 8008234:	7812      	ldrb	r2, [r2, #0]
 8008236:	1e10      	subs	r0, r2, #0
 8008238:	bf18      	it	ne
 800823a:	2001      	movne	r0, #1
 800823c:	b002      	add	sp, #8
 800823e:	4770      	bx	lr
 8008240:	4610      	mov	r0, r2
 8008242:	e7fb      	b.n	800823c <__ascii_mbtowc+0x16>
 8008244:	f06f 0001 	mvn.w	r0, #1
 8008248:	e7f8      	b.n	800823c <__ascii_mbtowc+0x16>

0800824a <_realloc_r>:
 800824a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	4607      	mov	r7, r0
 8008250:	4614      	mov	r4, r2
 8008252:	460d      	mov	r5, r1
 8008254:	b921      	cbnz	r1, 8008260 <_realloc_r+0x16>
 8008256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825a:	4611      	mov	r1, r2
 800825c:	f7fd bc90 	b.w	8005b80 <_malloc_r>
 8008260:	b92a      	cbnz	r2, 800826e <_realloc_r+0x24>
 8008262:	f7fd fc19 	bl	8005a98 <_free_r>
 8008266:	4625      	mov	r5, r4
 8008268:	4628      	mov	r0, r5
 800826a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826e:	f000 f8c4 	bl	80083fa <_malloc_usable_size_r>
 8008272:	4284      	cmp	r4, r0
 8008274:	4606      	mov	r6, r0
 8008276:	d802      	bhi.n	800827e <_realloc_r+0x34>
 8008278:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800827c:	d8f4      	bhi.n	8008268 <_realloc_r+0x1e>
 800827e:	4621      	mov	r1, r4
 8008280:	4638      	mov	r0, r7
 8008282:	f7fd fc7d 	bl	8005b80 <_malloc_r>
 8008286:	4680      	mov	r8, r0
 8008288:	b908      	cbnz	r0, 800828e <_realloc_r+0x44>
 800828a:	4645      	mov	r5, r8
 800828c:	e7ec      	b.n	8008268 <_realloc_r+0x1e>
 800828e:	42b4      	cmp	r4, r6
 8008290:	4622      	mov	r2, r4
 8008292:	4629      	mov	r1, r5
 8008294:	bf28      	it	cs
 8008296:	4632      	movcs	r2, r6
 8008298:	f7ff fc42 	bl	8007b20 <memcpy>
 800829c:	4629      	mov	r1, r5
 800829e:	4638      	mov	r0, r7
 80082a0:	f7fd fbfa 	bl	8005a98 <_free_r>
 80082a4:	e7f1      	b.n	800828a <_realloc_r+0x40>

080082a6 <__ascii_wctomb>:
 80082a6:	4603      	mov	r3, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	b141      	cbz	r1, 80082be <__ascii_wctomb+0x18>
 80082ac:	2aff      	cmp	r2, #255	@ 0xff
 80082ae:	d904      	bls.n	80082ba <__ascii_wctomb+0x14>
 80082b0:	228a      	movs	r2, #138	@ 0x8a
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	4770      	bx	lr
 80082ba:	700a      	strb	r2, [r1, #0]
 80082bc:	2001      	movs	r0, #1
 80082be:	4770      	bx	lr

080082c0 <fiprintf>:
 80082c0:	b40e      	push	{r1, r2, r3}
 80082c2:	b503      	push	{r0, r1, lr}
 80082c4:	4601      	mov	r1, r0
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	4805      	ldr	r0, [pc, #20]	@ (80082e0 <fiprintf+0x20>)
 80082ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	f7ff f991 	bl	80075f8 <_vfiprintf_r>
 80082d6:	b002      	add	sp, #8
 80082d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082dc:	b003      	add	sp, #12
 80082de:	4770      	bx	lr
 80082e0:	20000018 	.word	0x20000018

080082e4 <__swhatbuf_r>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	460c      	mov	r4, r1
 80082e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ec:	2900      	cmp	r1, #0
 80082ee:	b096      	sub	sp, #88	@ 0x58
 80082f0:	4615      	mov	r5, r2
 80082f2:	461e      	mov	r6, r3
 80082f4:	da0d      	bge.n	8008312 <__swhatbuf_r+0x2e>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	bf14      	ite	ne
 8008302:	2340      	movne	r3, #64	@ 0x40
 8008304:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008308:	2000      	movs	r0, #0
 800830a:	6031      	str	r1, [r6, #0]
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	b016      	add	sp, #88	@ 0x58
 8008310:	bd70      	pop	{r4, r5, r6, pc}
 8008312:	466a      	mov	r2, sp
 8008314:	f000 f848 	bl	80083a8 <_fstat_r>
 8008318:	2800      	cmp	r0, #0
 800831a:	dbec      	blt.n	80082f6 <__swhatbuf_r+0x12>
 800831c:	9901      	ldr	r1, [sp, #4]
 800831e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008322:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008326:	4259      	negs	r1, r3
 8008328:	4159      	adcs	r1, r3
 800832a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800832e:	e7eb      	b.n	8008308 <__swhatbuf_r+0x24>

08008330 <__smakebuf_r>:
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008334:	079d      	lsls	r5, r3, #30
 8008336:	4606      	mov	r6, r0
 8008338:	460c      	mov	r4, r1
 800833a:	d507      	bpl.n	800834c <__smakebuf_r+0x1c>
 800833c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	2301      	movs	r3, #1
 8008346:	6163      	str	r3, [r4, #20]
 8008348:	b003      	add	sp, #12
 800834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800834c:	ab01      	add	r3, sp, #4
 800834e:	466a      	mov	r2, sp
 8008350:	f7ff ffc8 	bl	80082e4 <__swhatbuf_r>
 8008354:	9f00      	ldr	r7, [sp, #0]
 8008356:	4605      	mov	r5, r0
 8008358:	4639      	mov	r1, r7
 800835a:	4630      	mov	r0, r6
 800835c:	f7fd fc10 	bl	8005b80 <_malloc_r>
 8008360:	b948      	cbnz	r0, 8008376 <__smakebuf_r+0x46>
 8008362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008366:	059a      	lsls	r2, r3, #22
 8008368:	d4ee      	bmi.n	8008348 <__smakebuf_r+0x18>
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	f043 0302 	orr.w	r3, r3, #2
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	e7e2      	b.n	800833c <__smakebuf_r+0xc>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	6020      	str	r0, [r4, #0]
 800837a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008386:	b15b      	cbz	r3, 80083a0 <__smakebuf_r+0x70>
 8008388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800838c:	4630      	mov	r0, r6
 800838e:	f000 f81d 	bl	80083cc <_isatty_r>
 8008392:	b128      	cbz	r0, 80083a0 <__smakebuf_r+0x70>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	431d      	orrs	r5, r3
 80083a4:	81a5      	strh	r5, [r4, #12]
 80083a6:	e7cf      	b.n	8008348 <__smakebuf_r+0x18>

080083a8 <_fstat_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d07      	ldr	r5, [pc, #28]	@ (80083c8 <_fstat_r+0x20>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	602b      	str	r3, [r5, #0]
 80083b6:	f7f9 fa1b 	bl	80017f0 <_fstat>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d102      	bne.n	80083c4 <_fstat_r+0x1c>
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	b103      	cbz	r3, 80083c4 <_fstat_r+0x1c>
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	bf00      	nop
 80083c8:	20000430 	.word	0x20000430

080083cc <_isatty_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_isatty_r+0x1c>)
 80083d0:	2300      	movs	r3, #0
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f9 fa1a 	bl	8001810 <_isatty>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_isatty_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_isatty_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000430 	.word	0x20000430

080083ec <abort>:
 80083ec:	b508      	push	{r3, lr}
 80083ee:	2006      	movs	r0, #6
 80083f0:	f000 f834 	bl	800845c <raise>
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7f9 f9c7 	bl	8001788 <_exit>

080083fa <_malloc_usable_size_r>:
 80083fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fe:	1f18      	subs	r0, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfbc      	itt	lt
 8008404:	580b      	ldrlt	r3, [r1, r0]
 8008406:	18c0      	addlt	r0, r0, r3
 8008408:	4770      	bx	lr

0800840a <_raise_r>:
 800840a:	291f      	cmp	r1, #31
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	460c      	mov	r4, r1
 8008412:	d904      	bls.n	800841e <_raise_r+0x14>
 8008414:	2316      	movs	r3, #22
 8008416:	6003      	str	r3, [r0, #0]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	bd38      	pop	{r3, r4, r5, pc}
 800841e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008420:	b112      	cbz	r2, 8008428 <_raise_r+0x1e>
 8008422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008426:	b94b      	cbnz	r3, 800843c <_raise_r+0x32>
 8008428:	4628      	mov	r0, r5
 800842a:	f000 f831 	bl	8008490 <_getpid_r>
 800842e:	4622      	mov	r2, r4
 8008430:	4601      	mov	r1, r0
 8008432:	4628      	mov	r0, r5
 8008434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008438:	f000 b818 	b.w	800846c <_kill_r>
 800843c:	2b01      	cmp	r3, #1
 800843e:	d00a      	beq.n	8008456 <_raise_r+0x4c>
 8008440:	1c59      	adds	r1, r3, #1
 8008442:	d103      	bne.n	800844c <_raise_r+0x42>
 8008444:	2316      	movs	r3, #22
 8008446:	6003      	str	r3, [r0, #0]
 8008448:	2001      	movs	r0, #1
 800844a:	e7e7      	b.n	800841c <_raise_r+0x12>
 800844c:	2100      	movs	r1, #0
 800844e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008452:	4620      	mov	r0, r4
 8008454:	4798      	blx	r3
 8008456:	2000      	movs	r0, #0
 8008458:	e7e0      	b.n	800841c <_raise_r+0x12>
	...

0800845c <raise>:
 800845c:	4b02      	ldr	r3, [pc, #8]	@ (8008468 <raise+0xc>)
 800845e:	4601      	mov	r1, r0
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	f7ff bfd2 	b.w	800840a <_raise_r>
 8008466:	bf00      	nop
 8008468:	20000018 	.word	0x20000018

0800846c <_kill_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d07      	ldr	r5, [pc, #28]	@ (800848c <_kill_r+0x20>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7f9 f975 	bl	8001768 <_kill>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_kill_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_kill_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20000430 	.word	0x20000430

08008490 <_getpid_r>:
 8008490:	f7f9 b962 	b.w	8001758 <_getpid>

08008494 <_init>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	bf00      	nop
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr

080084a0 <_fini>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr
